<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-v2" />
<meta name="DC.Description.Abstract" content="The OAuth 2.0 authorization framework enables a third-party" />
<meta name="DC.Creator" content="Recordon, David" />
<meta name="DC.Creator" content="Hardt, Dick" />
<meta name="DC.Date.Issued" content="2012-07-15" />
<meta name="DC.Title" content="The OAuth 2.0 Authorization Framework" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-v2-11 - The OAuth 2.0 Authorization Framework</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-v2-11.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-v2-11.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-v2-11.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-v2-11.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-v2' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-v2@tools.ietf.org?subject=draft-ietf-oauth-v2%20" title="Send email to the document authors">Email</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=draft-ietf-oauth-v2-11.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=draft-ietf-oauth-v2-11.txt" title="Side-by-side diff">Diff2</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-v2-11.txt" title="Run an idnits check of this document">Nits</a>] </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-ietf-oauth-v2-00">00</a> <a href="./draft-ietf-oauth-v2-01">01</a> <a href="./draft-ietf-oauth-v2-02">02</a> <a href="./draft-ietf-oauth-v2-03">03</a> <a href="./draft-ietf-oauth-v2-04">04</a> <a href="./draft-ietf-oauth-v2-05">05</a> <a href="./draft-ietf-oauth-v2-06">06</a> <a href="./draft-ietf-oauth-v2-07">07</a> <a href="./draft-ietf-oauth-v2-08">08</a> <a href="./draft-ietf-oauth-v2-09">09</a> <a href="./draft-ietf-oauth-v2-10">10</a> <a href="./draft-ietf-oauth-v2-11">11</a>                           
          <a href="./draft-ietf-oauth-v2-12">12</a> <a href="./draft-ietf-oauth-v2-13">13</a> <a href="./draft-ietf-oauth-v2-14">14</a> <a href="./draft-ietf-oauth-v2-15">15</a> <a href="./draft-ietf-oauth-v2-16">16</a> <a href="./draft-ietf-oauth-v2-17">17</a> <a href="./draft-ietf-oauth-v2-18">18</a> <a href="./draft-ietf-oauth-v2-19">19</a> <a href="./draft-ietf-oauth-v2-20">20</a> <a href="./draft-ietf-oauth-v2-21">21</a> <a href="./draft-ietf-oauth-v2-22">22</a> <a href="./draft-ietf-oauth-v2-23">23</a>                           
          <a href="./draft-ietf-oauth-v2-24">24</a> <a href="./draft-ietf-oauth-v2-25">25</a> <a href="./draft-ietf-oauth-v2-26">26</a> <a href="./draft-ietf-oauth-v2-27">27</a> <a href="./draft-ietf-oauth-v2-28">28</a> <a href="./draft-ietf-oauth-v2-29">29</a> <a href="./draft-ietf-oauth-v2-30">30</a>                                          </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Network Working Group                               E. Hammer-Lahav, Ed.
Internet-Draft                                                    Yahoo!
Obsoletes: <a href="./rfc5849">5849</a> (if approved)                                D. Recordon
Intended status: Standards Track                                Facebook
Expires: June 4, 2011                                           D. Hardt
                                                               Microsoft
                                                        December 1, 2010


                    <span class="h1">The OAuth 2.0 Protocol Framework</span>
                         <span class="h1">draft-ietf-oauth-v2-11</span>

Abstract

   This specification describes the OAuth 2.0 protocol framework.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on June 4, 2011.

Copyright Notice

   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-1.1">1.1</a>.  Notational Conventions . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.2">1.2</a>.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.3">1.3</a>.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
     <a href="#section-1.4">1.4</a>.  Access Grants  . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-1.4.1">1.4.1</a>.  Authorization Code . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-1.4.2">1.4.2</a>.  Resource Owner Password Credentials  . . . . . . . . . <a href="#page-10">10</a>
       <a href="#section-1.4.3">1.4.3</a>.  Client Credentials . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
       <a href="#section-1.4.4">1.4.4</a>.  Refresh Token  . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
       <a href="#section-1.4.5">1.4.5</a>.  Assertion  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
   <a href="#section-2">2</a>.  Client Profiles  . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-2.1">2.1</a>.  Web Server . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-2.2">2.2</a>.  User-Agent . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-2.3">2.3</a>.  Native Application . . . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-2.4">2.4</a>.  Autonomous . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
   <a href="#section-3">3</a>.  Client Credentials . . . . . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
     <a href="#section-3.1">3.1</a>.  Client Password Credentials  . . . . . . . . . . . . . . . <a href="#page-17">17</a>
     <a href="#section-3.2">3.2</a>.  Client Assertion Credentials . . . . . . . . . . . . . . . <a href="#page-18">18</a>
   <a href="#section-4">4</a>.  Obtaining End-User Authorization . . . . . . . . . . . . . . . <a href="#page-20">20</a>
     <a href="#section-4.1">4.1</a>.  Authorization Request  . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
     <a href="#section-4.2">4.2</a>.  Authorization Response . . . . . . . . . . . . . . . . . . <a href="#page-22">22</a>
     <a href="#section-4.3">4.3</a>.  Error Response . . . . . . . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
       <a href="#section-4.3.1">4.3.1</a>.  Error Codes  . . . . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
   <a href="#section-5">5</a>.  Obtaining an Access Token  . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
     <a href="#section-5.1">5.1</a>.  Access Grant Types . . . . . . . . . . . . . . . . . . . . <a href="#page-27">27</a>
       <a href="#section-5.1.1">5.1.1</a>.  Authorization Code . . . . . . . . . . . . . . . . . . <a href="#page-27">27</a>
       <a href="#section-5.1.2">5.1.2</a>.  Resource Owner Password Credentials  . . . . . . . . . <a href="#page-27">27</a>
       <a href="#section-5.1.3">5.1.3</a>.  Client Credentials . . . . . . . . . . . . . . . . . . <a href="#page-28">28</a>
       <a href="#section-5.1.4">5.1.4</a>.  Refresh Token  . . . . . . . . . . . . . . . . . . . . <a href="#page-28">28</a>
       <a href="#section-5.1.5">5.1.5</a>.  Assertion  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-29">29</a>
     <a href="#section-5.2">5.2</a>.  Access Token Response  . . . . . . . . . . . . . . . . . . <a href="#page-30">30</a>
     <a href="#section-5.3">5.3</a>.  Error Response . . . . . . . . . . . . . . . . . . . . . . <a href="#page-31">31</a>
       <a href="#section-5.3.1">5.3.1</a>.  Error Codes  . . . . . . . . . . . . . . . . . . . . . <a href="#page-32">32</a>
   <a href="#section-6">6</a>.  Accessing a Protected Resource . . . . . . . . . . . . . . . . <a href="#page-33">33</a>
     <a href="#section-6.1">6.1</a>.  Access Token Types . . . . . . . . . . . . . . . . . . . . <a href="#page-33">33</a>
     <a href="#section-6.2">6.2</a>.  The WWW-Authenticate Response Header Field . . . . . . . . <a href="#page-33">33</a>
       <a href="#section-6.2.1">6.2.1</a>.  Error Codes  . . . . . . . . . . . . . . . . . . . . . <a href="#page-35">35</a>
   <a href="#section-7">7</a>.  Extensibility  . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-36">36</a>
     <a href="#section-7.1">7.1</a>.  Defining New Client Credentials Types  . . . . . . . . . . <a href="#page-36">36</a>
     <a href="#section-7.2">7.2</a>.  Defining New Endpoint Parameters . . . . . . . . . . . . . <a href="#page-36">36</a>
     <a href="#section-7.3">7.3</a>.  Defining New Header Field Parameters . . . . . . . . . . . <a href="#page-36">36</a>
     <a href="#section-7.4">7.4</a>.  Defining New Access Grant Types  . . . . . . . . . . . . . <a href="#page-37">37</a>
   <a href="#section-8">8</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-37">37</a>
   <a href="#section-9">9</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-37">37</a>
     <a href="#section-9.1">9.1</a>.  The OAuth Parameters Registry  . . . . . . . . . . . . . . <a href="#page-37">37</a>
       <a href="#section-9.1.1">9.1.1</a>.  Registration Template  . . . . . . . . . . . . . . . . <a href="#page-37">37</a>



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


       <a href="#section-9.1.2">9.1.2</a>.  Example  . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-38">38</a>
   <a href="#appendix-A">Appendix A</a>.  Examples  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-38">38</a>
   <a href="#appendix-B">Appendix B</a>.  Contributors  . . . . . . . . . . . . . . . . . . . . <a href="#page-38">38</a>
   <a href="#appendix-C">Appendix C</a>.  Acknowledgements  . . . . . . . . . . . . . . . . . . <a href="#page-39">39</a>
   <a href="#appendix-D">Appendix D</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-39">39</a>
   <a href="#section-10">10</a>. References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-44">44</a>
     <a href="#section-10.1">10.1</a>. Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-44">44</a>
     <a href="#section-10.2">10.2</a>. Informative References . . . . . . . . . . . . . . . . . . <a href="#page-45">45</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-46">46</a>










































<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   With the increasing use of distributed web services and cloud
   computing, third-party applications require access to server-hosted
   resources.  These resources are usually protected and require
   authentication using the resource owner's credentials (typically a
   username and password).

   In the traditional client-server authentication model, the client
   accesses a protected resource on the server by authenticating with
   the server using the resource owner's credentials.  In order to
   provide third-party applications access to protected resources, the
   resource owner shares its credentials with the third-party.  This
   creates several problems and limitations:

   o  Third-party applications are required to store the resource-
      owner's credentials for future use, typically a password in clear-
      text.

   o  Servers are required to support password authentication, despite
      the security weaknesses created by passwords.

   o  Third-party applications gain overly broad access to the resource-
      owner's protected resources, leaving resource owners without any
      ability to restrict access to a limited subset of resources, to
      limit access duration, or to limit access to the methods supported
      by these resources.

   o  Resource owners cannot revoke access to an individual third-party
      without revoking access to all third-parties, and must do so by
      changing their password.

   OAuth addresses these issues by separating the role of the client
   from that of the resource owner.  In OAuth, the client (which is
   usually not the resource owner, but is acting on the resource owner's
   behalf) requests access to resources controlled by the resource owner
   and hosted by the resource server, and is issued a different set of
   credentials than those of the resource owner.

   Instead of using the resource owner's credentials to access protected
   resources, the client obtains an access token - a string which
   denotes a specific scope, duration, and other attributes.  Access
   tokens are issued to third-party clients by an authorization server
   with the approval of the resource owner.  The client uses the access
   token to access the protected resources hosted by the resource
   server.

   For example, a web user (resource owner) can grant a printing service



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   (client) access to her protected photos stored at a photo sharing
   service (resource server), without sharing her username and password
   with the printing service.  Instead, she authenticates directly with
   an authentication service trusted by the photo sharing service
   (authorization server) which issues the printing service delegation-
   specific credentials (token).

   Access tokens can have different formats, structures, and methods of
   utilization (e.g. cryptographic properties), based on the resource
   server security requirements.  Access token attributes and the
   methods used to access protected resources are beyond the scope of
   this specification and are defined by companion specifications.  The
   interaction between the authorization server and resource server is
   beyond the scope of this specification.

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Notational Conventions</span>

   The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   document are to be interpreted as described in [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].

   This document uses the Augmented Backus-Naur Form (ABNF) notation of
   [<a href="#ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>].  Additionally, the following rules
   are included from [<a href="./rfc3986" title="&quot;Uniform Resource Identifier (URI): Generic Syntax&quot;">RFC3986</a>]: URI-reference; and from
   [<a href="#ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>]: OWS, RWS, and quoted-string.

   Unless otherwise noted, all the protocol parameter names and values
   are case sensitive.

<span class="h3"><a class="selflink" name="section-1.2" href="#section-1.2">1.2</a>.  Terminology</span>

   protected resource
         An access-restricted resource which can be obtained using an
         OAuth-authenticated request.

   resource server
         A server capable of accepting and responding to protected
         resource requests.

   client
         An application obtaining authorization and making protected
         resource requests.

   resource owner
         An entity capable of granting access to a protected resource.






<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   end-user
         A human resource owner.

   token
         A string representing an access authorization issued to the
         client.  The string is usually opaque to the client.  Tokens
         represent specific scopes and durations of access, granted by
         the resource owner, and enforced by the resource server and
         authorization servers.  The token may denote an identifier used
         to retrieve the authorization information, or self-contain the
         authorization information in a verifiable manner (i.e. a token
         string consisting of some data and a signature).  Tokens may be
         pure capabilities.  Specific additional authentication
         credentials may be required in order for a client to use a
         token.

   access token
         A token used by the client to make authenticated requests on
         behalf of the resource owner.

   refresh token
         A token used by the client to obtain a new access token without
         having to involve the resource owner.

   authorization code  A short-lived token representing the
         authorization provided by the end-user.  The authorization code
         is used to obtain an access token and a refresh token.

   access grant  A general term used to describe the intermediate
         credentials (such as an end-user password or authorization
         code) representing the resource owner authorization.  Access
         grants are used by the client to obtain an access token.  By
         exchanging access grants of different types for an access
         token, the resource server is only required to support a single
         authentication scheme.

   authorization server
         A server capable of issuing tokens after successfully
         authenticating the resource owner and obtaining authorization.
         The authorization server may be the same server as the resource
         server, or a separate entity.  A single authorization server
         may issue tokens for multiple resource servers.

   end-user authorization endpoint
         The authorization server's HTTP endpoint capable of
         authenticating the end-user and obtaining authorization.  The
         end-user authorization endpoint is described in <a href="#section-4">Section 4</a>.




<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   token endpoint
         The authorization server's HTTP endpoint capable of issuing
         tokens and refreshing expired tokens.  The token endpoint is
         described in <a href="#section-5">Section 5</a>.

   client identifier
         A unique identifier issued to the client to identify itself to
         the authorization server.  Client identifiers may have a
         matching secret.  The client identifier is described in
         <a href="#section-3">Section 3</a>.

<span class="h3"><a class="selflink" name="section-1.3" href="#section-1.3">1.3</a>.  Overview</span>

   OAuth provides a method for clients to access a protected resource on
   behalf of a resource owner.  Before a client can access a protected
   resource, it must first obtain authorization (access grant) from the
   resource owner, then exchange the access grant for an access token
   (representing the grant's scope, duration, and other attributes).
   The client accesses the protected resource by presenting the access
   token to the resource server.

   The access token provides an abstraction layer, replacing different
   authorization constructs (e.g. username and password, assertion) for
   a single token understood by the resource server.  This abstraction
   enables issuing access tokens valid for a short time period, as well
   as removing the resource server's need to understand a wide range of
   authentication schemes.


     +--------+                               +---------------+
     |        |--(A)- Authorization Request -&gt;|   Resource    |
     |        |                               |     Owner     |
     |        |&lt;-(B)----- Access Grant -------|               |
     |        |                               +---------------+
     |        |
     |        |           Access Grant &amp;      +---------------+
     |        |--(C)--- Client Credentials --&gt;| Authorization |
     | Client |                               |     Server    |
     |        |&lt;-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------&gt;|    Resource   |
     |        |                               |     Server    |
     |        |&lt;-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+





<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


                     Figure 1: Abstract Protocol Flow

   The abstract flow illustrated in Figure 1 describes the overall
   protocol architecture and includes the following steps:

   (A)  The client requests authorization from the resource owner.  The
        authorization request can be made directly to the resource
        owner, or preferably indirectly via an intermediary such as an
        authorization server.

   (B)  The client receives an access grant which represents the
        authorization provided by the resource owner.

   (C)  The client requests an access token by authenticating with the
        authorization server using its client credentials, and
        presenting the access grant.

   (D)  The authorization server validates the client credentials and
        the access grant, and if valid issues an access token.

   (E)  The client makes a protected resource request to the resource
        server by presenting the access token.

   (F)  The resource server validates the access token, and if valid,
        serves the request.

<span class="h3"><a class="selflink" name="section-1.4" href="#section-1.4">1.4</a>.  Access Grants</span>

   The access grant represents the authorization provided by the
   resource owner.  The access grant type depends on the method used by
   the client and supported by the authorization server to obtain it.

<span class="h4"><a class="selflink" name="section-1.4.1" href="#section-1.4.1">1.4.1</a>.  Authorization Code</span>

   The authorization code is an access grant obtained by directing the
   end-user to an authorization server.  The authorization server
   authenticates the end-user, obtains authorization, and issues the an
   authorization code to the client.  Because the end-user only
   authenticates with the authorization server, the end-user's password
   is never shared with the client.

   The authorization code access grant is suitable when the client is
   interacting with an end-user via a user-agent.








<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


     +----------+
     |          |
     | End-User |
     |          |
     +----------+
          ^
          |
         (B)
     +----|-----+        Client Identifier     +---------------+
     |         -+--(A)--- &amp; Redirect URI -----&gt;|               |
     |  User-   |                              | Authorization |
     |  Agent  -|--(B)-- User authenticates --&gt;|     Server    |
     |          |                              |               |
     |         -+--(C)-- Authorization Code --&lt;|               |
     +-|----|---+                              +---------------+
      (A)  (C)
       |    |
       ^    v
     +---------+
     |         |
     |  Client |
     |         |
     +---------+


                 Figure 2: Obtaining an Authorization Code

   The authorization code flow illustrated in Figure 2 includes the
   following steps:

   (A)  The client initiates the flow by directing the end-user's user-
        agent to the authorization server's end-user authorization
        endpoint.  The client includes its client identifier, requested
        scope, local state, and a redirection URI (to which the
        authorization server will send the user-agent back once access
        is granted or denied).

   (B)  The authorization server authenticates the end-user (via the
        user-agent) and establishes whether the end-user grants or
        denies the client's access request.

   (C)  If access is granted, the authorization server directs the user-
        agent back to the client using the redirection URI provided.
        The authorization server includes an authorization code for the
        client to use to obtain an access token.

   Once the client obtains an authorization code, it requests an access
   token by authenticating with the authorization server (using its



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                  [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   client credentials) and presenting the authorization code (access
   grant).

   In cases where the client is incapable of maintaining its client
   credentials secret (such as native applications or an application
   implemented as a user-agent script), the authorization server issues
   an access token directly to the client in step (C), instead of
   issuing an authorization code.

   Obtaining an authorization code is described in <a href="#section-4">Section 4</a>.

<span class="h4"><a class="selflink" name="section-1.4.2" href="#section-1.4.2">1.4.2</a>.  Resource Owner Password Credentials</span>

   The resource owner password credentials (e.g. a username and
   password) can be used directly as an access grant to obtain an access
   token.  The credentials should only be used when there is a high
   degree of trust between the resource owner and the client (e.g. its
   computer operating system or a highly privileged application), and
   when other access grant types are not available (such as an
   authorization code).

   Even though this grant type requires direct client access to the
   resource owner's credentials, the resource owner's credentials are
   used for a single request and are exchanged for an access token.
   Unlike the HTTP Basic authentication scheme defined in [<a href="./rfc2617">RFC2617</a>],
   this grant type eliminates the need for the client to store the
   resource-owner's credentials for future use.

   In Figure 3, the client requests authorization from the resource
   owner directly.  When the resource owner is an end-user, the client
   typically prompts the end-user for the username and password.


     +--------+                               +----------+
     |        |--(A)- Authorization Request -&gt;| Resource |
     | Client |                               |   Owner  |
     |        |&lt;-(B)-- Username &amp; Password ---|          |
     +--------+                               +----------+


          Figure 3: Obtaining Resource Owner Password Credentials

<span class="h4"><a class="selflink" name="section-1.4.3" href="#section-1.4.3">1.4.3</a>.  Client Credentials</span>

   The client credentials can be used as an access grant when the
   authorization scope is limited to the protected resources under the
   control of the client, or other protected resources previously
   arranged with the authorization server.  Client credentials are used



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   as an access grant typically when the client is acting on its own
   behalf (the client is also the resource owner).

<span class="h4"><a class="selflink" name="section-1.4.4" href="#section-1.4.4">1.4.4</a>.  Refresh Token</span>

   Access tokens usually have a shorter lifetime than authorized by the
   resource owner.  When issuing an access token, the authorization
   server can include a refresh token which is used by the client to
   obtain a new access token when the current access token expires.
   When requesting a new access token, the refresh token acts as an
   access grant.  Using a refresh token removes the need to interact
   with the resource owner again, or to store the original access grant
   used to obtain the access token and refresh token.


     +--------+          Access Grant &amp;      +---------------+
     |        |--(A)-- Client Credentials --&gt;| Authorization |
     |        |                              |     Server    |
     |        |&lt;-(B)---- Access Token -------|               |
     |        |         &amp; Refresh Token      +---------------+
     |        |
     |        |                              +---------------+
     |        |--(C)----- Access Token -----&gt;|               |
     |        |                              |               |
     |        |&lt;-(D)-- Protected Resource ---|    Resource   |
     | Client |                              |     Server    |
     |        |--(E)----- Access Token -----&gt;|               |
     |        |                              |               |
     |        |&lt;-(F)-- Invalid Token Error --|               |
     |        |                              +---------------+
     |        |
     |        |          Refresh Token &amp;     +---------------+
     |        |--(G)-- Client Credentials --&gt;| Authorization |
     |        |                              |     Server    |
     |        |&lt;-(H)----- Access Token ------|               |
     +--------+     &amp; Optional Refresh Token +---------------+


                   Figure 4: Refreshing an Access Token

   The refresh token flow illustrated in Figure 4 includes the following
   steps:

   (A)  The client requests an access token by authenticating with the
        authorization server using its client credentials, and
        presenting an access grant.





<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   (B)  The authorization server validates the client credentials and
        the access grant, and if valid issues an access token and a
        refresh token.

   (C)  The client makes a protected resource requests to the resource
        server by presenting the access token.

   (D)  The resource server validates the access token, and if valid,
        serves the request.

   (E)  Steps (C) and (D) repeat until the access token expires.  If the
        client does not know the access token expired, it makes another
        protected resource request.  Otherwise, it skips to step (G).

   (F)  Since the access token is invalid (expired), the resource server
        returns an invalid token error.

   (G)  The client requests a new access token by authenticating with
        the authorization server using its client credentials, and
        presenting the refresh token (as the access grant).

   (H)  The authorization server validates the client credentials and
        the refresh token, and if valid issues a new access token (and
        optionally, a new refresh token).

<span class="h4"><a class="selflink" name="section-1.4.5" href="#section-1.4.5">1.4.5</a>.  Assertion</span>

   Assertions provide a bridge between OAuth and other trust frameworks.
   They enable the client to utilize existing trust relationships in
   order to obtain an access token.  The access grant represented by an
   assertion depends on the assertion type, its content, and how it was
   issued, which are beyond the scope of this specification.

   Assertions are used as part of the protocol extensibility model,
   providing a way for authorization servers to support additional
   access grant types.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Client Profiles</span>

   [[ add intro and find new names for the profiles. this section will
   have normative language in future drafts, similar to -05 and earlier.
   ]]

<span class="h3"><a class="selflink" name="section-2.1" href="#section-2.1">2.1</a>.  Web Server</span>

   The web server profile is suitable for clients capable of interacting
   with the end-user's user-agent (typically a web browser) and capable



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   of receiving incoming requests (via redirection) from the
   authorization server (capable of acting as an HTTP server).


     +----------+          Client Identifier      +---------------+
     |         -+----(A)--- &amp; Redirect URI ------&gt;|               |
     | End-user |                                 | Authorization |
     |    at    |&lt;---(B)-- User authenticates ---&gt;|     Server    |
     | Browser  |                                 |               |
     |         -+----(C)-- Authorization Code ---&lt;|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (A)  (C)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |&gt;---(D)-- Client Credentials, --------'      |
     |  Server |          Authorization Code,                |
     |  -Based |            &amp; Redirect URI                   |
     |  Client |                                             |
     |         |&lt;---(E)----- Access Token -------------------'
     +---------+       (w/ Optional Refresh Token)


                         Figure 5: Web Server Flow

   The web server flow illustrated in Figure 5 includes the following
   steps:

   (A)  The web client initiates the flow by redirecting the end-user's
        user-agent to the end-user authorization endpoint as described
        in <a href="#section-4">Section 4</a>.  The client includes its client identifier,
        requested scope, local state, and a redirect URI to which the
        authorization server will send the end-user back once access is
        granted (or denied).

   (B)  The authorization server authenticates the end-user (via the
        user-agent) and establishes whether the end-user grants or
        denies the client's access request.

   (C)  Assuming the end-user granted access, the authorization server
        redirects the user-agent back to the client to the redirection
        URI provided earlier.  The authorization includes an
        authorization code for the client to use to obtain an access
        token.






<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   (D)  The client requests an access token from the authorization
        server by authenticating and including the authorization code
        received in the previous step as described in <a href="#section-5">Section 5</a>.

   (E)  The authorization server validates the client credentials and
        the authorization code and responds back with the access token.

<span class="h3"><a class="selflink" name="section-2.2" href="#section-2.2">2.2</a>.  User-Agent</span>

   The user-agent profile is suitable for client applications residing
   in a user-agent, typically implemented in a browser using a scripting
   language such as JavaScript.  These clients cannot keep client
   secrets confidential and the authentication of the client is based on
   the user-agent's same-origin policy.

   Unlike other profiles in which the client makes separate requests for
   end-user authorization and access token, the client receives the
   access token as a result of the end-user authorization request in the
   form of an HTTP redirection.  The client requests the authorization
   server to redirect the user-agent to another web server or local
   resource accessible to the user-agent which is capable of extracting
   the access token from the response and passing it to the client.

   This user-agent profile does not utilize the client secret since the
   client executables reside on the end-user's computer or device which
   makes the client secret accessible and exploitable.  Because the
   access token is encoded into the redirection URI, it may be exposed
   to the end-user and other applications residing on the computer or
   device.


          +----------+          Client Identifier     +----------------+
          |          |&gt;---(A)-- &amp; Redirection URI ---&gt;|                |
          |          |                                |                |
   End &lt;--+  -  -  - +----(B)-- User authenticates --&gt;|  Authorization |
   User   |          |                                |     Server     |
          |          |&lt;---(C)--- Redirect URI -------&lt;|                |
          |  Client  |         with Access Token      |                |
          |    in    |            in Fragment         +----------------+
          |  Browser |
          |          |                                +----------------+
          |          |&gt;---(D)--- Redirect URI -------&gt;|                |
          |          |         without Fragment       |   Web Server   |
          |          |                                |   with Client  |
          |    (F)   |&lt;---(E)--- Web Page with ------&lt;|    Resource    |
          |  Access  |              Script            |                |
          |   Token  |                                +----------------+
          +----------+



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


                         Figure 6: User-Agent Flow

   The user-agent flow illustrated in Figure 6 includes the following
   steps:

   (A)  The client sends the user-agent to the end-user authorization
        endpoint as described in <a href="#section-4">Section 4</a>.  The client includes its
        client identifier, requested scope, local state, and a redirect
        URI to which the authorization server will send the end-user
        back once authorization is granted (or denied).

   (B)  The authorization server authenticates the end-user (via the
        user-agent) and establishes whether the end-user grants or
        denies the client's access request.

   (C)  If the end-user granted access, the authorization server
        redirects the user-agent to the redirection URI provided
        earlier.  The redirection URI includes the access token in the
        URI fragment.

   (D)  The user-agent follows the redirection instructions by making a
        request to the web server which does not include the fragment.
        The user-agent retains the fragment information locally.

   (E)  The web server returns a web page (typically an HTML page with
        an embedded script) capable of accessing the full redirection
        URI including the fragment retained by the user-agent, and
        extracting the access token (and other parameters) contained in
        the fragment.

   (F)  The user-agent executes the script provided by the web server
        locally, which extracts the access token and passes it to the
        client.

<span class="h3"><a class="selflink" name="section-2.3" href="#section-2.3">2.3</a>.  Native Application</span>

   Native applications are clients running as native code on the end-
   user's computer or device (i.e. executing outside a user-agent or as
   a desktop program).  These clients are often capable of interacting
   with (or embedding) the end-user's user-agent but are limited in how
   such interaction affects their end-user experience.  In many cases,
   native applications are incapable of receiving direct callback
   requests from the server (e.g. firewall, operating system
   restrictions).

   Native application clients can be implemented in different ways based
   on their requirements and desired end-user experience.  Native
   application clients can:



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   o  Utilize the end-user authorization endpoint as described in
      <a href="#section-4">Section 4</a> by launching an external user-agent.  The client can
      capture the response by providing a redirection URI with a custom
      URI scheme (registered with the operating system to invoke the
      client application), or by providing a redirection URI pointing to
      a server-hosted resource under the client's control which makes
      the response available to the client (e.g. using the window title
      or other locations accessible from outside the user-agent).

   o  Utilize the end-user authorization endpoint as described in
      <a href="#section-4">Section 4</a> by using an embedded user-agent.  The client obtains the
      response by directly communicating with the embedded user-agent.

   o  Prompt end-users for their password and use them directly to
      obtain an access token.  This is generally discouraged, as it
      hands the end-user's password directly to the third-party client
      which in turn has to store it in clear-text.  It also requires the
      server to support password-based authentication.

   When choosing between launching an external browser and an embedded
   user-agent, developers should consider the following:

   o  External user-agents may improve completion rate as the end-user
      may already be logged-in and not have to re-authenticate.

   o  Embedded user-agents often offer a better end-user flow, as they
      remove the need to switch context and open new windows.

   o  Embedded user-agents pose a security challenge because users are
      authenticating in an unidentified window without access to the
      visual protections offered by many user-agents.

<span class="h3"><a class="selflink" name="section-2.4" href="#section-2.4">2.4</a>.  Autonomous</span>

   Autonomous clients utilize an existing trust relationship or
   framework to establish authorization.  Autonomous clients can be
   implemented in different ways based on their requirements and the
   existing trust framework they rely upon.  Autonomous clients can:

   o  Obtain an access token by authenticating with the authorization
      server using their client credentials.  The scope of the access
      token is limited to the protected resources under the control of
      the client, or that of another resource owner previously arranged
      with the authorization server.

   o  Use an existing access grant expressed as an assertion using an
      assertion format supported by the authorization server.  Using
      assertions requires the client to obtain an assertion (such as a



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


      SAML [<a href="#ref-OASIS.saml-core-2.0-os">OASIS.saml-core-2.0-os</a>] assertion) from an assertion issuer
      or to self-issue an assertion.  The assertion format, the process
      by which the assertion is obtained, and the method of validating
      the assertion are defined by the assertion issuer and the
      authorization server, and are beyond the scope of this
      specification.


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Client Credentials</span>

   When interacting with the authorization server, the client identifies
   itself using a set of client credentials which include a client
   identifier and other properties for client authentication.  The means
   through which the client obtains its credentials are beyond the scope
   of this specification, but typically involve registration with the
   authorization server.

   Due to the nature of some clients, authorization servers SHOULD NOT
   make assumptions about the confidentiality of client secrets without
   establishing trust with the client.  Authorization servers SHOULD NOT
   issue client secrets to clients incapable of keeping their secrets
   confidential.

   The authorization server MAY authenticate the client using any
   appropriate set of credentials and authentication schemes.  The
   client MUST NOT include more than one set of credentials or
   authentication mechanism with each request.

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  Client Password Credentials</span>

   The client password credentials use a shared symmetric secret to
   authenticate the client.  The client identifier and password are
   included in the request using the HTTP Basic authentication scheme as
   defined in [<a href="./rfc2617">RFC2617</a>] by including the client identifier as the
   username and client password as the password.

   For example (line breaks are for display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded

     grant_type=authorization_code&amp;code=i1WsRn1uB1&amp;
     redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb





<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   Alternatively, the client MAY include the password in the request
   body using the following parameters:

   client_id
         REQUIRED.  The client identifier.

   client_secret  REQUIRED.  The client password.

   For example (line breaks are for display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     grant_type=authorization_code&amp;client_id=s6BhdRkqt3&amp;
     client_secret=gX1fBat3bV&amp;code=i1WsRn1uB1&amp;
     redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb


   The authorization server MUST accept the client credentials using
   both the request parameter, and the HTTP Basic authentication scheme.
   The authorization server MAY support additional authentication
   schemes suitable for the transmission of password credentials.

<span class="h3"><a class="selflink" name="section-3.2" href="#section-3.2">3.2</a>.  Client Assertion Credentials</span>

   The client assertion credentials are used in cases where a password
   (clear-text shared symmetric secret) is unsuitable or does not
   provide sufficient security for client authentication.  In such cases
   it is common to use other mechanisms such as HMAC or digital
   signatures that do not require sending clear-text secrets.  The
   client assertion credentials provide an extensible mechanism to use
   an assertion format supported by the authorization server for
   authentication the client.

   Using assertions requires the client to obtain an assertion (such as
   a SAML [<a href="#ref-OASIS.saml-core-2.0-os">OASIS.saml-core-2.0-os</a>] assertion) from an assertion issuer
   or to self-issue an assertion.  The assertion format, the process by
   which the assertion is obtained, and the method of validating the
   assertion are defined by the assertion issuer and the authorization
   server, and are beyond the scope of this specification.

   When using a client assertion, the client includes the following
   parameters:






<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   client_assertion_type  REQUIRED.  The format of the assertion as
         defined by the authorization server.  The value MUST be an
         absolute URI.

   client_assertion  REQUIRED.  The client assertion.

   For example, the client sends the following access token request
   using a SAML 2.0 assertion to authenticate itself (line breaks are
   for display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     grant_type=authorization_code&amp;code=i1WsRn1uB1&amp;
     client_assertion=PHNhbWxwOl[...omitted for brevity...]ZT4%3D&amp;
     client_assertion_type=
     urn%3Aoasis%3Anames%sAtc%3ASAML%3A2.0%3Aassertion&amp;
     redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb


   When obtaining an access token using a client assertion together with
   an authorization code (as described in <a href="#section-5.1.1">Section 5.1.1</a>), a mechanism is
   needed to map between the value of "client_id" parameter used to
   obtain the authorization code, and the client assertion.  Such
   mechanism is beyond the out of scope for this specification, but MUST
   be specified for any client assertion type used in combination with
   an authorization code.

   The authorization server MUST reject access token requests using
   client assertion credentials that do not contain HMAC or signed
   values that:

   o  State the assertion was specifically issued to be consumed by the
      receiving endpoint (typically via an audience or recipient value
      containing the receiving endpoint's identifier).

   o  Identify the entity that issued the assertion (typically via an
      issuer value).

   o  Identify when the assertion expires as an absolute time (typically
      via an expiration value containing a UTC date/time value).  The
      authorization server MUST reject expired assertions.







<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Obtaining End-User Authorization</span>

   Before the client can access a protect resource, it MUST first obtain
   authorization from the end-user.  To obtain an end-user
   authorization, the client sends the end-user to the end-user
   authorization endpoint.  Once obtained, the end-user access grant is
   expressed as an authorization code which the client uses to obtain an
   access token.

   At the end-user authorization endpoint, the end-user first
   authenticates with the authorization server, and then grants or
   denies the access request.  The way in which the authorization server
   authenticates the end-user (e.g. username and password login, OpenID,
   session cookies) and in which the authorization server obtains the
   end-user's authorization, including whether it uses a secure channel
   such as TLS, is beyond the scope of this specification.  However, the
   authorization server MUST first verify the identity of the end-user.

   The location of the end-user authorization endpoint can be found in
   the service documentation.  The end-user authorization endpoint URI
   MAY include a query component as defined by <a href="./rfc3986#section-3">[RFC3986] section&nbsp;3</a>,
   which must be retained when adding additional query parameters.

   Since requests to the end-user authorization endpoint result in user
   authentication and the transmission of sensitive information, the
   authorization server SHOULD require the use of a transport-layer
   security mechanism such as TLS when sending requests to the end-user
   authorization endpoint.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Authorization Request</span>

   In order to direct the end-user's user-agent to the authorization
   server, the client constructs the request URI by adding the following
   parameters to the end-user authorization endpoint URI query component
   using the "application/x-www-form-urlencoded" format as defined by
   [<a href="#ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>]:

   response_type
         REQUIRED.  The requested response: an access token, an
         authorization code, or both.  The parameter value MUST be set
         to "token" for requesting an access token, "code" for
         requesting an authorization code, or "code_and_token" to
         request both.  The authorization server MAY decline to provide
         one or more of these response types.







<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   client_id
         REQUIRED.  The client identifier as described in <a href="#section-3">Section 3</a>.

   redirect_uri
         REQUIRED, unless a redirection URI has been established between
         the client and authorization server via other means.  An
         absolute URI to which the authorization server will redirect
         the user-agent to when the end-user authorization step is
         completed.  The authorization server SHOULD require the client
         to pre-register their redirection URI.

   scope
         OPTIONAL.  The scope of the access request expressed as a list
         of space-delimited strings.  The value of the "scope" parameter
         is defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.

   state
         OPTIONAL.  An opaque value used by the client to maintain state
         between the request and callback.  The authorization server
         includes this value when redirecting the user-agent back to the
         client.

   The client directs the end-user to the constructed URI using an HTTP
   redirection response, or by other means available to it via the end-
   user's user-agent.  The authorization server MUST support the use of
   the HTTP "GET" method for the end-user authorization endpoint, and
   MAY support the use of the "POST" method as well.

   For example, the client directs the end-user's user-agent to make the
   following HTTP request using transport-layer security (line breaks
   are for display purposes only):


     GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;
         redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
     Host: server.example.com


   If the client has previously registered a redirection URI with the
   authorization server, the authorization server MUST verify that the
   redirection URI received matches the registered URI associated with
   the client identifier.  The authorization server SHOULD NOT redirect
   the user-agent to unregistered or untrusted URIs to prevent the
   endpoint from being used as an open redirector.  If no valid
   redirection URI is available, the authorization server SHOULD inform



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   the end-user of the error occured. [[ provide guidance on how to
   perform matching ]]

   Parameters sent without a value MUST be treated as if they were
   omitted from the request.  The authorization server SHOULD ignore
   unrecognized request parameters.

   The authorization server validates the request to ensure all required
   parameters are present and valid.  If the request is invalid, the
   authorization server redirects the user-agent back to the client
   using the redirection URI provided with the appropriate error code as
   described in <a href="#section-4.3">Section 4.3</a>.

   The authorization server authenticates the end-user and obtains an
   authorization decision (by asking the end-user or by establishing
   approval via other means).  When a decision has been established, the
   authorization server directs the end-user's user-agent to the
   provided client redirection URI using an HTTP redirection response,
   or by other means available to it via the end-user's user-agent.

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Authorization Response</span>

   If the end-user grants the access request, the authorization server
   issues an access token, an authorization code, or both, and delivers
   them to the client by adding the following parameters to the
   redirection URI (as described below):

   code
         REQUIRED if the response type is "code" or "code_and_token",
         otherwise MUST NOT be included.  The authorization code
         generated by the authorization server.  The authorization code
         SHOULD expire shortly after it is issued to minimize the risk
         of leaks.  The client MUST NOT reuse the authorization code.
         If an authorization code is used more than once, the
         authorization server MAY revoke all tokens previously issued
         based on that authorization code.  The authorization code is
         bound to the client identifier and redirection URI.

   access_token
         REQUIRED if the response type is "token" or "code_and_token",
         otherwise MUST NOT be included.  The access token issued by the
         authorization server.

   token_type
         REQUIRED if the response includes an access token.  The type of
         the token issued.  The token type informs the client how the
         access token is to be used when accessing a protected resource
         as described in <a href="#section-6.1">Section 6.1</a>.



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 22]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-23" id="page-23" href="#page-23" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   expires_in
         OPTIONAL.  The duration in seconds of the access token lifetime
         if an access token is included.  For example, the value "3600"
         denotes that the access token will expire in one hour from the
         time the response was generated by the authorization server.

   scope
         OPTIONAL.  The scope of the access token as a list of space-
         delimited strings if an access token is included.  The value of
         the "scope" parameter is defined by the authorization server.
         If the value contains multiple space-delimited strings, their
         order does not matter, and each string adds an additional
         access range to the requested scope.  The authorization server
         SHOULD include the parameter if the requested scope is
         different from the one requested by the client.

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set to the exact value received from
         the client.

   The method in which the authorization server adds the parameter to
   the redirection URI is determined by the response type requested by
   the client in the authorization request using the "response_type"
   parameter.

   If the response type is "code", the authorization server adds the
   parameters to the redirection URI query component using the
   "application/x-www-form-urlencoded" format as defined by
   [<a href="#ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>].

   For example, the authorization server redirects the end-user's user-
   agent by sending the following HTTP response:


     HTTP/1.1 302 Found
     Location: https://client.example.com/cb?code=i1WsRn1uB1


   If the response type is "token" or "code_and_token", the
   authorization server adds the parameters to the redirection URI
   fragment component using the "application/x-www-form-urlencoded"
   format as defined by [<a href="#ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>].








<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 23]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-24" id="page-24" href="#page-24" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   For example, the authorization server redirects the end-user's user-
   agent by sending the following HTTP response (URI line breaks are for
   display purposes only):


     HTTP/1.1 302 Found
     Location: http://example.com/rd#access_token=FJQbwq9&amp;
               token_type=example&amp;expires_in=3600


   Clients SHOULD ignore unrecognized response parameters.  The sizes of
   tokens and other values received from the authorization server, are
   left undefined by this specification.  Clients should avoid making
   assumptions about value sizes.  Servers should document the expected
   size of any value they issue.

<span class="h3"><a class="selflink" name="section-4.3" href="#section-4.3">4.3</a>.  Error Response</span>

   If the end-user denies the access request or if the request fails for
   reasons other than a missing or invalid redirection URI, the
   authorization server informs the client by adding the following
   parameters to the redirection URI query component using the
   "application/x-www-form-urlencoded" format as defined by
   [<a href="#ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>]:

   error
         REQUIRED.  A single error code as described in <a href="#section-4.3.1">Section 4.3.1</a>.

   error_description  OPTIONAL.  A human-readable text providing
         additional information, used to assist in the understanding and
         resolution of the error occurred.

   error_uri  OPTIONAL.  A URI identifying a human-readable web page
         with information about the error, used to provide the end-user
         with additional information about the error.

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set to the exact value received from
         the client.

   For example, the authorization server redirects the end-user's user-
   agent by sending the following HTTP response:


     HTTP/1.1 302 Found
     Location: https://client.example.com/cb?error=access_denied




<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 24]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-25" id="page-25" href="#page-25" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   If the request fails due to a missing or invalid redirection URI, the
   authorization server SHOULD inform the end-user of the error, and
   MUST NOT redirect the end-user's user-agent to the invalid
   redirection URI.

<span class="h4"><a class="selflink" name="section-4.3.1" href="#section-4.3.1">4.3.1</a>.  Error Codes</span>

   The authorization server includes one of the following error codes
   with the error response:

   invalid_request
         The request is missing a required parameter, includes an
         unsupported parameter or parameter value, or is otherwise
         malformed.

   invalid_client
         The client identifier provided is invalid.

   unauthorized_client
         The client is not authorized to use the requested response
         type.

   redirect_uri_mismatch
         The redirection URI provided does not match a pre-registered
         value.

   access_denied
         The end-user or authorization server denied the request.

   unsupported_response_type
         The requested response type is not supported by the
         authorization server.

   invalid_scope
         The requested scope is invalid, unknown, or malformed.

   [[ Add mechanism for extending error codes ]]


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Obtaining an Access Token</span>

   The client obtains an access token by authenticating with the
   authorization server and presenting its access grant (in the form of
   an authorization code, resource owner credentials, an assertion, or a
   refresh token).

   Since requests to the token endpoint result in the transmission of
   clear-text credentials in the HTTP request and response, the



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 25]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-26" id="page-26" href="#page-26" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   authorization server MUST require the use of a transport-layer
   security mechanism when sending requests to the token endpoints.
   Servers MUST support TLS 1.2 as defined in [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>], and MAY support
   additional transport-layer security mechanisms.

   The client requests an access token by making an HTTP "POST" request
   to the token endpoint.  The location of the token endpoint can be
   found in the service documentation.  The token endpoint URI MAY
   include a query component.

   The client authenticates with the authorization server by adding its
   client credentials to the request as described in <a href="#section-3">Section 3</a>.  The
   authorization server MAY allow unauthenticated access token requests
   when the client identity does not matter (e.g. anonymous client) or
   when the client identity is established via other means (e.g. using
   an assertion access grant).

   The client constructs the request by including the following
   parameters using the "application/x-www-form-urlencoded" format in
   the HTTP request entity-body:

   grant_type
         REQUIRED.  The access grant type included in the request.
         Value MUST be one of "authorization_code", "password",
         "refresh_token", "client_credentials", or an absolute URI
         identifying an assertion format supported by the authorization
         server.

   scope
         OPTIONAL.  The scope of the access request expressed as a list
         of space-delimited strings.  The value of the "scope" parameter
         is defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.  If the access grant being used already
         represents an approved scope (e.g. authorization code,
         assertion), the requested scope MUST be equal or lesser than
         the scope previously granted, and if omitted is treated as
         equal to the previously approved scope.

   In addition, the client MUST include the appropriate parameters
   listed for the selected access grant type as described in
   <a href="#section-5.1">Section 5.1</a>.

   Parameters sent without a value MUST be treated as if they were
   omitted from the request.  The authorization server SHOULD ignore
   unrecognized request parameters.




<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 26]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-27" id="page-27" href="#page-27" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  Access Grant Types</span>

   The client requests an access token using an authorization code,
   resource owner password credentials, client credentials, refresh
   token, or assertion.

<span class="h4"><a class="selflink" name="section-5.1.1" href="#section-5.1.1">5.1.1</a>.  Authorization Code</span>

   The client includes the authorization code using the
   "authorization_code" access grant type and the following parameters:

   code
         REQUIRED.  The authorization code received from the
         authorization server.

   redirect_uri
         REQUIRED.  The redirection URI used in the initial request.

   For example, the client makes the following HTTP request by including
   its client credentials via the "client_secret" parameter described in
   <a href="#section-3">Section 3</a> and using transport-layer security (line breaks are for
   display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     grant_type=authorization_code&amp;client_id=s6BhdRkqt3&amp;
     client_secret=gX1fBat3bV&amp;code=i1WsRn1uB1&amp;
     redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb


   The authorization server MUST:

   o  Validate the client credentials (if present) and ensure they match
      the authorization code.

   o  Verify that the authorization code and redirection URI are all
      valid and match its stored association.

   If the request is valid, the authorization server issues a successful
   response as described in <a href="#section-5.2">Section 5.2</a>.

<span class="h4"><a class="selflink" name="section-5.1.2" href="#section-5.1.2">5.1.2</a>.  Resource Owner Password Credentials</span>

   The client includes the resource owner credentials using the
   "password" access grant type and the following parameters: [[ add



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 27]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-28" id="page-28" href="#page-28" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   internationalization consideration for username and password ]]

   username
         REQUIRED.  The resource owner's username.

   password
         REQUIRED.  The resource owner's password.

   For example, the client makes the following HTTP request by including
   its client credentials via the "client_secret" parameter described in
   <a href="#section-3">Section 3</a> and using transport-layer security (line breaks are for
   display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     grant_type=password&amp;client_id=s6BhdRkqt3&amp;
     client_secret=47HDu8s&amp;username=johndoe&amp;password=A3ddj3w


   The authorization server MUST validate the client credentials (if
   present) and end-user credentials and if valid issue an access token
   response as described in <a href="#section-5.2">Section 5.2</a>.

<span class="h4"><a class="selflink" name="section-5.1.3" href="#section-5.1.3">5.1.3</a>.  Client Credentials</span>

   The client can request an access token using only its client
   credentials using the "client_credentials" access grant type.  When
   omitting an explicit access grant, the client is requesting access to
   the protected resources under its control, or those of another
   resource owner which has been previously arranged with the
   authorization server (the method of which is beyond the scope of this
   specification).

<span class="h4"><a class="selflink" name="section-5.1.4" href="#section-5.1.4">5.1.4</a>.  Refresh Token</span>

   The client includes the refresh token using the "refresh_token"
   access grant type and the following parameter:

   refresh_token
         REQUIRED.  The refresh token associated with the access token
         to be refreshed.







<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 28]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-29" id="page-29" href="#page-29" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   For example, the client makes the following HTTP request by including
   its client credentials via the "client_secret" parameter described in
   <a href="#section-3">Section 3</a> and using transport-layer security (line breaks are for
   display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     grant_type=refresh_token&amp;client_id=s6BhdRkqt3&amp;
     client_secret=8eSEIpnqmM&amp;refresh_token=n4E9O119d


   The authorization server MUST verify the client credentials (if
   present), the validity of the refresh token, and that the resource
   owner's authorization is still valid.  If the request is valid, the
   authorization server issues an access token response as described in
   <a href="#section-5.2">Section 5.2</a>.  The authorization server MAY issue a new refresh token,
   in which case, the client MUST discard the old refresh token and
   replace it with the new refresh token.

<span class="h4"><a class="selflink" name="section-5.1.5" href="#section-5.1.5">5.1.5</a>.  Assertion</span>

   The client includes an assertion by specifying the assertion format
   using an absolute URI (as defined by the authorization server) as the
   value of the "grant_type" parameter and by adding the following
   parameter:

   assertion
         REQUIRED.  The assertion.

   For example, the client makes the following HTTP request using
   transport-layer security, and client authentication is achieved via
   the assertion (line breaks are for display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     grant_type=urn%3Aoasis%3Anames%3Atc%3ASAML%3A2.0%3Aassertion&amp;
     assertion=PHNhbWxwOl[...omitted for brevity...]ZT4%3D


   The authorization server MUST validate the client credentials (if
   present) and the assertion and if valid issues an access token
   response as described in <a href="#section-5.2">Section 5.2</a>.  The authorization server



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 29]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-30" id="page-30" href="#page-30" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   SHOULD NOT issue a refresh token (instead, it should require the
   client to use the same or new assertion).

   Authorization servers SHOULD issue access tokens with a limited
   lifetime and require clients to refresh them by requesting a new
   access token using the same assertion if it is still valid.
   Otherwise the client MUST obtain a new valid assertion.

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  Access Token Response</span>

   After receiving and verifying a valid and authorized access token
   request from the client, the authorization server issues the access
   token and optional refresh token, and constructs the response by
   adding the following parameters to the entity body of the HTTP
   response with a 200 (OK) status code:

   The token response contains the following parameters:

   access_token
         REQUIRED.  The access token issued by the authorization server.

   token_type
         REQUIRED.  The type of the token issued.  The token type
         informs the client how the access token is to be used when
         accessing a protected resource as described in <a href="#section-6.1">Section 6.1</a>.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.  For example, the value "3600" denotes that the
         access token will expire in one hour from the time the response
         was generated by the authorization server.

   refresh_token
         OPTIONAL.  The refresh token used to obtain new access tokens
         using the same end-user access grant as described in
         <a href="#section-5.1.4">Section 5.1.4</a>.  The authorization server SHOULD NOT issue a
         refresh token when the access grant type is an assertion or a
         set of client credentials.

   scope
         OPTIONAL.  The scope of the access token as a list of space-
         delimited strings.  The value of the "scope" parameter is
         defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.  The authorization server SHOULD include the
         parameter if the requested scope is different from the one
         requested by the client.



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 30]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-31" id="page-31" href="#page-31" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   The parameters are including in the entity body of the HTTP response
   using the "application/json" media type as defined by [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>].  The
   parameters are serialized into a JSON structure by adding each
   parameter at the highest structure level.  Parameter names and string
   values are included as JSON strings.  Numerical values are included
   as JSON numbers.

   The authorization server MUST include the HTTP "Cache-Control"
   response header field with a value of "no-store" in any response
   containing tokens, secrets, or other sensitive information.

   For example:


     HTTP/1.1 200 OK
     Content-Type: application/json
     Cache-Control: no-store

     {
       "access_token":"SlAV32hkKG",
       "token_type":"example",
       "expires_in":3600,
       "refresh_token":"8xLOxBtZp8"
     }


   Clients SHOULD ignore unrecognized response parameters.  The sizes of
   tokens and other values received from the authorization server, are
   left undefined by this specification.  Clients should avoid making
   assumptions about value sizes.  Servers should document the expected
   size of any value they issue.

<span class="h3"><a class="selflink" name="section-5.3" href="#section-5.3">5.3</a>.  Error Response</span>

   If the token request is invalid or unauthorized, the authorization
   server constructs the response by adding the following parameter to
   the entity body of the HTTP response using the "application/json"
   media type:

   error
         REQUIRED.  A single error code as described in <a href="#section-5.3.1">Section 5.3.1</a>.

   error_description  OPTIONAL.  A human-readable text providing
         additional information, used to assist in the understanding and
         resolution of the error occurred.






<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 31]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-32" id="page-32" href="#page-32" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   error_uri  OPTIONAL.  A URI identifying a human-readable web page
         with information about the error, used to provide the end-user
         with additional information about the error.

   For example:


     HTTP/1.1 400 Bad Request
     Content-Type: application/json
     Cache-Control: no-store

     {
       "error":"invalid_request"
     }


   If the client provided invalid credentials using an HTTP
   authentication scheme via the "Authorization" request header field,
   the authorization server MUST respond with the HTTP 401
   (Unauthorized) status code.  Otherwise, the authorization server
   SHALL respond with the HTTP 400 (Bad Request) status code.

<span class="h4"><a class="selflink" name="section-5.3.1" href="#section-5.3.1">5.3.1</a>.  Error Codes</span>

   The authorization server includes one of the following error codes
   with the error response:

   invalid_request
         The request is missing a required parameter, includes an
         unsupported parameter or parameter value, repeats a parameter,
         includes multiple credentials, utilizes more than one mechanism
         for authenticating the client, or is otherwise malformed.

   invalid_client
         The client identifier provided is invalid, the client failed to
         authenticate, the client did not include its credentials,
         provided multiple client credentials, or used unsupported
         credentials type.

   unauthorized_client
         The authenticated client is not authorized to use the access
         grant type provided.

   invalid_grant
         The provided access grant is invalid, expired, or revoked (e.g.
         invalid assertion, expired authorization token, bad end-user
         password credentials, or mismatching authorization code and
         redirection URI).



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 32]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-33" id="page-33" href="#page-33" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   unsupported_grant_type
         The access grant included - its type or another attribute - is
         not supported by the authorization server.

   invalid_scope
         The requested scope is invalid, unknown, malformed, or exceeds
         the previously granted scope.

   [[ Add mechanism for extending error codes ]]


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Accessing a Protected Resource</span>

   Clients access protected resources by presenting an access token to
   the resource server.  The resource server MUST validate the access
   token and ensure it has not expired and that its scope covers the
   requested resource.  The methods used by the resource server to
   validate the access token are beyond the scope of this specification,
   but generally involve an interaction or coordination between the
   resource server and authorization server.

   The method in which the client utilized the access token to
   authenticate with the resource server depends on the type of access
   token issued by the authorization server.

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  Access Token Types</span>

   [[ add token type explanation, maybe with links to other token specs
   ]]

<span class="h3"><a class="selflink" name="section-6.2" href="#section-6.2">6.2</a>.  The WWW-Authenticate Response Header Field</span>

   If the protected resource request does not include authentication
   credentials, contains an invalid access token, or is malformed, the
   resource server MUST include the HTTP "WWW-Authenticate" response
   header field.  The "WWW-Authenticate" header field uses the framework
   defined by [<a href="./rfc2617">RFC2617</a>] as follows:














<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 33]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-34" id="page-34" href="#page-34" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


     challenge       = "OAuth2" [ RWS 1#param ]

     param           = scope /
                       error / error-desc / error-uri /
                       ( token "=" ( token / quoted-string ) )

     scope           = "scope" "=" &lt;"&gt; scope-v *( SP scope-v ) &lt;"&gt;
     scope-v         = 1*quoted-char

     quoted-char     = ALPHA / DIGIT /
                       "!" / "#" / "$" / "%" / "&amp;" / "'" / "(" / ")" /
                       "*" / "+" / "-" / "." / "/" / ":" / "&lt;" / "=" /
                       "&gt;" / "?" / "@" / "[" / "]" / "^" / "_" / "`" /
                       "{" / "|" / "}" / "~" / "\" / "," / ";"

     error           = "error" "=" quoted-string
     error-desc      = "error_description" "=" quoted-string
     error-uri       = "error_uri" = &lt;"&gt; URI-reference &lt;"&gt;


   The "scope" attribute is a space-delimited list of scope values
   indicating the required scope of the access token for accessing the
   requested resource.  The "scope" attribute MUST NOT appear more than
   once.

   If the protected resource request included an access token and failed
   authentication, the resource server SHOULD include the "error"
   attribute to provide the client with the reason why the access
   request was declined.  The parameter value is described in
   <a href="#section-6.2.1">Section 6.2.1</a>.  In addition, the resource server MAY include the
   "error_description" attribute to provide a human-readable
   explanation, and the "error-uri" attribute with an absolute URI
   identifying a human-readable web page explaining the error.  The
   "error", "error_description", and "error_uri" attribute MUST NOT
   appear more than once.

   For example, in response to a protected resource request without
   authentication:


     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: OAuth2









<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 34]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-35" id="page-35" href="#page-35" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   And in response to a protected resource request with an
   authentication attempt using an expired access token:


     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: OAuth2
                       error="invalid_token",
                       error_description="The access token expired"


<span class="h4"><a class="selflink" name="section-6.2.1" href="#section-6.2.1">6.2.1</a>.  Error Codes</span>

   When a request fails, the resource server responds using the
   appropriate HTTP status code (typically, 400, 401, or 403), and
   includes one of the following error codes in the response:

   invalid_request
         The request is missing a required parameter, includes an
         unsupported parameter or parameter value, repeats the same
         parameter, uses more than one method for including an access
         token, or is otherwise malformed.  The resource server SHOULD
         respond with the HTTP 400 (Bad Request) status code.

   invalid_token
         The access token provided is expired, revoked, malformed, or
         invalid for other reasons.  The resource SHOULD respond with
         the HTTP 401 (Unauthorized) status code.  The client MAY
         request a new access token and retry the protected resource
         request.

   insufficient_scope
         The request requires higher privileges than provided by the
         access token.  The resource server SHOULD respond with the HTTP
         403 (Forbidden) status code and MAY include the "scope"
         attribute with the scope necessary to access the protected
         resource.

   [[ Add mechanism for extending error codes ]]

   If the request lacks any authentication information (i.e. the client
   was unaware authentication is necessary or attempted using an
   unsupported authentication method), the resource server SHOULD not
   include an error code or other error information.

   For example:


     HTTP/1.1 401 Unauthorized



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 35]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-36" id="page-36" href="#page-36" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


     WWW-Authenticate: OAuth2



<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Extensibility</span>

<span class="h3"><a class="selflink" name="section-7.1" href="#section-7.1">7.1</a>.  Defining New Client Credentials Types</span>

   [[ TBD ]]

<span class="h3"><a class="selflink" name="section-7.2" href="#section-7.2">7.2</a>.  Defining New Endpoint Parameters</span>

   Applications that wish to define new request or response parameters
   for use with the end-user authorization endpoint or the token
   endpoint SHALL do so in one of two ways: register them in the
   parameters registry (following the procedures in <a href="#section-9.1">Section 9.1</a>), or use
   the "x_" parameter name prefix.

   Parameters utilizing the "x_" parameter name prefix MUST be limited
   to vendor-specific extensions that are not commonly applicable, and
   are specific to the implementation details of the authorization
   server where they are used.  All other new parameters MUST be
   registered, and MUST NOT use the "x_" parameter name prefix.

   Parameter names MUST conform to the param-name ABNF, and parameter
   values syntax MUST be well-defined (e.g., using ABNF, or a reference
   to the syntax of an existing parameter).


     param-name  = 1*name-char
     name-char   = "-" / "." / "_" / DIGIT / ALPHA


<span class="h3"><a class="selflink" name="section-7.3" href="#section-7.3">7.3</a>.  Defining New Header Field Parameters</span>

   Applications that wish to define new parameters for use in the OAuth
   "WWW-Authenticate" header field MUST register them in the parameters
   registry, following the procedures in <a href="#section-9.1">Section 9.1</a>.

   Parameter names MUST conform to the param-name ABNF and MUST NOT
   begin with "x_".  Parameter values MUST conform to the param-value
   ABNF and their syntax MUST be well-defined (e.g., using ABNF, or a
   reference to the syntax of an existing parameter).


     param-value  = quoted-value | quoted-string





<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 36]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-37" id="page-37" href="#page-37" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


<span class="h3"><a class="selflink" name="section-7.4" href="#section-7.4">7.4</a>.  Defining New Access Grant Types</span>

   The assertion access grant type allows the authorization server to
   accept additional access grants not specified.  Applications that
   wish to define additional access grant types can do so by utilizing a
   new or existing assertion type and format.


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  Security Considerations</span>

   [[ TBD ]]


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  IANA Considerations</span>

<span class="h3"><a class="selflink" name="section-9.1" href="#section-9.1">9.1</a>.  The OAuth Parameters Registry</span>

   This document establishes the OAuth parameters registry.

   Additional parameters to be use in the end-user authorization
   endpoint request, the end-user authorization endpoint response, the
   token endpoint request, the token endpoint response, or the
   "WWW-Authenticate" header field, are registered on the advice of one
   or more Designated Experts (appointed by the IESG or their delegate),
   with a Specification Required (using terminology from [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>]).
   However, to allow for the allocation of values prior to publication,
   the Designated Expert(s) may approve registration once they are
   satisfied that such a specification will be published.

   Registration requests should be sent to the [TBD]@ietf.org mailing
   list for review and comment, with an appropriate subject (e.g.,
   "Request for parameter: example"). [[ Note to RFC-EDITOR: The name of
   the mailing list should be determined in consultation with the IESG
   and IANA.  Suggested name: oauth-ext-review. ]]

   Before a period of 14 days has passed, the Designated Expert(s) will
   either approve or deny the registration request, communicating this
   decision both to the review list and to IANA.  Denials should include
   an explanation and, if applicable, suggestions as to how to make the
   request successful.  Registration requests that are undetermined for
   a period longer than 21 days can be brought to the IESG's attention
   (using the iesg@iesg.org mailing list) for resolution.

<span class="h4"><a class="selflink" name="section-9.1.1" href="#section-9.1.1">9.1.1</a>.  Registration Template</span>







<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 37]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-38" id="page-38" href="#page-38" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   Parameter name:  The name requested (e.g., "example").

   Parameter usage location:  The location(s) where parameter can be
      used.  The possible locations are: the end-user authorization
      endpoint request, the end-user authorization endpoint response,
      the token endpoint request, the token endpoint response, the or
      the "WWW-Authenticate" header field.

   Change controller:  For standards-track RFCs, state "IETF".  For
      others, give the name of the responsible party.  Other details
      (e.g., postal address, e-mail address, home page URI) may also be
      included.

   Specification document(s):  Reference to document that specifies the
      parameter, preferably including a URI that can be used to retrieve
      a copy of the document.  An indication of the relevant sections
      may also be included, but is not required.

   Related information:  Optionally, citations to additional documents
      containing further relevant information.

<span class="h4"><a class="selflink" name="section-9.1.2" href="#section-9.1.2">9.1.2</a>.  Example</span>

   The following is the parameter registration request for the "scope"
   parameter as defined in this specification:

   Parameter name:  scope

   Parameter usage location:  The end-user authorization endpoint
      request, the end-user authorization endpoint response, the token
      endpoint request, the token endpoint response, and the
      "WWW-Authenticate" header field.

   Change controller:  IETF

   Specification document(s):  [[ this document ]]

   Related information:  None


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Examples</span>

   [[ TBD ]]


<span class="h2"><a class="selflink" name="appendix-B" href="#appendix-B">Appendix B</a>.  Contributors</span>

   The following people contributed to preliminary versions of this



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 38]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-39" id="page-39" href="#page-39" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   document: Blaine Cook (BT), Brian Eaton (Google), Yaron Goland
   (Microsoft), Brent Goldman (Facebook), Raffi Krikorian (Twitter),
   Luke Shepard (Facebook), and Allen Tom (Yahoo!).  The content and
   concepts within are a product of the OAuth community, WRAP community,
   and the OAuth Working Group.

   The OAuth Working Group has dozens of very active contributors who
   proposed ideas and wording for this document, including: [[ If your
   name is missing or you think someone should be added here, please
   send Eran a note - don't be shy ]]

   Michael Adams, Andrew Arnott, Dirk Balfanz, Brian Campbell, Leah
   Culver, Bill de hOra, Brian Ellin, Igor Faynberg, George Fletcher,
   Tim Freeman, Evan Gilbert, Kristoffer Gronowski, Justin Hart, Mike
   Jones, John Kemp, Chasen Le Hara, Torsten Lodderstedt, Alastair Mair,
   Eve Maler, James Manger, Laurence Miao, Chuck Mortimore, Justin
   Richer, Peter Saint-Andre, Nat Sakimura, Rob Sayre, Marius Scurtescu,
   Naitik Shah, Justin Smith, Jeremy Suriel, Christian Stuebner, Paul
   Tarjan, Franklin Tse, and Nick Walker.


<span class="h2"><a class="selflink" name="appendix-C" href="#appendix-C">Appendix C</a>.  Acknowledgements</span>

   [[ Add OAuth 1.0a authors + WG contributors ]]


<span class="h2"><a class="selflink" name="appendix-D" href="#appendix-D">Appendix D</a>.  Document History</span>

   [[ to be removed by RFC editor before publication as an RFC ]]

   -11

   o  Many editorial changes.  Fixed user authorization section
      structure.  Removed unused normative references.  Adjusted
      language regarding single use of authorization codes.

   o  Fixed header ABNF.

   o  Change access token description from shared symmetric secret to
      password.

   o  Moved access grant 'none' to a separate section, renamed to
      'client_credentials'.

   o  Demoted the HTTP status code requirement from MUST to SHOULD in
      protected resource response error.





<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 39]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-40" id="page-40" href="#page-40" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   o  Removed 'expired_token' error code.

   o  Moved all the 'code_and_token' parameter to the fragment (from
      code being in the query).

   o  Removed 'assertion_type' parameter (moved to 'grant_type').

   o  Added note about redirecting to invalid redirection URIs (open
      redirectors).

   o  Removed bearer token section, added new required 'token_type'
      parameter with extensibility.

   o  'error-uri' parameter value changed to absolute URI.

   o  OAuth 2.0 HTTP authentication scheme name changed to 'OAuth2'.

   o  Dropped the 'WWW-Authenticate' header field 'realm' parameter.

   o  Removed definition of access token characters.

   o  Added instructions for dealing with error and an invalid
      redirection URI.

   -10

   o  Fixed typos.  Many editorial changes.  Rewrote introduction.
      removed terminology grouping.

   o  Allowed POST for end-user authorization endpoint.

   o  Fixed token endpoint to not require client authentication.

   o  Made URI query and POST body 'oauth_token' parameter optional.

   o  Moved all parameter names and values to use underscores.

   o  Changed 'basic_credentials' to 'password',
      'invalid_client_credentials' and 'invalid_client_id' to
      'invalid_client'.

   o  Added note that access token requests without an access grant
      should not include a refresh token.

   o  Changed scheme name from 'Token' to 'OAuth', simplified request
      format to simple string for token instead of key=value pair (still
      supported for extensions).




<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 40]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-41" id="page-41" href="#page-41" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   o  Defined permitted access token string characters (suitable for
      inclusion in an HTTP header).

   o  Added a note about conflicts with previous versions.

   o  Moved 'client_id' definition from client authentication to access
      token endpoint.

   o  Added definition for 'access grant'.

   -09

   o  Fixed typos, editorial changes.

   o  Added token expiration example.

   o  Added scope parameter to end-user authorization endpoint response.

   o  Added note about parameters with empty values (same as omitted).

   o  Changed parameter values to use '-' instead of '_'.  Parameter
      names still use '_'.

   o  Changed authorization endpoint client type to response type with
      values: code, token, and both.

   o  Complete cleanup of error codes.  Added support for error
      description and URI.

   o  Add initial extensibility support.

   -08

   o  Renamed verification code to authorization code.

   o  Revised terminology, structured section, added new terms.

   o  Changed flows to profiles and moved to introduction.

   o  Added support for access token rescoping.

   o  Cleaned up client credentials section.

   o  New introduction overview.

   o  Added error code for invalid username and password, and renamed
      error code to be more consistent.




<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 41]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-42" id="page-42" href="#page-42" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   o  Added access grant type parameter to token endpoint.

   -07

   o  Major rewrite of entire document structure.

   o  Removed device profile.

   o  Added verification code support to user-agent flow.

   o  Removed multiple formats support, leaving JSON as the only format.

   o  Changed assertion "assertion_format" parameter to
      "assertion_type".

   o  Removed "type" parameter from token endpoint.

   -06

   o  Editorial changes, corrections, clarifications, etc.

   o  Removed conformance section.

   o  Moved authors section to contributors appendix.

   o  Added section on native applications.

   o  Changed error response to use the requested format.  Added support
      for HTTP "Accept" header.

   o  Flipped the order of the web server and user-agent flows.

   o  Renamed assertion flow "format" parameter name to
      "assertion_format" to resolve conflict.

   o  Removed the term identifier from token definitions.  Added a
      cryptographic token definition.

   o  Added figure titles.

   o  Added server response 401 when client tried to authenticate using
      multiple credentials.

   o  Clarified support for TLS alternatives, and added requirement for
      TLS 1.2 support for token endpoint.

   o  Removed all signature and cryptography.




<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 42]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-43" id="page-43" href="#page-43" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   o  Removed all discovery.

   o  Updated HTML4 reference.

   -05

   o  Corrected device example.

   o  Added client credentials parameters to the assertion flow as
      OPTIONAL.

   o  Added the ability to send client credentials using an HTTP
      authentication scheme.

   o  Initial text for the "WWW-Authenticate" header (also added scope
      support).

   o  Change authorization endpoint to end-user endpoint.

   o  In the device flow, change the "user_uri" parameter to
      "verification_uri" to avoid confusion with the end-user endpoint.

   o  Add "format" request parameter and support for XML and form-
      encoded responses.

   -04

   o  Changed all token endpoints to use "POST"

   o  Clarified the authorization server's ability to issue a new
      refresh token when refreshing a token.

   o  Changed the flow categories to clarify the autonomous group.

   o  Changed client credentials language not to always be server-
      issued.

   o  Added a "scope" response parameter.

   o  Fixed typos.

   o  Fixed broken document structure.

   -03

   o  Fixed typo in JSON error examples.





<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 43]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-44" id="page-44" href="#page-44" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


   o  Fixed general typos.

   o  Moved all flows sections up one level.

   -02

   o  Removed restriction on "redirect_uri" including a query.

   o  Added "scope" parameter.

   o  Initial proposal for a JSON-based token response format.

   -01

   o  Editorial changes based on feedback from Brian Eaton, Bill Keenan,
      and Chuck Mortimore.

   o  Changed device flow "type" parameter values and switch to use only
      the token endpoint.

   -00

   o  Initial draft based on a combination of WRAP and OAuth 1.0a.


<span class="h2"><a class="selflink" name="section-10" href="#section-10">10</a>.  References</span>

<span class="h3"><a class="selflink" name="section-10.1" href="#section-10.1">10.1</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-httpbis-p1-messaging" id="ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>]
              Fielding, R., Gettys, J., Mogul, J., Nielsen, H.,
              Masinter, L., Leach, P., Berners-Lee, T., and J. Reschke,
              "HTTP/1.1, part 1: URIs, Connections, and Message
              Parsing", <a href="./draft-ietf-httpbis-p1-messaging-09">draft-ietf-httpbis-p1-messaging-09</a> (work in
              progress), March 2010.

   [<a name="ref-RFC2045" id="ref-RFC2045">RFC2045</a>]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", <a href="./rfc2045">RFC 2045</a>, November 1996.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

   [<a name="ref-RFC2616" id="ref-RFC2616">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", <a href="./rfc2616">RFC 2616</a>, June 1999.

   [<a name="ref-RFC2617" id="ref-RFC2617">RFC2617</a>]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 44]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-45" id="page-45" href="#page-45" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              <a href="./rfc2617">RFC 2617</a>, June 1999.

   [<a name="ref-RFC2818" id="ref-RFC2818">RFC2818</a>]  Rescorla, E., "HTTP Over TLS", <a href="./rfc2818">RFC 2818</a>, May 2000.

   [<a name="ref-RFC2828" id="ref-RFC2828">RFC2828</a>]  Shirey, R., "Internet Security Glossary", <a href="./rfc2828">RFC 2828</a>,
              May 2000.

   [<a name="ref-RFC3023" id="ref-RFC3023">RFC3023</a>]  Murata, M., St. Laurent, S., and D. Kohn, "XML Media
              Types", <a href="./rfc3023">RFC 3023</a>, January 2001.

   [<a name="ref-RFC3447" id="ref-RFC3447">RFC3447</a>]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography
              Standards (PKCS) #1: RSA Cryptography Specifications
              Version 2.1", <a href="./rfc3447">RFC 3447</a>, February 2003.

   [<a name="ref-RFC3629" id="ref-RFC3629">RFC3629</a>]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, <a href="./rfc3629">RFC 3629</a>, November 2003.

   [<a name="ref-RFC3986" id="ref-RFC3986">RFC3986</a>]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              <a href="./rfc3986">RFC 3986</a>, January 2005.

   [<a name="ref-RFC4627" id="ref-RFC4627">RFC4627</a>]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", <a href="./rfc4627">RFC 4627</a>, July 2006.

   [<a name="ref-RFC5226" id="ref-RFC5226">RFC5226</a>]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", <a href="./bcp26">BCP 26</a>, <a href="./rfc5226">RFC 5226</a>,
              May 2008.

   [<a name="ref-RFC5246" id="ref-RFC5246">RFC5246</a>]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", <a href="./rfc5246">RFC 5246</a>, August 2008.

   [<a name="ref-RFC5849" id="ref-RFC5849">RFC5849</a>]  Hammer-Lahav, E., "The OAuth 1.0 Protocol", <a href="./rfc5849">RFC 5849</a>,
              April 2010.

   [<a name="ref-W3C.REC-html401-19991224" id="ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>]
              Raggett, D., Hors, A., and I. Jacobs, "HTML 4.01
              Specification", World Wide Web Consortium
              Recommendation REC-html401-19991224, December 1999,
              &lt;<a href="http://www.w3.org/TR/1999/REC-html401-19991224">http://www.w3.org/TR/1999/REC-html401-19991224</a>&gt;.

<span class="h3"><a class="selflink" name="section-10.2" href="#section-10.2">10.2</a>.  Informative References</span>

   [<a name="ref-OASIS.saml-core-2.0-os" id="ref-OASIS.saml-core-2.0-os">OASIS.saml-core-2.0-os</a>]
              Cantor, S., Kemp, J., Philpott, R., and E. Maler,
              "Assertions and Protocol for the OASIS Security Assertion
              Markup Language (SAML) V2.0", OASIS Standard saml-core-



<span class="grey">Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 45]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-46" id="page-46" href="#page-46" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                  December 2010</span>


              2.0-os, March 2005.


Authors' Addresses

   Eran Hammer-Lahav (editor)
   Yahoo!

   Email: eran@hueniverse.com
   URI:   <a href="http://hueniverse.com">http://hueniverse.com</a>


   David Recordon
   Facebook

   Email: davidrecordon@facebook.com
   URI:   <a href="http://www.davidrecordon.com/">http://www.davidrecordon.com/</a>


   Dick Hardt
   Microsoft

   Email: dick.hardt@gmail.com
   URI:   <a href="http://dickhardt.org/">http://dickhardt.org/</a>



























Hammer-Lahav, et al.      Expires June 4, 2011                 [Page 46]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
