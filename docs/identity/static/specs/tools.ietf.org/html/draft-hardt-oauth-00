<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:hardt-oauth" />
<meta name="DC.Description.Abstract" content="The OAuth Web Resource Authorization Profiles (OAuth WRAP) allow a\nserver hosting a Protected Resource to delegate authorization to one\nor more authorities. An application (Client) accesses the Protected\nResource by presenting a short lived, opaque, bearer token (Access\nToken) obtained from an authority (Authorization Server). There are\nProfiles for how a Client may obtain an Access Token when acting\nautonomously or on behalf of a User." />
<meta name="DC.Creator" content="Goland, Yaron" />
<meta name="DC.Creator" content="Tom, Allen" />
<meta name="DC.Creator" content="Hardt, Dick" />
<meta name="DC.Creator" content="Eaton, Brian" />
<meta name="DC.Date.Issued" content="2010-01-15" />
<meta name="DC.Title" content="OAuth Web Resource Authorization Profiles" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-hardt-oauth-00 - OAuth Web Resource Authorization Profiles</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-hardt-oauth-00.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-hardt-oauth-00.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-hardt-oauth-00.xml" title="XML source for this document">xml</a>|<a href="/id/draft-hardt-oauth-00.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-hardt-oauth' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="mailto:draft-hardt-oauth@tools.ietf.org?subject=draft-hardt-oauth%20" title="Send email to the document authors">Email</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-hardt-oauth-00.txt" title="Run an idnits check of this document">Nits</a>]                      </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-hardt-oauth-00">00</a> <a href="./draft-hardt-oauth-01">01</a>                                                         </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Internet Engineering Task Force                            D. Hardt, Ed.
Internet-Draft                                                 Microsoft
Intended status: Informational                                    A. Tom
Expires: July 19, 2010                                            Yahoo!
                                                                B. Eaton
                                                                  Google
                                                               Y. Goland
                                                               Microsoft
                                                        January 15, 2010


               <span class="h1">OAuth Web Resource Authorization Profiles</span>
                          <span class="h1">draft-hardt-oauth-00</span>

Abstract

   The OAuth Web Resource Authorization Profiles (OAuth WRAP) allow a
   server hosting a Protected Resource to delegate authorization to one
   or more authorities.  An application (Client) accesses the Protected
   Resource by presenting a short lived, opaque, bearer token (Access
   Token) obtained from an authority (Authorization Server).  There are
   Profiles for how a Client may obtain an Access Token when acting
   autonomously or on behalf of a User.

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   <a href="http://www.ietf.org/ietf/1id-abstracts.txt">http://www.ietf.org/ietf/1id-abstracts.txt</a>.

   The list of Internet-Draft Shadow Directories can be accessed at
   <a href="http://www.ietf.org/shadow.html">http://www.ietf.org/shadow.html</a>.

   This Internet-Draft will expire on July 19, 2010.

Copyright Notice



<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the BSD License.


Table of Contents

   <a href="#section-1">1</a>.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.1">1.1</a>.  Accessing a Protected Resource . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.2">1.2</a>.  Autonomous Client Profiles . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
     <a href="#section-1.3">1.3</a>.  User Delegation Profiles . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
   <a href="#section-2">2</a>.  Requirements Language  . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
   <a href="#section-3">3</a>.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
     <a href="#section-3.1">3.1</a>.  URLs . . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
   <a href="#section-4">4</a>.  Accessing a Protected Resource . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-4.1">4.1</a>.  Access Token . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-4.2">4.2</a>.  Client Calls Protected Resource Using HTTP Header  . . . . <a href="#page-11">11</a>
     <a href="#section-4.3">4.3</a>.  Client Calls Protected Resource Using URL Parameter  . . . <a href="#page-11">11</a>
     <a href="#section-4.4">4.4</a>.  Client Calls Protected Resource Using Post Parameter . . . <a href="#page-12">12</a>
   <a href="#section-5">5</a>.  Acquiring an Access Token  . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-5.1">5.1</a>.  Client Account and Password Profile  . . . . . . . . . . . <a href="#page-13">13</a>
       <a href="#section-5.1.1">5.1.1</a>.  Provisioning . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
       <a href="#section-5.1.2">5.1.2</a>.  Client Requests Access Token . . . . . . . . . . . . . <a href="#page-13">13</a>
       5.1.3.  Successful Access Token Response from
               Authorization  Server  . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
       5.1.4.  Unsuccessful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
       <a href="#section-5.1.5">5.1.5</a>.  Client Refreshes Access Token  . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-5.2">5.2</a>.  Assertion Profile  . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
       <a href="#section-5.2.1">5.2.1</a>.  Provisioning . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
       <a href="#section-5.2.2">5.2.2</a>.  Client Obtains Assertion . . . . . . . . . . . . . . . <a href="#page-15">15</a>
       <a href="#section-5.2.3">5.2.3</a>.  Client Requests Access Token . . . . . . . . . . . . . <a href="#page-15">15</a>
       5.2.4.  Successful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
       5.2.5.  Unsuccessful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
       <a href="#section-5.2.6">5.2.6</a>.  Client Refreshes Access Token  . . . . . . . . . . . . <a href="#page-16">16</a>
     <a href="#section-5.3">5.3</a>.  Username and Password Profile  . . . . . . . . . . . . . . <a href="#page-16">16</a>
       <a href="#section-5.3.1">5.3.1</a>.  Provisioning . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>



<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


       <a href="#section-5.3.2">5.3.2</a>.  Client Obtains Username and      Password  . . . . . . <a href="#page-16">16</a>
       <a href="#section-5.3.3">5.3.3</a>.  Client Requests Access Token . . . . . . . . . . . . . <a href="#page-16">16</a>
       5.3.4.  Successful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
       5.3.5.  Unsuccessful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
       5.3.6.  Verification URL Response from Authorization Server  . 18
       <a href="#section-5.3.7">5.3.7</a>.  CAPTCHA Response from Authorization Server . . . . . . <a href="#page-18">18</a>
       <a href="#section-5.3.8">5.3.8</a>.  Client Refreshes Access Token  . . . . . . . . . . . . <a href="#page-19">19</a>
       <a href="#section-5.3.9">5.3.9</a>.  Successful Access Token Refresh  . . . . . . . . . . . <a href="#page-19">19</a>
       <a href="#section-5.3.10">5.3.10</a>. Unsuccessful Access Token Refresh  . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-5.4">5.4</a>.  Web App Profile  . . . . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
       <a href="#section-5.4.1">5.4.1</a>.  Provisioning . . . . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
       5.4.2.  Client Directs the User to the      Authorization
               Server . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
       5.4.3.  Authorization Server Confirms Authorization
               Request with User  . . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
       5.4.4.  Authorization Server Directs User back to the
               Client . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
       <a href="#section-5.4.5">5.4.5</a>.  Client Requests Access Token . . . . . . . . . . . . . <a href="#page-21">21</a>
       5.4.6.  Successful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-22">22</a>
       5.4.7.  Unsuccessful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-23">23</a>
       <a href="#section-5.4.8">5.4.8</a>.  Client Refreshes Access Token  . . . . . . . . . . . . <a href="#page-24">24</a>
       <a href="#section-5.4.9">5.4.9</a>.  Successful Access Token Refresh  . . . . . . . . . . . <a href="#page-24">24</a>
       <a href="#section-5.4.10">5.4.10</a>. Unsuccessful Access Token Refresh  . . . . . . . . . . <a href="#page-25">25</a>
     <a href="#section-5.5">5.5</a>.  Rich App Profile . . . . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
       <a href="#section-5.5.1">5.5.1</a>.  Provisioning . . . . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
       5.5.2.  Client Directs the User to the      Authorization
               Server . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
       5.5.3.  Authorization Server Confirms Authorization
               Request with User  . . . . . . . . . . . . . . . . . . <a href="#page-26">26</a>
       <a href="#section-5.5.4">5.5.4</a>.  Client Requests Access Token . . . . . . . . . . . . . <a href="#page-28">28</a>
       5.5.5.  Successful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-28">28</a>
       5.5.6.  Unsuccessful Access Token Response from
               Authorization Server . . . . . . . . . . . . . . . . . <a href="#page-29">29</a>
       <a href="#section-5.5.7">5.5.7</a>.  Client Refreshes Access Token  . . . . . . . . . . . . <a href="#page-29">29</a>
       <a href="#section-5.5.8">5.5.8</a>.  Successful Access Token Refresh  . . . . . . . . . . . <a href="#page-29">29</a>
       <a href="#section-5.5.9">5.5.9</a>.  Unsuccessful Access Token Refresh  . . . . . . . . . . <a href="#page-30">30</a>
   <a href="#section-6">6</a>.  Parameter Considerations . . . . . . . . . . . . . . . . . . . <a href="#page-30">30</a>
     6.1.  Authorization Server Request / Response Parameter
           Encoding . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-30">30</a>
     <a href="#section-6.2">6.2</a>.  Parameter Size . . . . . . . . . . . . . . . . . . . . . . <a href="#page-30">30</a>
     <a href="#section-6.3">6.3</a>.  Access Token Format  . . . . . . . . . . . . . . . . . . . <a href="#page-31">31</a>
     <a href="#section-6.4">6.4</a>.  Refresh Token Format . . . . . . . . . . . . . . . . . . . <a href="#page-31">31</a>
     <a href="#section-6.5">6.5</a>.  Additional Authorization Server Parameters . . . . . . . . <a href="#page-31">31</a>



<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   <a href="#section-7">7</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-31">31</a>
   <a href="#section-8">8</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-31">31</a>
   <a href="#section-9">9</a>.  References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-31">31</a>
     <a href="#section-9.1">9.1</a>.  Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-31">31</a>
     <a href="#section-9.2">9.2</a>.  Informative References . . . . . . . . . . . . . . . . . . <a href="#page-32">32</a>
   <a href="#appendix-A">Appendix A</a>.  Client Account and Password Profile Example . . . . . <a href="#page-32">32</a>
     <a href="#appendix-A.1">A.1</a>.  Provisioning . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-32">32</a>
     <a href="#appendix-A.2">A.2</a>.  Client Requests Access Token . . . . . . . . . . . . . . . <a href="#page-33">33</a>
     A.3.  Successful Access Token Response from Authorization
           Server . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-33">33</a>
     <a href="#appendix-A.4">A.4</a>.  Client Calls Protected Resource  . . . . . . . . . . . . . <a href="#page-34">34</a>
   <a href="#appendix-B">Appendix B</a>.  Web App Profile Example . . . . . . . . . . . . . . . <a href="#page-34">34</a>
     <a href="#appendix-B.1">B.1</a>.  Provisioning . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-34">34</a>
     <a href="#appendix-B.2">B.2</a>.  Client Directs the User to the Server  . . . . . . . . . . <a href="#page-35">35</a>
     B.3.  Authorization Server Confirms Delegation Request with
           User . . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-35">35</a>
     <a href="#appendix-B.4">B.4</a>.  Server Directs User back to the Client . . . . . . . . . . <a href="#page-35">35</a>
     <a href="#appendix-B.5">B.5</a>.  Client Requests Access Token . . . . . . . . . . . . . . . <a href="#page-36">36</a>
     B.6.  Successful Access Token Response from Authorization
           Server . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-36">36</a>
     <a href="#appendix-B.7">B.7</a>.  Client Calls Protected Resource  . . . . . . . . . . . . . <a href="#page-37">37</a>
     <a href="#appendix-B.8">B.8</a>.  Client Calls Refreshes Access Token  . . . . . . . . . . . <a href="#page-37">37</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-38">38</a>




























<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Overview</span>

   As the internet has evolved, there is a growing trend for a variety
   of applications (Clients) to access resources through an API over
   HTTP or other protocols.  Often these resources require authorization
   for access and are Protected Resources.  The systems that are trusted
   to make authorization decisions may be independent from the Protected
   Resources for scale and security reasons.  The OAuth Web Resource
   Authorization Profiles (OAuth WRAP) enable a Protected Resource to
   delegate the authorization to access a Protected Resource to one or
   more trusted authorities.

   Clients that wish to access a Protected Resource first obtain
   authorization from a trusted authority (Authorization Server).
   Different credentials and profiles can be used to obtain this
   authorization, but once authorized, the Client is provided an Access
   Token, and possible a Refresh Token to obtain new Access Tokens.  The
   Authorization Server typically includes authorization information in
   the Access Token and digitally signs the Access Token.  Protected
   Resource can verify that an Access Token received from a Client was
   issued by a trusted Authorization Server and is valid.  The Protected
   Resource can then examine the contents of the Access Token to
   determine the authorization that has been granted to the Client.

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Accessing a Protected Resource</span>

   The Access Token is opaque to the Client, and can be any format
   agreed to between the Authorization Server and the Protected Resource
   enabling existing systems to reuse suitable tokens, or use a standard
   token format such as a Simple Web Token or JSON Web Token.  Since the
   Access Token provides the Client authorization to the Protected
   Resource for the life of the Access Token, the Authorization Server
   should issue Access Tokens that expire within an appropriate time.
   When an Access Token expires, the Client requests a new Access Token
   from the Authorization Server, which once again computes the Client's
   authorization, and issues a new Access Token.  Figure 1 below shows
   the flow between the Client and Authorization Server (A,B); and then
   between the Client and Protected Resource (C,D):













<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


     +---+                                  +---------------+
     | C |--(A)------ credentials ---------&gt;| Authorization |
     | l |&lt;-(B)------ Access Token ---------| Server        |
     | i |                                  +---------------+
     | e |
     | n |            Access Token          +-----------+
     | t |--(C)----- in HTTP header -------&gt;| Protected |
     |   |&lt;-(D)------ API response ---------| Resource  |
     +---+                                  +-----------+

                                 Figure 1

   In step A, the Client presents credentials to the Authorization
   Server in exchange for an Access Token.  A Profile specifies the
   credentials and how the Client obtains them.  This specification
   defines a number of Profiles; additional Profiles may be defined to
   support additional scenarios.

<span class="h3"><a class="selflink" name="section-1.2" href="#section-1.2">1.2</a>.  Autonomous Client Profiles</span>

   The following two Profiles (5.1 and 5.2) are recommended for
   scenarios involving a Client acting autonomously.

   Client Account and Password Profile (5.1): This is the simplest
   Profile.  The Client is provisioned with an account name and
   corresponding password by the Authorization Server.  The Client
   presents the account name and password to the Access Token URL at the
   Authorization Server in exchange for an Access Token.

   Assertion Profile (5.2): This profile enables a Client with a SAML or
   other assertion recognized by the Authorization Server.  The Client
   presents the assertion to the Access Token URL at the Authorization
   Server in exchange for an Access Token.  How the Client obtains the
   assertion is out of scope of OAuth WRAP.

   Access Tokens are short lived bearer tokens.  When the Protected
   Resource is presented with an expired Access Token by the Client, the
   Protected Resource returns an error.  The Client presents the
   credentials once again to the Authorization Server to obtain a new
   Access Token.

<span class="h3"><a class="selflink" name="section-1.3" href="#section-1.3">1.3</a>.  User Delegation Profiles</span>

   Common scenarios involve the User delegating to a Client to act on
   the User's behalf, adding another party (the User) to the protocol.
   In these Profiles, the Client receives a Refresh Token when it
   acquires the first Access Token.  When an Access Token expires, the
   Client presents the Refresh Token to acquire a new Access Token.



<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Refresh Tokens are sensitive as they represent long-lived permissions
   to access a Protected Resource and are always transmitted using
   HTTPS.

   Username and Password Profile (5.3): While the User may use a
   username and password to authenticate to the Authorization Server, it
   is undesirable for the Client to store the User's username and
   password.  In this profile the User provides their username and
   password to an application (Client) they have installed on their
   device.  The Client presents a Client Identifier, the username and
   password (credentials) to the Access Token URL at the Authorization
   Server in exchange for an Access Token and a Refresh Token as
   depicted in Figure 2 below.

     +---+                                  +---------------+
     | C |--(A)------ credentials ---------&gt;| Authorization |
     | l |&lt;-(B)------ Access Token ---------| Server        |
     | i |            Refresh Token         +---------------+
     | e |
     | n |            Access Token          +-----------+
     | t |--(C)----- in HTTP header -------&gt;| Protected |
     |   |&lt;-(D)------ API response ---------| Resource  |
     +---+                                  +-----------+


                                 Figure 2

   When the Access Token expires, the Client presents the Refresh Token
   to the Refresh Token URL at the Authorization Server in exchange for
   a new Access Token (Figure 3, steps A and B).  The Client then uses
   the new Access Token to access the Protected Resource (Figure 3,
   steps C and D).

     +---+                                  +---------------+
     | C |--(A)----- Refresh Token --------&gt;| Authorization |
     | l |&lt;-(B)------ Access Token ---------| Server        |
     | i |                                  +---------------+
     | e |
     | n |            Access Token          +-----------+
     | t |--(C)----- in HTTP header -------&gt;| Protected |
     |   |&lt;-(D)------ API response ---------| Resource  |
     +---+                                  +-----------+


                                 Figure 3

   Web App Profile (5.4): It is undesirable for a User to provide their
   Authorization Server username and password to web applications.



<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Additionally, the User may authenticate to the Authorization Server
   using other mechanisms then a username and password.  In this
   profile, a web application (Client) has been provisioned with a
   Client Identifier and Client Secret and may have registered a
   Callback URL.  Figure 4 below illustrates the protocol.  (A) The
   Client initiates the protocol by redirecting the User to the User
   Authorization URL at the Authorization Server passing the Client
   Identifier and the Callback URL.  (B) The Authorization Server
   authenticates the User, confirms the User would like to authorize the
   Client to access the Protected Resource, and generates a Verification
   Code.  (C) The Authorization Server then redirects the User to the
   Callback URL at the Protected Resource passing along the Verification
   Code.

    +---------+
    | Web App |
    | Client  |
    +---------+
      v    ^
      |    |
     (A)  (C)
      |    |
      \    \
    +---------+                                 +---------------+
    |         |\---(C)-- Verification Code ----&lt;|               |
    |   User  |                                 | Authorization |
    |    at   |&lt;---(B)-- User authenticates ---&gt;| Server        |
    | Browser |                                 |               |
    |         |\---(A)-- Client Identifier ----&gt;|               |
    +---------+                                 +---------------+

                                 Figure 4

   Similar to step A in Figure 2, the Client then presents the Client
   Identifier, Client Secret, Callback URL and Verification code
   (credentials) to the Access Token URL at the Authorization Server for
   an Access Token and a Refresh Token.

   Rich App Profile (5.5): This profile is suitable when the Client is
   an application the User has installed on their device and a web
   browser is available, but it is undesirable for the User to provide
   their username and password to an application, or the user may not be
   using a username and password to authenticate to the Authorization
   Server.

   The Client initiates the protocol by directing the User's browser to
   the Authorization URL at the Authorization Server passing the Client
   Identifier and potentially a Callback URL.  The Authorization Server



<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   authenticates the User, confirms the User would like to authorize the
   Client to access the Protected Resource, and generates a Verification
   Code.  The Verification Code may be communicated back to the Client
   in a number of ways:

   a.  the Authorization Server presents the Verification Code to the
       User, who is instructed to enter the Verification Code directly
       in the Client; the Client reads the Verification Code from the
       title of the web page presented by the Authorization Server;

   b.  the Authorization Server redirects the User to the Callback URL
       that presents Client specific language for the User to enter the
       Verification Code into the Client; or

   c.  the Client has registered a custom scheme and the Authorization
       Server redirects the browser to the custom scheme that causes the
       User's browser to load the Client application with the
       Verification Code as a parameter.

   Similar to step A in Figure 2, the Client then presents the Client
   Identifier, Callback URL (if provided) and Verification code
   (credentials) to the Access Token URL at the Authorization Server for
   an Access Token and a Refresh Token.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Requirements Language</span>

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].  Domain
   name examples use [<a href="./rfc2606" title="&quot;Reserved Top Level DNS Names&quot;">RFC2606</a>].


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Definitions</span>

   Access Token:  a short lived bearer token issued by the Authorization
         Server to the Client.  The Access Token is presented by the
         Client to the Protected Resource to access protected resources.

   Authorization Server:  an authorization resource that issues Access
         Tokens to Clients after successful authorization.  May be the
         same entity as the Protected Resource.

   Client:  an application that would like access to a Protected
         Resource.  Client Identifier:"&gt; a value used by a Client to
         identify itself to the Authorization Server.  This may be a
         human readable string or an opaque identifier.




<span class="grey">Hardt, et al.             Expires July 19, 2010                 [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Client Secret:  a secret used by a web application Client to
         establish ownership of the Client Identifier.

   Profile:  a mechanism for a Client to obtain an Access Token from an
         Authorization Server.

   Protected Resource:  a protected API that allows access via OAuth
         WRAP.  May be the same entity as the Authorization Server.
         Refresh Token:"&gt; a long lived bearer token used by a Client to
         acquire an Access Token from an Authorization Server.

   User: an individual who has an account with the Authorization Server.

   Verification Code:  a code used by a Client to verify the User has
         authorized the Client to have specific access to a Protected
         Resource.

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  URLs</span>

   Access Token URL:  the Authorization Server URL at which an Access
         Token is requested by the Client.  The URL may accept a variety
         of parameters depending on the Profile.  A Refresh Token may
         also be returned to the Client.  This URL MUST be an HTTPS URL
         and MUST always be called with POST.

   Callback URL:  the Client URL where the User will be redirected after
         an authorization request to the Authorization Server.

   Refresh Token URL:  the Authorization Server URL at which a Refresh
         Token is presented in exchange for a new Access Token is
         requested.  This URL MUST be an HTTPS URL and MUST always be
         called with POST.

   User Authorization URL:  the Authorization Server URL where the
         Client redirects the User to make an authorization request.


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Accessing a Protected Resource</span>

   Clients always present an Access Token to access a Protected
   Resource.  See <a href="#section-5">section 5</a> for how the Client acquires an Access Token.
   Use of the Authorization header is RECOMMENDED, since HTTP
   implementations are aware that Authorization headers have special
   security properties and may require special treatment in caches and
   logs.  Protected Resources SHOULD take precautions to insure that
   Access Tokens are not inadvertently logged or captured.  In addition
   to the methods presented here, the Protected Resource MAY allow the
   Client to present the Access Token using any scheme agreed on by the



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Client and Protected Resource.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Access Token</span>

   The exact format of the Access Token is opaque to Clients and is out
   of scope of this specification.  However, Protected Resources MUST be
   able to verify that the Access Token was issued by a trusted
   Authorization Server and is still valid.  Access Tokens SHOULD
   periodically expire.  The expiry time of Access Tokens is determined
   as an appropriate balance between excessive resource utilization if
   too short and unauthorized access if too long.

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Client Calls Protected Resource Using HTTP Header</span>

   The Protected Resource SHOULD enable Clients to access the Protected
   Resource by including the Access Token in the HTTP Authorization
   header using the OAuth WRAP scheme with the following parameter:

   access_token
      REQUIRED.  The value of the Access Token

   For example, if the Access Token is the string 123456789, the HTTP
   header would be:

     Authorization: WRAP access_token="123456789"

   If the Access Token has expired or is invalid, the Protected Resource
   MUST return:

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP

<span class="h3"><a class="selflink" name="section-4.3" href="#section-4.3">4.3</a>.  Client Calls Protected Resource Using URL Parameter</span>

   The Protected Resource MAY allow the Client to access protected
   resources at the Protected Resource by including the following
   parameter in the URL:

   access_token
      REQUIRED.  The value of the Access Token

   If the Access Token has expired or is invalid, the Protected Resource
   MUST return:

     HTTP 401 Unauthorized



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   and the HTTP header:

     WWW-Authenticate: WRAP

<span class="h3"><a class="selflink" name="section-4.4" href="#section-4.4">4.4</a>.  Client Calls Protected Resource Using Post Parameter</span>

   The Protected Resource MAY allow the Client to access protected
   resources at the Protected Resource by including the following
   parameter in the body of a HTTP post message formatted as
   application/x-www-form-urlencoded per 17.13.4 of HTML 4.01
   [<a href="#ref-W3C.REC-html40-19980424">W3C.REC-html40-19980424</a>]:

   access_token
      REQUIRED.  The value of the Access Token

   If the Access Token has expired or is invalid, the Protected Resource
   MUST return:

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Acquiring an Access Token</span>

   An Authorization Server may support one or more protocol profiles
   that enable a Client to obtain an Access Token that can be used to
   access a Protected Resource.

   Client developers only need to implement the profile(s) that align
   with how their application will be deployed and are supported by the
   Authorization Server.

   Authorization Server developers only need to implement the profile(s)
   that are appropriate for them.

   Protected Resource developers do not implement a profile as the
   Client always interacts with the Protected Resource by presenting an
   Access Token.

   <a href="#section-6">Section 6</a> has general information about parameters passed to and from
   the Authorization Server.







<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  Client Account and Password Profile</span>

   This profile is suitable when the Client is an application calling
   the Protected Resource on behalf of an organization and the
   Authorization Server accepts account passwords for authentication.
   This enables the Authorization Server to use an existing
   authentication mechanism.  This profile SHOULD NOT be used when the
   Client is acting on behalf of a user.  Profiles 5.3, 5.4 or 5.5 are
   RECOMMENDED when a Client is acting on behalf of a User.

<span class="h4"><a class="selflink" name="section-5.1.1" href="#section-5.1.1">5.1.1</a>.  Provisioning</span>

   Prior to initiating this protocol profile, the Client MUST have
   obtained an account name and account password from the Authorization
   Server.

<span class="h4"><a class="selflink" name="section-5.1.2" href="#section-5.1.2">5.1.2</a>.  Client Requests Access Token</span>

   The Client makes an HTTPS request to the Authorization Server's
   Access Token URL using POST.  The request contains the following
   parameters:

   wrap_name
      REQUIRED.  The account name.

   wrap_password
      REQUIRED.  The account password.

   wrap_scope
      OPTIONAL.  The Authorization Server MAY define authorization scope
      values for the Client to include.

   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.1.3" href="#section-5.1.3">5.1.3</a>.  Successful Access Token Response from Authorization  Server</span>

   If successful, the Authorization Server returns:

     HTTP 200 OK

   with the Refresh Token and an Access Token in the response body.  The
   response body contains the following parameters:








<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   wrap_refresh_token
      REQUIRED.  The Refresh Token.

   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.

   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

   The Client may now use the Access Token to access the Protected
   Resource per <a href="#section-4">Section 4</a>

<span class="h4"><a class="selflink" name="section-5.1.4" href="#section-5.1.4">5.1.4</a>.  Unsuccessful Access Token Response from Authorization Server</span>

   If the Client account name and password are invalid, the
   Authorization Server MUST respond with:

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP

   The Client MUST obtain a valid account name and password before
   retrying the request.

<span class="h4"><a class="selflink" name="section-5.1.5" href="#section-5.1.5">5.1.5</a>.  Client Refreshes Access Token</span>

   Authorization Servers SHOULD issue Access Tokens that expire and
   require Clients to refresh them.  Upon receiving the HTTP 401
   response when accessing protected resources per <a href="#section-4">Section 4</a>, the Client
   should request a new Access Token by repeating <a href="#section-5.1.2">Section 5.1.2</a>

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  Assertion Profile</span>

<span class="h4"><a class="selflink" name="section-5.2.1" href="#section-5.2.1">5.2.1</a>.  Provisioning</span>

   Prior to initiating this protocol profile, the Client MUST have a
   mechanism for obtained an assertion from an assertion issuer that can
   be presented to the Authorization Server for access to the Protected
   Resource.






<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h4"><a class="selflink" name="section-5.2.2" href="#section-5.2.2">5.2.2</a>.  Client Obtains Assertion</span>

   The Client obtains an assertion.  The process for obtaining the
   assertion is defined by the assertion issuer and the Authorization
   Server, and is out of scope of this specification.

<span class="h4"><a class="selflink" name="section-5.2.3" href="#section-5.2.3">5.2.3</a>.  Client Requests Access Token</span>

   The Client makes an HTTPS request to the Authorization Server's
   Access Token URL using POST.  The request contains the following
   parameters:

   wrap_assertion_format
      REQUIRED.  The format of the assertion as defined by the
      Authorization Server.

   wrap_assertion
      REQUIRED.  The assertion.

   wrap_scope
      OPTIONAL.  The Authorization Server MAY define authorization scope
      values for the Client to include

   Additional    parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.2.4" href="#section-5.2.4">5.2.4</a>.  Successful Access Token Response from Authorization Server</span>

   If successful, the Authorization Server returns:

     HTTP 200 OK

   with the Access Token in the response body.  The response body
   contains the following parameters:

   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.

   Additional    parameters
      Any additional parameters, as defined by the Authorization Server.

   The Client may now use the Access Token to access the Protected
   Resource per <a href="#section-4">Section 4</a>.




<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h4"><a class="selflink" name="section-5.2.5" href="#section-5.2.5">5.2.5</a>.  Unsuccessful Access Token Response from Authorization Server</span>

   If the assertion is not valid, the Authorization Server MUST respond
   with:

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP

   The Client MUST obtain a valid assertion by repeating <a href="#section-5.2.2">Section 5.2.2</a>
   before retrying the request.

<span class="h4"><a class="selflink" name="section-5.2.6" href="#section-5.2.6">5.2.6</a>.  Client Refreshes Access Token</span>

   Authorization Servers SHOULD issue Access Tokens that expire and
   require Clients to refresh them.  Upon receiving the HTTP 401
   response when accessing protected resources per <a href="#section-4">Section 4</a>, the Client
   should request a new Access Token by repeating <a href="#section-5.2.3">Section 5.2.3</a> if the
   assertion is still valid, otherwise the Client MUST obtain a new,
   valid assertion by repeating <a href="#section-5.2.2">Section 5.2.2</a>.

<span class="h3"><a class="selflink" name="section-5.3" href="#section-5.3">5.3</a>.  Username and Password Profile</span>

   This profile is suitable where the Client is an application the User
   has installed on their computer and the User uses a username and
   password to authenticate to the Authorization Server.  This profile
   enables a Client to act on behalf of the User without having to
   permanently store the User's username and password.

<span class="h4"><a class="selflink" name="section-5.3.1" href="#section-5.3.1">5.3.1</a>.  Provisioning</span>

   Prior to initiating this protocol profile, the Authorization Server
   MAY have required the Client to have obtained a Client Identifier
   from the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.3.2" href="#section-5.3.2">5.3.2</a>.  Client Obtains Username and      Password</span>

   The Client obtains the User's username and password from the user.
   The Client MUST discard the username and password once an Access
   Token has been obtained.

<span class="h4"><a class="selflink" name="section-5.3.3" href="#section-5.3.3">5.3.3</a>.  Client Requests Access Token</span>

   The Client makes an HTTPS request to the Authorization Server's
   Access Token URL using POST.  The request contains the following
   parameters:



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   wrap_client_id
      REQUIRED.  The Client Identifier.

   wrap_username
      REQUIRED.  The User's username.

   wrap_password
      REQUIRED.  The User's password.

   wrap_scope
      OPTIONAL.  The Authorization Server MAY define authorization scope
      values for the Client to include.

   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.3.4" href="#section-5.3.4">5.3.4</a>.  Successful Access Token Response from Authorization Server</span>

   If successful, the Authorization Server returns:

     HTTP 200 OK

   with the Access Token in the response body.  The response body
   contains the following parameters:

   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.

   Additional    parameters
      Any additional parameters, as defined by the Authorization Server.

   The Client MUST discard the User's username and password.  The Client
   securely stores the Refresh Token for later use.  The Client may now
   use the Access Token to access the Protected Resource per <a href="#section-4">Section 4</a>.

<span class="h4"><a class="selflink" name="section-5.3.5" href="#section-5.3.5">5.3.5</a>.  Unsuccessful Access Token Response from Authorization Server</span>

   The Authorization Server MUST verify User's username and password.
   If the verification fails, the Authorization Server MUST respond
   with:

     HTTP 401 Unauthorized

   and the HTTP header:



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


     WWW-Authenticate: WRAP

   The Client needs to obtain a valid username and password from the
   User per <a href="#section-5.3.2">Section 5.3.2</a> before retrying the request.

<span class="h4"><a class="selflink" name="section-5.3.6" href="#section-5.3.6">5.3.6</a>.  Verification URL Response from Authorization Server</span>

   If the Authorization Server determines that the Client may be
   malicious, the Authorization Server MAY require the Client to
   instruct the User to visit a Verification URL.  The Authorization
   Server communicates its requirement by responding to the Client's
   Access Token request with the following:

     HTTP 400 Bad Request

   and the body of the Authorization Server response contains the
   following parameter:

   wrap_verification_url
      REQUIRED.  The verification URL that the Client MUST either load
      in the User's browser, or display for the User to enter into a
      browser.

   The Client MUST then wait for the User to indicate they have
   successfully completed the verification process at the Authorization
   Server and attempt to obtain an Access Token Refresh Token per
   <a href="#section-5.3.3">Section 5.3.3</a> again.

<span class="h4"><a class="selflink" name="section-5.3.7" href="#section-5.3.7">5.3.7</a>.  CAPTCHA Response from Authorization Server</span>

   If the Authorization Server determines that the Client may be
   malicious, the Authorization Server MAY require the Client to have
   the User solve a CAPTCHA Puzzle.  The Authorization Server
   communicates its requirement by responding to the Client's Access
   Token request with the following:

     HTTP 400 Bad Request

   and the body of the Authorization Server response contains the
   following parameter:

   wrap_captcha_url
      REQUIRED.  The URL to the CAPTCHA puzzle.

   The Client MUST present the User with the CAPTCHA puzzle and prompt
   for a solution.  The Client then MAY attempt to obtain an Access
   Token per <a href="#section-5.3.3">Section 5.3.3</a> again, including the following additional
   parameter:



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   wrap_captcha_url
      REQUIRED.  The URL to the CAPTCHA puzzle received from the
      Authorization Server.

   wrap_captcha_solution
      REQUIRED.  The solution string to the CAPTCHA puzzle.

<span class="h4"><a class="selflink" name="section-5.3.8" href="#section-5.3.8">5.3.8</a>.  Client Refreshes Access Token</span>

   Refreshing an Access Token is the same in <a href="#section-5.3">Section 5.3</a>, <a href="#section-5.4">Section 5.4</a>,
   and <a href="#section-5.5">Section 5.5</a>.  Authorization Servers SHOULD issue Access Tokens
   that expire and require Clients to refresh them.  Upon receiving the
   HTTP 401 response when accessing protected resources per <a href="#section-4">Section 4</a>,
   the Client makes an HTTPS request to the Authorization Server's
   Refresh Token URL using POST.  The request contains the following
   parameters:

   wrap_refresh_token
      REQUIRED.  The Refresh Token that was received in <a href="#section-5.3.3">Section 5.3.3</a>

   Additional parameters:
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.3.9" href="#section-5.3.9">5.3.9</a>.  Successful Access Token Refresh</span>

   If successful, the Authorization Server returns:

     HTTP 200 OK

   with the Access Token in the response body.  The response body
   contains the following parameters:

   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.

   Additional    parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.3.10" href="#section-5.3.10">5.3.10</a>.  Unsuccessful Access Token Refresh</span>

   The Authorization Server MUST verify the Refresh Token.  If the
   verification fails, the Authorization Server MUST respond with

     HTTP 401 Unauthorized



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   and the HTTP header:

     WWW-Authenticate: WRAP

   The Client MUST again request authorization from the User by
   prompting for the User's username and password per <a href="#section-5.3.2">Section 5.3.2</a>
   before retrying the request.

<span class="h3"><a class="selflink" name="section-5.4" href="#section-5.4">5.4</a>.  Web App Profile</span>

   This profile is suitable when the Client is a web application calling
   the Protected Resource on behalf of a User.  This profile enables a
   Client to act on behalf of the User without acquiring a User's
   credentials.

<span class="h4"><a class="selflink" name="section-5.4.1" href="#section-5.4.1">5.4.1</a>.  Provisioning</span>

   Prior to initiating this protocol profile, the Client MUST have
   obtained a Client Identifier and Client Secret from the Authorization
   Server.  The Authorization Server MAY have also required the Client
   to register the Callback URL.

<span class="h4"><a class="selflink" name="section-5.4.2" href="#section-5.4.2">5.4.2</a>.  Client Directs the User to the      Authorization Server</span>

   The Client initiates an authorization request by redirecting the
   User's browser to the Authorization Server's User Authorization URL,
   with the following parameters:

   wrap_client_id
      REQUIRED.  The Client Identifier.

   wrap_callback
      REQUIRED.  The Callback URL.  An absolute URL to which the
      Authorization Server will redirect the User back after the User
      has approved the authorization request.  Authorization Servers MAY
      require that the wrap_callback URL match the previously registered
      value for the Client Identifier.

   wrap_client_state
      OPTIONAL.  An opaque value that Clients can use to maintain state
      associated with this request.  If this value is present, the
      Authorization Server MUST return it to the Client's Callback URL.

   wrap_scope
      OPTIONAL.  The Authorization Server MAY define authorization scope
      values for the Client to include.





<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.4.3" href="#section-5.4.3">5.4.3</a>.  Authorization Server Confirms Authorization Request with User</span>

   Upon receiving an authorization request from the Client by a
   redirection of the User's browser, the Authorization Server
   authenticates the user, presents the User with the Protected Resource
   access that will be granted to the Client, and prompts the User to
   confirm the request.

   If the User denies the request, the Authorization Server MAY allow
   the User to return to the Client Callback URL with the following
   parameters added:

   wrap_error_reason
      REQUIRED.  Value is user_denied

   wrap_client_state
      REQUIRED if the Client sent the value in the authorization request
      in <a href="#section-5.4.2">Section 5.4.2</a>

   If the User approves the request, the Authorization Server generates
   a Verification Code and associates it with the Client Identifier and
   Callback URL.

<span class="h4"><a class="selflink" name="section-5.4.4" href="#section-5.4.4">5.4.4</a>.  Authorization Server Directs User back to the Client</span>

   If the User approved the request, the Authorization Server MUST
   redirect the User back to the Callback URL, with the following
   parameters added:

   wrap_verification_code
      REQUIRED.  The Verification Code.

   wrap_client_state
      REQUIRED if the Client sent the value in the authorization request
      in <a href="#section-5.4.2">Section 5.4.2</a>

   Additional    parameters:
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.4.5" href="#section-5.4.5">5.4.5</a>.  Client Requests Access Token</span>

   If the User approved the request, the Authorization Server MUST
   redirect the User back to the Callback URL, with the following
   parameters added:




<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   wrap_client_id
      REQUIRED.  The Client Identifier

   wrap_client_secret
      REQUIRED.  The Client Secret

   wrap_verification_code
      REQUIRED.  The Verification Code.

   wrap_callback
      REQUIRED.  The Callback URL used to obtain the Verification Code.

   Additional parameters:
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.4.6" href="#section-5.4.6">5.4.6</a>.  Successful Access Token Response from Authorization Server</span>

   After receiving the Access Token request, the Authorization Server
   verifies the request as follows:

      the Client Secret MUST match the Client Identifer

      the Client Identifier MUST match the Client Identifier from the
      authorization redirect

      the Verification Code MUST match the Client Identifier from the
      authorization redirect

      the Callback URL MUST match the Callback URL from the
      authorization redirect

      the Verification Code MUST not have expired

   The Authorization Server MAY also require that a Verification Code is
   not reused.

   If verification is successful, the Authorization Server returns:

     HTTP 200 OK

   with the Refresh Token and the Access Token in the response body.
   The response body contains the following parameters:

   wrap_refresh_token
      REQUIRED.  The Refresh Token.






<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 22]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-23" id="page-23" href="#page-23" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.

   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

   The Client securely stores the Refresh Token for later use.  The
   Client may now use the Access Token to access the Protected Resource
   per <a href="#section-4">Section 4</a>.

<span class="h4"><a class="selflink" name="section-5.4.7" href="#section-5.4.7">5.4.7</a>.  Unsuccessful Access Token Response from Authorization Server</span>

   The Authorization Server MUST first verify the Client Identifier and
   Client Secret.  If they are invalid, the Authorization Server MUST
   respond with:

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP

   The Client MUST obtain a valid Client Identifier and Client Secret
   before retrying the request.

   The Authorization Server MUST then verify that the Callback URL and
   Verification Code are associated with the Client Identifier.  If the
   verification fails, the Authorization Server MUST respond with:

     HTTP 400 Bad Request

   and the body of the Authorization Server response contains the
   following parameters:

   wrap_error_reason
      OPTIONAL.  If all the parameters are valid except that the
      Verification Code has expired or been revoked, then it is
      RECOMMENDED that this parameter be included and if so, then the
      value MUST be:



    expired_verification_code




<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 23]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-24" id="page-24" href="#page-24" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


      This enables the Client to detect it needs a new Verification Code
      and to direct the User to the Authorization Server per
      <a href="#section-5.4.2">Section 5.4.2</a>

      If the Callback URL is invalid, the value MUST be:



    invalid_callback

   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.4.8" href="#section-5.4.8">5.4.8</a>.  Client Refreshes Access Token</span>

   Refreshing an Access Token is the same in <a href="#section-5.3">Section 5.3</a>, <a href="#section-5.4">Section 5.4</a>,
   and <a href="#section-5.5">Section 5.5</a>.  Authorization Servers SHOULD issue Access Tokens
   that expire and require Clients to refresh them.  Upon receiving the
   HTTP 401 response when accessing protected resources per <a href="#section-4">Section 4</a>,
   the Client makes an HTTPS request to the Authorization Server's
   Refresh Token URL using POST.  The request contains the following
   parameters:

   wrap_refresh_token
      REQUIRED.  The Refresh Token that was received in <a href="#section-5.4.5">Section 5.4.5</a>

   Additional parameters:
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.4.9" href="#section-5.4.9">5.4.9</a>.  Successful Access Token Refresh</span>

   If successful, the Authorization Server returns:

     HTTP 200 OK

   with the Access Token in the response body.  The response body
   contains the following parameters:

   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.







<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 24]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-25" id="page-25" href="#page-25" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Additional    parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.4.10" href="#section-5.4.10">5.4.10</a>.  Unsuccessful Access Token Refresh</span>

   The Authorization Server MUST verify the Refresh Token.  If the
   verification fails, the Authorization Server MUST respond with

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP

   The Client MUST again request authorization from the User per
   <a href="#section-5.4.2">Section 5.4.2</a>.

<span class="h3"><a class="selflink" name="section-5.5" href="#section-5.5">5.5</a>.  Rich App Profile</span>

   This profile is suitable where the Client is an application the User
   has installed on their computer and there is a browser available for
   the Client to launch.  This profile enables a Client to act on behalf
   of the User regardless of how the User authenticates to the Server
   and without access to the User's credentials.

<span class="h4"><a class="selflink" name="section-5.5.1" href="#section-5.5.1">5.5.1</a>.  Provisioning</span>

   Prior to initiating this protocol profile, the Client MAY be required
   to register the Client Identifier and/or the Callback URL with the
   Server.

<span class="h4"><a class="selflink" name="section-5.5.2" href="#section-5.5.2">5.5.2</a>.  Client Directs the User to the      Authorization Server</span>

   The Client initiates an authorization request by opening the User's
   browser with the Server's User Authorization URL, and including the
   following parameters:

   wrap_client_id
      REQUIRED.  The Client Identifier.

   wrap_callback
      OPTIONAL.  A Callback URL where the Authorization Server MAY
      redirect the User's browser after the User responds to the
      authorization request.







<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 25]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-26" id="page-26" href="#page-26" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   wrap_client_state
      OPTIONAL.  An opaque value that Clients can use to maintain state
      associated with this request.  If this value is present, the
      Authorization Server MUST return it to the Client's Callback URL.

   wrap_scope
      OPTIONAL.  The Authorization Server MAY define authorization scope
      values for the Client to include.

   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.5.3" href="#section-5.5.3">5.5.3</a>.  Authorization Server Confirms Authorization Request with User</span>

   Upon receiving an authorization request from the Client by way of the
   User's browser, the Authorization Server authenticates the user,
   presents the User with the Protected Resource access that will be
   granted to the Client, and prompts the User to confirm the request.
   If the User approves the request, the Authorization Server generates
   a Verification Code.  If the User denied access, the Authorization
   Server MAY set the Verification Code to the reserved value:

     user_denied

   It is RECOMMENDED the Verification Code be single use, and expire
   within minutes of issue.  There are a number of mechanisms for the
   Authorization Server to transmit the Verification Code to the Client,
   specified below.

   Rich Application interaction with the User and the Authorization
   Server is an area of active research and development.  If the Rich
   Application is able to retrieve the verifier directly from the
   callback URL returned by the Authorization Server, an improved user
   experience is possible.  However, not all applications are able to
   interact with the Authorization Server in this manner.

<span class="h5"><a class="selflink" name="section-5.5.3.1" href="#section-5.5.3.1">5.5.3.1</a>.  Applications with Callback URLs</span>

   Rich Applications may be able to receive callback URLs in any of
   several ways.  For example, the Rich Application may register a
   custom protocol handler with the application platform so that the
   application will be invoked when the browser is redirected to the
   callback URL.  Alternatively, the callback URL may point to a web
   site with which the Rich Application has a trust relationship.  The
   web site can then pass the Callback URL down to the Rich Application
   for processing.  Finally, the Callback URL may point to a web site
   that will display the Callback URL to the screen along with
   instructions for the user to enter the Verification Code into the



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 26]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-27" id="page-27" href="#page-27" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   application.

   For Rich Applications with a Callback URL, the Authorization Server
   MUST redirect the User back to the Callback URL, with the following
   parameters added:

   wrap_verification_code
      REQUIRED.  The Verification Code

   wrap_client_state
      REQUIRED if the Client sent the value in the authorization request
      in <a href="#section-5.5.2">Section 5.5.2</a>

   Additional    parameters
      Any additional parameters, as defined by the Authorization Server.

   If the User denied access, the Server MAY redirect the User's browser
   to the Callback URL with the Verification Code set to the reserved
   value:

     user_denied

<span class="h5"><a class="selflink" name="section-5.5.3.2" href="#section-5.5.3.2">5.5.3.2</a>.  Applications without Callback URLs</span>

   Rich Applications without Callback URLs need to receive the
   verification code in other ways.  For Rich Applications without a
   Callback URL, the Authorization Server MUST present the Verification
   Code on the web page and instruct the user to enter it into the
   Client.

   The Server MAY also append the Verification Code to the title of the
   HTML page so that Clients that have access to the title of the
   browser's current page can obtain the Verification Code without
   requiring the User enter the Verification Code into the Client.  The
   Client can parse the title looking for "code=" and then the rest of
   the title is the Verification Code.  If adding the Verification Code
   to the title of the HTML page, the Server MUST also include the
   wrap_client_state parameter if sent from the Client as the "state="
   parameter.

   Eg.  For example.com where the Verification Code = WF34F7HG and
   Client State = NMMGFJJ, the Server would set the title of the page to
   something like:
    &lt;title&gt;Successful delegation, code=WF34F7HG
   state=NMMGFJJ&lt;/title&gt;

   If the User denied access, the Server MAY append code=user_denied to
   the title of the HTML page so that the Client can detect that the



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 27]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-28" id="page-28" href="#page-28" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   User has denied access.

<span class="h4"><a class="selflink" name="section-5.5.4" href="#section-5.5.4">5.5.4</a>.  Client Requests Access Token</span>

   The Client makes an HTTPS request to the Server's Access Token URL
   using POST.  The request contains the following parameters:

   wrap_client_id
      REQUIRED.  The Client Identifier

   wrap_verification_code
      REQUIRED.  The Verification Code.

   Additional parameters:
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.5.5" href="#section-5.5.5">5.5.5</a>.  Successful Access Token Response from Authorization Server</span>

   The Server checks the Verification Code was previously issued to the
   same Client Display Name, has not expired and has not been used.  If
   these conditions are met, the Server marks the Verification Code as
   being used and returns:

     HTTP 200 OK

   with the Refresh Token and an Access Token in the response body.  The
   response body contains the following parameters:

   wrap_refresh_token
      REQUIRED.  The Refresh Token.

   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.

   Additional parameters
      Any additional parameters, as defined by the Authorization Server.

   The Client securely stores the Refresh Token for later use.  The
   Client may now use the Access Token to access the Protected Resource
   per <a href="#section-4">Section 4</a>.







<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 28]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-29" id="page-29" href="#page-29" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h4"><a class="selflink" name="section-5.5.6" href="#section-5.5.6">5.5.6</a>.  Unsuccessful Access Token Response from Authorization Server</span>

   The Authorization Server MUST first verify the Client Identifier and
   Client Secret.  If they are invalid, the Authorization Server MUST
   respond with:

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP

   The Client needs to obtain a new Verification Code per <a href="#section-5.5.2">Section 5.5.2</a>.

<span class="h4"><a class="selflink" name="section-5.5.7" href="#section-5.5.7">5.5.7</a>.  Client Refreshes Access Token</span>

   Refreshing an Access Token is the same in <a href="#section-5.3">Section 5.3</a>, <a href="#section-5.4">Section 5.4</a>,
   and <a href="#section-5.5">Section 5.5</a>.  Authorization Servers SHOULD issue Access Tokens
   that expire and require Clients to refresh them.  Upon receiving the
   HTTP 401 response when accessing protected resources per <a href="#section-4">Section 4</a>,
   the Client makes an HTTPS request to the Authorization Server's
   Refresh Token URL using POST.  The request contains the following
   parameters:

   wrap_refresh_token
      REQUIRED.  The Refresh Token that was received in <a href="#section-5.5.4">Section 5.5.4</a>

   Additional parameters:
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.5.8" href="#section-5.5.8">5.5.8</a>.  Successful Access Token Refresh</span>

   If successful, the Authorization Server returns:

     HTTP 200 OK

   with the Access Token in the response body.  The response body
   contains the following parameters:

   wrap_access_token
      REQUIRED.  The Access Token.

   wrap_access_token_expires_in
      OPTIONAL.  The lifetime of the Access Token in seconds.  For
      example, 3600 represents one hour.






<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 29]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-30" id="page-30" href="#page-30" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Additional    parameters
      Any additional parameters, as defined by the Authorization Server.

<span class="h4"><a class="selflink" name="section-5.5.9" href="#section-5.5.9">5.5.9</a>.  Unsuccessful Access Token Refresh</span>

   The Authorization Server MUST verify the Refresh Token.  If the
   verification fails, the Authorization Server MUST respond with

     HTTP 401 Unauthorized

   and the HTTP header:

     WWW-Authenticate: WRAP

   The Client MUST again request authorization from the User per
   <a href="#section-5.5.2">Section 5.5.2</a>.


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Parameter Considerations</span>

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  Authorization Server Request / Response Parameter       Encoding</span>

   All requests made directly to the Authorization Server use the HTTP
   POST method and the parameters MUST be in the body of the message and
   formatted as application/x-www-form-urlencoded per 17.13.4 of HTML
   4.01 [<a href="#ref-W3C.REC-html40-19980424">W3C.REC-html40-19980424</a>].

   Any parameters in the response from the Authorization Server MUST be
   in the body of the message and formatted as application/
   x-www-form-urlencoded per 17.13.4 of HTML 4.01
   [<a href="#ref-W3C.REC-html40-19980424">W3C.REC-html40-19980424</a>].

<span class="h3"><a class="selflink" name="section-6.2" href="#section-6.2">6.2</a>.  Parameter Size</span>

   HTTP Headers
      Web servers often impose a maximum on the combined size of all
      HTTP headers ranging from 8KB to 16KB.  The size of the Access
      Token should be small enough to ensure the total size of the HTTP
      headers does not exceed the limits of web servers.

   URLs
      Web servers and browsers often impose a maximum on the total
      length of the URL of as low as 2083 bytes.  The length of URLs
      exposed by the Authorization Server and the length of parameters
      passed on a URL should be minimized so that the total length does
      not exceed this limit.





<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 30]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-31" id="page-31" href="#page-31" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h3"><a class="selflink" name="section-6.3" href="#section-6.3">6.3</a>.  Access Token Format</span>

   OAuth WRAP does not specify the format of the Access Token.  The
   format is mutually agreed to by the Authorization Server and the
   Protected Resource and is opaque to the Client.  The Access Token
   format MUST consist of legal characters in an HTTP header per
   [Reference needed]

   The Simple Web Token (SWT) and JSON Web Token (JWT) are possible
   Access Token formats.

   [TBD: entropy recommendations for Access Token so that it remains
   secure during its lifetime]

<span class="h3"><a class="selflink" name="section-6.4" href="#section-6.4">6.4</a>.  Refresh Token Format</span>

   OAuth WRAP does not specify the format of the Refresh Token.  The
   Refresh Token is both generated and consumed by the Authorization
   Server and is opaque to the Client and never exposed to the Protected
   Resource.  The Refresh Token is a long lived credential, and should
   contain enough entropy that it cannot be guessed.  The size
   limitations of the Access Token are not applicable to the Refresh
   Token as the Refresh Token is always in the body of an HTTP message.

<span class="h3"><a class="selflink" name="section-6.5" href="#section-6.5">6.5</a>.  Additional Authorization Server Parameters</span>

   The Authorization Server may define additional parameters to be
   included in are returned from calls to the Access Token URL or User
   Authorization URL.  Parameters that start with wrap_ are reserved and
   may not be used.


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  IANA Considerations</span>

   This memo includes no request to IANA.


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  Security Considerations</span>

   TBD: need to put in all the security considerations for implementors.


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  References</span>

<span class="h3"><a class="selflink" name="section-9.1" href="#section-9.1">9.1</a>.  Normative References</span>

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 31]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-32" id="page-32" href="#page-32" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   [<a name="ref-RFC2606" id="ref-RFC2606">RFC2606</a>]  Eastlake, D. and A. Panitz, "Reserved Top Level DNS
              Names", <a href="./bcp32">BCP 32</a>, <a href="./rfc2606">RFC 2606</a>, June 1999.

   [<a name="ref-W3C.REC-html40-19980424" id="ref-W3C.REC-html40-19980424">W3C.REC-html40-19980424</a>]
              Hors, A., Jacobs, I., and D. Raggett, "HTML 4.0
              Specification", World Wide Web Consortium
              Recommendation REC-html40-19980424, April 1998,
              &lt;<a href="http://www.w3.org/TR/1998/REC-html40-19980424">http://www.w3.org/TR/1998/REC-html40-19980424</a>&gt;.

<span class="h3"><a class="selflink" name="section-9.2" href="#section-9.2">9.2</a>.  Informative References</span>

   [<a name="ref-I-D.narten-iana-considerations-rfc2434bis" id="ref-I-D.narten-iana-considerations-rfc2434bis">I-D.narten-iana-considerations-rfc2434bis</a>]
              Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs",
              <a href="./draft-narten-iana-considerations-rfc2434bis-09">draft-narten-iana-considerations-rfc2434bis-09</a> (work in
              progress), March 2008.

   [OAuth Core 1.0 Revision A]
              OAuth, OAuth Community., "OAuth Core 1.0 Revision A".


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Client Account and Password Profile Example</span>

   In this example, crm.example.com is an application server that has a
   Protected Resource at https://crm.example.com/data.  DataDumper is an
   application acting as a Client that periodically calls
   <a href="https://crm.exanmple.com/data">https://crm.exanmple.com/data</a>.  The Protected Resource trusts the
   Authorization Server auth.example.net to determine if a Client has
   access.

<span class="h1"><a class="selflink" name="appendix-A.1" href="#appendix-A.1">A.1</a>.  Provisioning</span>

   The Authorization Server documentation defines the Access Token URL
   as:

    https://auth.example.net/access_token

   The Authorization Server has defined that the parameter Audience be
   included in calls to the Access Token URL.

   The Client has been provisioned with the following:

    Client Account: datadumper Client Password: j2hw7GPsl0

   The Protected Resource and the Authorization Server have agreed to
   use a Simple Web Token (SWT) for the Access Token with the reserved
   attributes Issuer, Audience, ExpiresOn and the public attribute
   net.example.auth.account and have exchanged the following HMAC key



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 32]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-33" id="page-33" href="#page-33" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   value (expressed in base 64):

   3iK5ZYAoBQuOqSgF/YqlDw70HKRmbyXkrl5f4SJ4Toc=

<span class="h1"><a class="selflink" name="appendix-A.2" href="#appendix-A.2">A.2</a>.  Client Requests Access Token</span>

   The Client makes an HTTPS POST to:

   https://auth.example.net/access_token

   With the following message body:

  wrap_name=datadumper&amp;wrap_password=j2hw7GPsl0&amp;Audience=crm.example.com

<span class="h1"><a class="selflink" name="appendix-A.3" href="#appendix-A.3">A.3</a>.  Successful Access Token Response from Authorization Server</span>

   The Authorization Server checks that the Client Password j2hw7GPsl0
   is associated with the Client Name datadumper and that the Client is
   authorized to access crm.example.com.  The Authorization Server notes
   the time is 2010-02-03T04:05:06Z, which is 1265198706 seconds since
   1970-01-01T0:0:0Z. The Authorization Server would like the Access
   Token to expire in an hour, so 3600 is added to the current time.
   The Authorization Server then uses the values:

   net.example.auth.account:
   datadumper ExpiresOn: 1265202306 (1265198706 + 3600)
   Audience: crm.example.com
   Issuer: auth.example.net

   and the agreed HMAC key to generate the following SWT:

  net.example.auth.account=datadumper&amp;ExpiresOn=1265202306&amp;Audience=crm.
  example.com&amp;Issuer=auth.example.net&amp;HMACSHA256=N9%2F%2F0tSos78Me36%2Bi
  oBH0sFKfd7eCsURlEIheoUbCJk%3D

   The Authorization Server then responds to the Clients HTTPS request
   with:

   HTTP 200 OK

   and the Access Token and lifetime of the Access Token as application/
   x-www-form-urlencoded data in the body of the message as such:

  wrap_access_token=net.example.auth.account%3Ddatadumper%26ExpiresOn%3D
  1265202306%26Audience%3Dcrm.example.com%26Issuer%3Dauth.example.net%26
  HMACSHA256%3DN9%252F%252F0tSos78Me36%252BioBH0sFKfd7eCsURlEIheoUbCJk%2
  53D&amp;wrap_access_token_expires_in=3600




<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 33]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-34" id="page-34" href="#page-34" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h1"><a class="selflink" name="appendix-A.4" href="#appendix-A.4">A.4</a>.  Client Calls Protected Resource</span>

   The Client now has an Access Token valid for an hour.  The Client
   makes an API call to:

   https://crm.example.com/data

   including the following HTTP header:

  Authorization: WRAP access_token="net.example.auth.account=datadumper&amp;
  ExpiresOn=1265202306&amp;Audience=crm.example.com&amp;Issuer=auth.example.net&amp;
  HMACSHA256=N9%2F%2F0tSos78Me36%2BioBH0sFKfd7eCsURlEIheoUbCJk%3D"

   The Protected Resources verifies the SWT and performs the Client's
   request per the authorization attributes in the SWT.


<span class="h2"><a class="selflink" name="appendix-B" href="#appendix-B">Appendix B</a>.  Web App Profile Example</span>

   In this example, Jane, the User, listens to music from
   music.example.com and updates her status at status.example.com.  When
   listening to music, Jane would like her status to be updated at the
   start of each song.  From an OAuth WRAP perspective, the Client is
   music.example.com, the Protected Resource is
   https://status.example.com/update, and auth.example.com is the
   Authorization Server trusted by status.example.com.

<span class="h1"><a class="selflink" name="appendix-B.1" href="#appendix-B.1">B.1</a>.  Provisioning</span>

   The Authorization Server documentation defines the following URLs:

    User Authorization URL:  https://auth.example.com/user_authorization
    Access Token URL:        https://auth.example.com/access_token
    Refresh Token URL:       https://auth.example.com/refresh_token

   The Authorization Server has defined that if the Client wants
   authorization to update a User's status, that the Client include the
   wrap_scope parameter with the value status_update when requesting
   authorization.

   The Client has been provisioned with:

   Client Identifier: music.example.com
   Client Secret: 7F2986DF2342914A

   The Client has registered the Callback URL:

   https://music.example.com/auth_callback



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 34]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-35" id="page-35" href="#page-35" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   The Protected Resource and the Authorization Server have agreed to
   use a Simple Web Token (SWT) for the Access Token with the reserved
   attributes Issuer, Audience, ExpiresOn and the public attributes
   com.example.auth.account, com.example.auth.client and
   com.example.auth.scope.  They have exchanged the following HMAC key
   value (expressed in base 64):

   Zt9JlL1QvPYRSCK9PgSjrxRUBWe7lbEYsZCdM+sJCF4=

<span class="h1"><a class="selflink" name="appendix-B.2" href="#appendix-B.2">B.2</a>.  Client Directs the User to the Server</span>

   Jane informs music.example.com that she would like her status at
   status.example.com to be updated when a new song starts playing.  The
   music.example.com website maintains user sessions with a URL
   parameter named session which has the value Vn3IG2FRALSEQX2Nxr at
   this time for Jane.  The Client will use wrap_client_state to
   maintain the session value.  The Client redirects Jane's browser to
   the Authorization Server's User Authorization URL appending
   parameters for the Client Identifier, Callback URL, Client state and
   authorization scope.

  https://auth.example.com/user_authorization?wrap_client_id=music.examp
  le.com&amp;wrap_callback=http%3A%2F%2Fmusic.example.com%2Fauth_callback&amp;wr
  ap_client_state=Vn3IG2FRALSEQX2Nxr&amp;wrap_scope=status_update

<span class="h1"><a class="selflink" name="appendix-B.3" href="#appendix-B.3">B.3</a>.  Authorization Server Confirms Delegation Request with User</span>

   The Authorization Server verifies the supplied Client Identifier
   music.example.com has been registered and has the Callback URL
   https://music.example.com/auth_callback.  The Authorization Server
   authenticates that the User it is dealing with is Jane, and then asks
   Jane to authorize music.example.com to update Jane's status at
   status.example.com.  Jane approves the request and the Authorization
   Server generates a Verification Code with the value 46YEXQjVit6T3nQ8,
   stores it with the Client Identifier, Callback URl and the current
   time.

<span class="h1"><a class="selflink" name="appendix-B.4" href="#appendix-B.4">B.4</a>.  Server Directs User back to the Client</span>

   The Server redirects Jane back to the Client's Callback URL with the
   Verification Code and Client State appended:

  https://music.example.com/auth_callback?wrap_verification_code=46YEXQj
  Vit6T3nQ8&amp;wrap_client_state=Vn3IG2FRALSEQX2Nxr







<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 35]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-36" id="page-36" href="#page-36" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


<span class="h1"><a class="selflink" name="appendix-B.5" href="#appendix-B.5">B.5</a>.  Client Requests Access Token</span>

   The Client makes an HTTPS POST request to:

   https://auth.example.com/access_token

   With the following message body:

  wrap_client_id=music.example.com&amp;wrap_client_secret=7F2986DF2342914A&amp;w
  rap_verification_code=46YEXQjVit6T3nQ8&amp;wrap_callback=http%3A%2F%2Fmusi
  c.example.com%2Fauth_callback

<span class="h1"><a class="selflink" name="appendix-B.6" href="#appendix-B.6">B.6</a>.  Successful Access Token Response from Authorization Server</span>

   The Authorization Server verifies that the Verification Code is still
   valid, has not been used, and is associated with the Client ID,
   Client Secret and Callback URL Password.  The Authorization Server
   then generates a Refresh Token with the value:

   MfdWTc+v9MXhpc+d/csrKFMPfj1RySm6CzIjmTBGN6w=

   The Authorization Server notes the time is 2010-01-02T03:04:05Z,
   which is 1262430245 seconds since 1970-01-01T0:0:0Z. The
   Authorization Server then uses the values:

   com.example.auth.scope: status_updatea
   com.example.auth.account: Jane
   com.example.auth.client: music.example.com
   ExpiresOn: 1262433845 (1262430245 + 3600 seconds later)
   Audience: status.example.com
   Issuer: auth.example.com

   and the agreed HMAC key to generate the following SWT:

  com.example.auth.scope=status_update&amp;com.example.auth.account=Jane&amp;com
  .example.auth.client=music.example.com&amp;ExpiresOn=1262433845&amp;Audience=s
  tatus.example.com&amp;Issuer=auth.example.com&amp;HMACSHA256=3xZAYzJRtYCQgkAF3
  iqElp1DhyKkPhq947j04NcDocQ%3D

   The Authorization Server then responds to the Clients HTTPS request
   with:

   HTTP 200 OK

   and the Refresh Token, Access Token and lifetime of the Access Token
   as application/x-www-form-urlencoded data in the body of the message
   as such:




<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 36]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-37" id="page-37" href="#page-37" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


  wrap_refresh_token=MfdWTc%2Bv9MXhpc%2Bd%2FcsrKFMPfj1RySm6CzIjmTBGN6w%3
  D&amp;wrap_access_token=com.example.auth.scope%3Dstatus_update%26com.examp
  le.auth.account%3DJane%26com.example.auth.client%3Dmusic.example.com%2
  6ExpiresOn%3D1262433845%26Audience%3Dstatus.example.com%26Issuer%3Daut
  h.example.com%26HMACSHA256%3D3xZAYzJRtYCQgkAF3iqElp1DhyKkPhq947j04NcDo
  cQ%253D&amp;wrap_access_token_expires_in=3600

   The Client now has a Refresh Token and Access Token valid for an
   hour.  The Client stores the Refresh Token for later use.

<span class="h1"><a class="selflink" name="appendix-B.7" href="#appendix-B.7">B.7</a>.  Client Calls Protected Resource</span>

   A few minutes later, music.example.com starts playing a new song for
   Jane.  The Client updates Jane's status at status.example.com by
   making an API call to:

   https://status.example.com/update

   including the following HTTP header:

  Authorization: WRAP access_token="com.example.auth.scope=status_update
  &amp;com.example.auth.account=Jane&amp;com.example.auth.client=music.example.c
  om&amp;ExpiresOn=1262433845&amp;Audience=status.example.com&amp;Issuer=auth.exampl
  e.com&amp;HMACSHA256=3xZAYzJRtYCQgkAF3iqElp1DhyKkPhq947j04NcDocQ%3D"

   The Protected Resources verifies the SWT, confirms the authorization
   contained in the SWT, and updates Jane's status.

<span class="h1"><a class="selflink" name="appendix-B.8" href="#appendix-B.8">B.8</a>.  Client Calls Refreshes Access Token</span>

   An hour passes by and music.example.com starts playing another new
   song for Jane.  The Client again makes an API call to
   status.example.com including the same HTTP Authorization header.
   Unlike previous calls where the status update was performed, the
   Protected Resource returns the following error response:

   HTTP 401 Unauthorized

   and the HTTP header:

   WWW-Authenticate: WRAP

   The Client determines it probably needs a new Access Token, retrieves
   the Refresh Token and makes an HTTPS POST to:

   https://auth.example.com/refresh_token

   including the Client Identifier, Client Secret and Refresh Token in



<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 37]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-38" id="page-38" href="#page-38" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   the message body as:

  wrap_client_id=music.example.com&amp;wrap_client_secret=7F2986DF2342914A&amp;w
  rap_refresh_token=MfdWTc%2Bv9MXhpc%2Bd%2FcsrKFMPfj1RySm6CzIjmTBGN6w%3D

   The Authorization Server looks up the data associated with the
   Refresh Token, determines music.example.com is still authorized to
   update Jane's status, and determines it will generate a new Access
   Token for the Client that expires in an hour.  The time is now 2010-
   01-02T04:15:23Z, which results in an Access Token expiry time of
   1262438123 seconds since 1970-01-01T0:0:0Z. The Authorization Server
   generates a new Access Token and returns it in the body of the
   message as:

  wrap_access_token=com.example.auth.scope=status_update&amp;com.example.aut
  h.account=Jane&amp;com.example.auth.client=music.example.com&amp;ExpiresOn=126
  2438123&amp;Audience=status.example.com&amp;Issuer=auth.example.com&amp;HMACSHA256
  =AT4TFChHgyylItEWAjK7MFRJuvUS3WLVzO%2F68gvIRQI%3D&amp;wrap_access_token_ex
  pires_in=3600

   The Client takes the new Access Token and uses it to successfully
   update Jane's status at status.example.com.


Authors' Addresses

   Dick Hardt (editor)
   Microsoft

   Email: dick.hardt@microsoft.com


   Allen Tom
   Yahoo!

   Email: atom@yahoo-inc.com


   Brian Eaton
   Google

   Email: beaton@google.com









<span class="grey">Hardt, et al.             Expires July 19, 2010                [Page 38]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-39" id="page-39" href="#page-39" class="invisible"> </a>
<span class="grey">Internet-Draft               OAuth WRAP 0.9                 January 2010</span>


   Yaron Goland
   Microsoft

   Email: yarong@microsoft.com















































Hardt, et al.             Expires July 19, 2010                [Page 39]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
