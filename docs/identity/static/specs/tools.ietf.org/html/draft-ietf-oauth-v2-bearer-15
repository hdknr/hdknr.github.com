<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-v2-bearer" />
<meta name="DC.Description.Abstract" content="This specification describes how to use bearer tokens in HTTP" />
<meta name="DC.Creator" content="Recordon, David" />
<meta name="DC.Creator" content="Hardt, Dick" />
<meta name="DC.Creator" content="Jones, Michael" />
<meta name="DC.Date.Issued" content="2012-07-12" />
<meta name="DC.Title" content="The OAuth 2.0 Authorization Framework: Bearer Token Usage" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-v2-bearer-15 - The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-v2-bearer-15.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-v2-bearer-15.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-v2-bearer-15.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-v2-bearer-15.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-v2-bearer' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-v2-bearer@tools.ietf.org?subject=draft-ietf-oauth-v2-bearer%20" title="Send email to the document authors">Email</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=draft-ietf-oauth-v2-bearer-15.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=draft-ietf-oauth-v2-bearer-15.txt" title="Side-by-side diff">Diff2</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-v2-bearer-15.txt" title="Run an idnits check of this document">Nits</a>] [<a href="https://datatracker.ietf.org/ipr/search/?option=document_search&document_search=draft-ietf-oauth-v2-bearer" title="IPR disclosures related to this document">IPR</a>]</span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-ietf-oauth-v2-bearer-00">00</a> <a href="./draft-ietf-oauth-v2-bearer-01">01</a> <a href="./draft-ietf-oauth-v2-bearer-02">02</a> <a href="./draft-ietf-oauth-v2-bearer-03">03</a> <a href="./draft-ietf-oauth-v2-bearer-04">04</a> <a href="./draft-ietf-oauth-v2-bearer-05">05</a> <a href="./draft-ietf-oauth-v2-bearer-06">06</a> <a href="./draft-ietf-oauth-v2-bearer-07">07</a> <a href="./draft-ietf-oauth-v2-bearer-08">08</a> <a href="./draft-ietf-oauth-v2-bearer-09">09</a> <a href="./draft-ietf-oauth-v2-bearer-10">10</a> <a href="./draft-ietf-oauth-v2-bearer-11">11</a>                           
          <a href="./draft-ietf-oauth-v2-bearer-12">12</a> <a href="./draft-ietf-oauth-v2-bearer-13">13</a> <a href="./draft-ietf-oauth-v2-bearer-14">14</a> <a href="./draft-ietf-oauth-v2-bearer-15">15</a> <a href="./draft-ietf-oauth-v2-bearer-16">16</a> <a href="./draft-ietf-oauth-v2-bearer-17">17</a> <a href="./draft-ietf-oauth-v2-bearer-18">18</a> <a href="./draft-ietf-oauth-v2-bearer-19">19</a> <a href="./draft-ietf-oauth-v2-bearer-20">20</a> <a href="./draft-ietf-oauth-v2-bearer-21">21</a> <a href="./draft-ietf-oauth-v2-bearer-22">22</a>                              </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Network Working Group                                           M. Jones
Internet-Draft                                                 Microsoft
Intended status: Standards Track                                D. Hardt
Expires: June 20, 2012                                       independent
                                                             D. Recordon
                                                                Facebook
                                                       December 18, 2011


          <span class="h1">The OAuth 2.0 Authorization Protocol: Bearer Tokens</span>
                     <span class="h1">draft-ietf-oauth-v2-bearer-15</span>

Abstract

   This specification describes how to use bearer tokens in HTTP
   requests to access OAuth 2.0 protected resources.  Any party in
   possession of a bearer token (a "bearer") can use it to get access to
   the associated resources (without demonstrating possession of a
   cryptographic key).  To prevent misuse, bearer tokens need to be
   protected from disclosure in storage and in transport.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on June 20, 2012.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-3">3</a>
     <a href="#section-1.1">1.1</a>.  Notational Conventions . . . . . . . . . . . . . . . . . .  <a href="#page-3">3</a>
     <a href="#section-1.2">1.2</a>.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-3">3</a>
     <a href="#section-1.3">1.3</a>.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
   <a href="#section-2">2</a>.  Authenticated Requests . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-2.1">2.1</a>.  Authorization Request Header Field . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-2.2">2.2</a>.  Form-Encoded Body Parameter  . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
     <a href="#section-2.3">2.3</a>.  URI Query Parameter  . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
   <a href="#section-3">3</a>.  The WWW-Authenticate Response Header Field . . . . . . . . . .  <a href="#page-7">7</a>
     <a href="#section-3.1">3.1</a>.  Error Codes  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
   <a href="#section-4">4</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-4.1">4.1</a>.  Security Threats . . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-4.2">4.2</a>.  Threat Mitigation  . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-4.3">4.3</a>.  Summary of Recommendations . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
   <a href="#section-5">5</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-5.1">5.1</a>.  OAuth Access Token Type Registration . . . . . . . . . . . <a href="#page-13">13</a>
       <a href="#section-5.1.1">5.1.1</a>.  The "Bearer" OAuth Access Token Type . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-5.2">5.2</a>.  Authentication Scheme Registration . . . . . . . . . . . . <a href="#page-14">14</a>
       <a href="#section-5.2.1">5.2.1</a>.  The "Bearer" Authentication Scheme . . . . . . . . . . <a href="#page-14">14</a>
   <a href="#section-6">6</a>.  References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-6.1">6.1</a>.  Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-6.2">6.2</a>.  Informative References . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
   <a href="#appendix-A">Appendix A</a>.  Acknowledgements  . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
   <a href="#appendix-B">Appendix B</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-22">22</a>


















<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   OAuth enables clients to access protected resources by obtaining an
   access token, which is defined in OAuth 2.0 Authorization
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] as "a string representing an access authorization
   issued to the client", rather than using the resource owner's
   credentials directly.

   Tokens are issued to clients by an authorization server with the
   approval of the resource owner.  The client uses the access token to
   access the protected resources hosted by the resource server.  This
   specification describes how to make protected resource requests when
   the OAuth access token is a bearer token.

   This specification defines the use of bearer tokens over HTTP/1.1
   [<a href="#ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>] using TLS [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>] to access
   protected resources.  TLS is mandatory to implement and use with this
   specification; other specifications may extend this specification for
   use with other transport protocols.  While designed for use with
   access tokens resulting from OAuth 2.0 Authorization
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] flows to access OAuth protected resources, this
   specification actually defines a general HTTP authorization method
   that can be used with bearer tokens from any source to access any
   resources protected by those bearer tokens.

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Notational Conventions</span>

   The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   document are to be interpreted as described in Key words for use in
   RFCs to Indicate Requirement Levels [<a href="./rfc2119" title="S.">RFC2119</a>].

   This document uses the Augmented Backus-Naur Form (ABNF) notation of
   HTTP/1.1, Part 1 [<a href="#ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>], which is based upon
   the Augmented Backus-Naur Form (ABNF) [<a href="./rfc5234" title="&quot;Augmented BNF for Syntax Specifications: ABNF&quot;">RFC5234</a>] notation.
   Additionally, the following rules are included from HTTP/1.1, Part 7
   [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>]: b64token, auth-param, and realm; from
   HTTP/1.1, Part 1 [<a href="#ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>]: quoted-string; and
   from Uniform Resource Identifier (URI) [<a href="./rfc3986" title="&quot;Uniform Resource Identifier (URI): Generic Syntax&quot;">RFC3986</a>]: URI-Reference.

   Unless otherwise noted, all the protocol parameter names and values
   are case sensitive.

<span class="h3"><a class="selflink" name="section-1.2" href="#section-1.2">1.2</a>.  Terminology</span>







<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   Bearer Token
      A security token with the property that any party in possession of
      the token (a "bearer") can use the token in any way that any other
      party in possession of it can.  Using a bearer token does not
      require a bearer to prove possession of cryptographic key material
      (proof-of-possession).

   All other terms are as defined in OAuth 2.0 Authorization
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].

<span class="h3"><a class="selflink" name="section-1.3" href="#section-1.3">1.3</a>.  Overview</span>

   OAuth provides a method for clients to access a protected resource on
   behalf of a resource owner.  In the general case, before a client can
   access a protected resource, it must first obtain an authorization
   grant from the resource owner and then exchange the authorization
   grant for an access token.  The access token represents the grant's
   scope, duration, and other attributes granted by the authorization
   grant.  The client accesses the protected resource by presenting the
   access token to the resource server.  In some cases, a client can
   directly present its own credentials to an authorization server to
   obtain an access token without having to first obtain an
   authorization grant from a resource owner.

   The access token provides an abstraction, replacing different
   authorization constructs (e.g. username and password, assertion) for
   a single token understood by the resource server.  This abstraction
   enables issuing access tokens valid for a short time period, as well
   as removing the resource server's need to understand a wide range of
   authentication schemes.





















<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   +--------+                               +---------------+
   |        |--(A)- Authorization Request -&gt;|   Resource    |
   |        |                               |     Owner     |
   |        |&lt;-(B)-- Authorization Grant ---|               |
   |        |                               +---------------+
   |        |
   |        |        Authorization Grant &amp;  +---------------+
   |        |--(C)--- Client Credentials --&gt;| Authorization |
   | Client |                               |     Server    |
   |        |&lt;-(D)----- Access Token -------|               |
   |        |                               +---------------+
   |        |
   |        |                               +---------------+
   |        |--(E)----- Access Token ------&gt;|    Resource   |
   |        |                               |     Server    |
   |        |&lt;-(F)--- Protected Resource ---|               |
   +--------+                               +---------------+

                     Figure 1: Abstract Protocol Flow

   The abstract flow illustrated in Figure 1 describes the overall OAuth
   2.0 protocol architecture.  The following steps are specified within
   this document:

      E) The client makes a protected resource request to the resource
      server by presenting the access token.

      F) The resource server validates the access token, and if valid,
      serves the request.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Authenticated Requests</span>

   This section defines three methods of sending bearer access tokens in
   resource requests to resource servers.  Clients MUST NOT use more
   than one method to transmit the token in each request.

<span class="h3"><a class="selflink" name="section-2.1" href="#section-2.1">2.1</a>.  Authorization Request Header Field</span>

   When sending the access token in the "Authorization" request header
   field defined by HTTP/1.1, Part 7 [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>], the
   client uses the "Bearer" authentication scheme to transmit the access
   token.








<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   For example:

   GET /resource HTTP/1.1
   Host: server.example.com
   Authorization: Bearer vF9dft4qmT

   The "Authorization" header field uses the framework defined by
   HTTP/1.1, Part 7 [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>] as follows:

   credentials = "Bearer" 1*SP b64token

   The b64token syntax was chosen over the alternative #auth-param
   syntax also defined by HTTP/1.1, Part 7 [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>]
   both for simplicity and for compatibility with existing
   implementations.  If additional parameters are needed in the future,
   a different scheme would need to be defined.

   Clients SHOULD make authenticated requests with a bearer token using
   the "Authorization" request header field with the "Bearer" HTTP
   authorization scheme.  Resource servers MUST support this method.

<span class="h3"><a class="selflink" name="section-2.2" href="#section-2.2">2.2</a>.  Form-Encoded Body Parameter</span>

   When sending the access token in the HTTP request entity-body, the
   client adds the access token to the request body using the
   "access_token" parameter.  The client MUST NOT use this method unless
   all of the following conditions are met:

   o  The HTTP request entity-body is single-part.

   o  The entity-body follows the encoding requirements of the
      "application/x-www-form-urlencoded" content-type as defined by
      HTML 4.01 [<a href="#ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>].

   o  The HTTP request entity-header includes the "Content-Type" header
      field set to "application/x-www-form-urlencoded".

   o  The HTTP request method is one for which the request body has
      defined semantics.  In particular, this means that the "GET"
      method MUST NOT be used.

   o  The content to be encoded in the entity-body MUST consist entirely
      of ASCII characters.

   The entity-body MAY include other request-specific parameters, in
   which case, the "access_token" parameter MUST be properly separated
   from the request-specific parameters using "&amp;" character(s) (ASCII
   code 38).



<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   For example, the client makes the following HTTP request using
   transport-layer security:

   POST /resource HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   access_token=vF9dft4qmT

   The "application/x-www-form-urlencoded" method SHOULD NOT be used
   except in application contexts where participating browsers do not
   have access to the "Authorization" request header field.  Resource
   servers MAY support this method.

<span class="h3"><a class="selflink" name="section-2.3" href="#section-2.3">2.3</a>.  URI Query Parameter</span>

   When sending the access token in the HTTP request URI, the client
   adds the access token to the request URI query component as defined
   by Uniform Resource Identifier (URI) [<a href="./rfc3986" title="&quot;Uniform Resource Identifier (URI): Generic Syntax&quot;">RFC3986</a>] using the
   "access_token" parameter.

   For example, the client makes the following HTTP request using
   transport-layer security:

   GET /resource?access_token=vF9dft4qmT HTTP/1.1
   Host: server.example.com

   The HTTP request URI query can include other request-specific
   parameters, in which case, the "access_token" parameter MUST be
   properly separated from the request-specific parameters using "&amp;"
   character(s) (ASCII code 38).

   For example:

   https://server.example.com/resource?x=y&amp;access_token=vF9dft4qmT&amp;p=q

   Because of the security weaknesses associated with the URI method
   (see <a href="#section-4">Section 4</a>), including the high likelihood that the URL
   containing the access token will be logged, it SHOULD NOT be used
   unless it is impossible to transport the access token in the
   "Authorization" request header field or the HTTP request entity-body.
   Resource servers MAY support this method.


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  The WWW-Authenticate Response Header Field</span>

   If the protected resource request does not include authentication
   credentials or does not contain an access token that enables access



<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   to the protected resource, the resource server MUST include the HTTP
   "WWW-Authenticate" response header field; it MAY include it in
   response to other conditions as well.  The "WWW-Authenticate" header
   field uses the framework defined by HTTP/1.1, Part 7
   [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>] as follows:

   challenge       = "Bearer" [ 1*SP 1#param ]

   param           = realm / scope /
                     error / error-desc / error-uri /
                     auth-param

   scope           = "scope" "=" quoted-string
   error           = "error" "=" quoted-string
   error-desc      = "error_description" "=" quoted-string
   error-uri       = "error_uri" "=" quoted-string

   A "realm" attribute MAY be included to indicate the scope of
   protection in the manner described in HTTP/1.1, Part 7
   [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>].  The "realm" attribute MUST NOT appear
   more than once.  The "realm" value is intended for programmatic use
   and is not meant to be displayed to end users.

   The "scope" attribute is a space-delimited list of scope values
   indicating the required scope of the access token for accessing the
   requested resource.  In some cases, the "scope" value will be used
   when requesting a new access token with sufficient scope of access to
   utilize the protected resource.  The "scope" attribute MUST NOT
   appear more than once.  The "scope" value is intended for
   programmatic use and is not meant to be displayed to end users.

   If the protected resource request included an access token and failed
   authentication, the resource server SHOULD include the "error"
   attribute to provide the client with the reason why the access
   request was declined.  The parameter value is described in
   <a href="#section-3.1">Section 3.1</a>.  In addition, the resource server MAY include the
   "error_description" attribute to provide developers a human-readable
   explanation that is not meant to be displayed to end users.  It also
   MAY include the "error_uri" attribute with an absolute URI
   identifying a human-readable web page explaining the error.  The
   "error", "error_description", and "error_uri" attributes MUST NOT
   appear more than once.

   Producers of "scope" strings MUST NOT use characters outside the set
   %x21 / %x23-5B / %x5D-7E for representing the scope values and %x20
   for the delimiter.  Producers of "error" and "error_description"
   strings MUST NOT use characters outside the set %x20-21 / %x23-5B /
   %x5D-7E for representing these values.  Producers of "error-uri"



<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   strings MUST NOT use characters outside the set %x21 / %x23-5B /
   %x5D-7E for representing these values.  Furthermore, "error-uri"
   strings MUST conform to the URI-Reference syntax.  In all these
   cases, no character quoting will occur, as senders are prohibited
   from using the %5C ('\') character.

   For example, in response to a protected resource request without
   authentication:

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer realm="example"

   And in response to a protected resource request with an
   authentication attempt using an expired access token:

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer realm="example",
                     error="invalid_token",
                     error_description="The access token expired"

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  Error Codes</span>

   When a request fails, the resource server responds using the
   appropriate HTTP status code (typically, 400, 401, 403, or 405), and
   includes one of the following error codes in the response:

   invalid_request
         The request is missing a required parameter, includes an
         unsupported parameter or parameter value, repeats the same
         parameter, uses more than one method for including an access
         token, or is otherwise malformed.  The resource server SHOULD
         respond with the HTTP 400 (Bad Request) status code.

   invalid_token
         The access token provided is expired, revoked, malformed, or
         invalid for other reasons.  The resource SHOULD respond with
         the HTTP 401 (Unauthorized) status code.  The client MAY
         request a new access token and retry the protected resource
         request.

   insufficient_scope
         The request requires higher privileges than provided by the
         access token.  The resource server SHOULD respond with the HTTP
         403 (Forbidden) status code and MAY include the "scope"
         attribute with the scope necessary to access the protected
         resource.

   If the request lacks any authentication information (i.e. the client



<span class="grey">Jones, et al.             Expires June 20, 2012                 [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   was unaware authentication is necessary or attempted using an
   unsupported authentication method), the resource server SHOULD NOT
   include an error code or other error information.

   For example:

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer realm="example"


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Security Considerations</span>

   This section describes the relevant security threats regarding token
   handling when using bearer tokens and describes how to mitigate these
   threats.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Security Threats</span>

   The following list presents several common threats against protocols
   utilizing some form of tokens.  This list of threats is based on NIST
   Special Publication 800-63 [<a href="#ref-NIST800-63">NIST800-63</a>].  Since this document builds
   on the OAuth 2.0 specification, we exclude a discussion of threats
   that are described there or in related documents.

   Token manufacture/modification:  An attacker may generate a bogus
      token or modify the token contents (such as the authentication or
      attribute statements) of an existing token, causing the resource
      server to grant inappropriate access to the client.  For example,
      an attacker may modify the token to extend the validity period; a
      malicious client may modify the assertion to gain access to
      information that they should not be able to view.

   Token disclosure:  Tokens may contain authentication and attribute
      statements that include sensitive information.

   Token redirect:  An attacker uses a token generated for consumption
      by one resource server to gain access to a different resource
      server that mistakenly believes the token to be for it.

   Token replay:  An attacker attempts to use a token that has already
      been used with that resource server in the past.

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Threat Mitigation</span>

   A large range of threats can be mitigated by protecting the contents
   of the token by using a digital signature or a Message Authentication
   Code (MAC).  Alternatively, a bearer token can contain a reference to
   authorization information, rather than encoding the information



<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   directly.  Such references MUST be infeasible for an attacker to
   guess; using a reference may require an extra interaction between a
   server and the token issuer to resolve the reference to the
   authorization information.  The mechanics of such an interaction are
   not defined by this specification.

   This document does not specify the encoding or the contents of the
   token; hence detailed recommendations about the means of guaranteeing
   token integrity protection are outside the scope of this document.
   The token integrity protection MUST be sufficient to prevent the
   token from being modified.

   To deal with token redirect, it is important for the authorization
   server to include the identity of the intended recipients (the
   audience), typically a single resource server (or a list of resource
   servers), in the token.  Restricting the use of the token to a
   specific scope is also RECOMMENDED.

   The authorization server MUST implement TLS.  Which version(s) ought
   to be implemented will vary over time, and depend on the widespread
   deployment and known security vulnerabilities at the time of
   implementation.  At the time of this writing, TLS version 1.2
   [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>] is the most recent version, but has very limited actual
   deployment, and might not be readily available in implementation
   toolkits.  TLS version 1.0 [<a href="./rfc2246" title="&quot;The TLS Protocol Version 1.0&quot;">RFC2246</a>] is the most widely deployed
   version, and will give the broadest interoperability.

   To protect against token disclosure, confidentiality protection MUST
   be applied using TLS [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>] with a ciphersuite that provides
   confidentiality and integrity protection.  This requires that the
   communication interaction between the client and the authorization
   server, as well as the interaction between the client and the
   resource server, utilize confidentiality and integrity protection.
   Since TLS is mandatory to implement and to use with this
   specification, it is the preferred approach for preventing token
   disclosure via the communication channel.  For those cases where the
   client is prevented from observing the contents of the token, token
   encryption MUST be applied in addition to the usage of TLS
   protection.  As a further defense against token disclosure, the
   client MUST validate the TLS certificate chain when making requests
   to protected resources.

   Cookies are typically transmitted in the clear.  Thus, any
   information contained in them is at risk of disclosure.  Therefore,
   bearer tokens MUST NOT be stored in cookies that can be sent in the
   clear.

   In some deployments, including those utilizing load balancers, the



<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   TLS connection to the resource server terminates prior to the actual
   server that provides the resource.  This could leave the token
   unprotected between the front end server where the TLS connection
   terminates and the back end server that provides the resource.  In
   such deployments, sufficient measures MUST be employed to ensure
   confidentiality of the token between the front end and back end
   servers; encryption of the token is one possible such measure.

   To deal with token capture and replay, the following recommendations
   are made: First, the lifetime of the token MUST be limited; one means
   of achieving this is by putting a validity time field inside the
   protected part of the token.  Note that using short-lived (one hour
   or less) tokens reduces the impact of them being leaked.  Second,
   confidentiality protection of the exchanges between the client and
   the authorization server and between the client and the resource
   server MUST be applied.  As a consequence, no eavesdropper along the
   communication path is able to observe the token exchange.
   Consequently, such an on-path adversary cannot replay the token.
   Furthermore, when presenting the token to a resource server, the
   client MUST verify the identity of that resource server, as per
   Representation and Verification of Domain-Based Application Service
   Identity within Internet Public Key Infrastructure Using X.509 (PKIX)
   Certificates in the Context of Transport Layer Security (TLS)
   [<a href="./rfc6125" title="&quot;Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)&quot;">RFC6125</a>].  Note that the client MUST validate the TLS certificate
   chain when making these requests to protected resources.  Presenting
   the token to an unauthenticated and unauthorized resource server or
   failing to validate the certificate chain will allow adversaries to
   steal the token and gain unauthorized access to protected resources.

<span class="h3"><a class="selflink" name="section-4.3" href="#section-4.3">4.3</a>.  Summary of Recommendations</span>

   Safeguard bearer tokens:  Client implementations MUST ensure that
      bearer tokens are not leaked to unintended parties, as they will
      be able to use them to gain access to protected resources.  This
      is the primary security consideration when using bearer tokens and
      underlies all the more specific recommendations that follow.

   Validate SSL certificate chains:  The client MUST validate the TLS
      certificate chain when making requests to protected resources.
      Failing to do so may enable DNS hijacking attacks to steal the
      token and gain unintended access.

   Always use TLS (https):  Clients MUST always use TLS [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>]
      (https) or equivalent transport security when making requests with
      bearer tokens.  Failing to do so exposes the token to numerous
      attacks that could give attackers unintended access.





<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   Don't store bearer tokens in cookies:  Implementations MUST NOT store
      bearer tokens within cookies that can be sent in the clear (which
      is the default transmission mode for cookies).  Implementations
      that do store bearer tokens in cookies MUST take precautions
      against cross site request forgery.

   Issue short-lived bearer tokens:  Token servers SHOULD issue short-
      lived (one hour or less) bearer tokens, particularly when issuing
      tokens to clients that run within a web browser or other
      environments where information leakage may occur.  Using short-
      lived bearer tokens can reduce the impact of them being leaked.

   Issue scoped bearer tokens:  Token servers SHOULD issue bearer tokens
      that contain an audience restriction, scoping their use to the
      intended relying party or set of relying parties.

   Don't pass bearer tokens in page URLs:  Bearer tokens SHOULD NOT be
      passed in page URLs (for example as query string parameters).
      Instead, bearer tokens SHOULD be passed in HTTP message headers or
      message bodies for which confidentiality measures are taken.
      Browsers, web servers, and other software may not adequately
      secure URLs in the browser history, web server logs, and other
      data structures.  If bearer tokens are passed in page URLs,
      attackers might be able to steal them from the history data, logs,
      or other unsecured locations.


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  IANA Considerations</span>

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  OAuth Access Token Type Registration</span>

   This specification registers the following access token type in the
   OAuth Access Token Type Registry.

<span class="h4"><a class="selflink" name="section-5.1.1" href="#section-5.1.1">5.1.1</a>.  The "Bearer" OAuth Access Token Type</span>

   Type name:
      Bearer

   Additional Token Endpoint Response Parameters:
      (none)

   HTTP Authentication Scheme(s):
      Bearer







<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   Change controller:
      IETF

   Specification document(s):
      [[ this document ]]

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  Authentication Scheme Registration</span>

   This specification registers the following authentication scheme in
   the Authentication Scheme Registry defined in HTTP/1.1, Part 7
   [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>].

<span class="h4"><a class="selflink" name="section-5.2.1" href="#section-5.2.1">5.2.1</a>.  The "Bearer" Authentication Scheme</span>

   Authentication Scheme Name:
      Bearer

   Pointer to specification text:
      [[ this document ]]

   Notes (optional):
      (none)


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  References</span>

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-httpbis-p1-messaging" id="ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>]
              Fielding, R., Gettys, J., Mogul, J., Nielsen, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., and
              J. Reschke, "HTTP/1.1, part 1: URIs, Connections, and
              Message Parsing", <a href="./draft-ietf-httpbis-p1-messaging-17">draft-ietf-httpbis-p1-messaging-17</a> (work
              in progress), October 2011.

   [<a name="ref-I-D.ietf-httpbis-p7-auth" id="ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>]
              Fielding, R., Gettys, J., Mogul, J., Nielsen, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., and
              J. Reschke, "HTTP/1.1, part 7: Authentication",
              <a href="./draft-ietf-httpbis-p7-auth-17">draft-ietf-httpbis-p7-auth-17</a> (work in progress),
              October 2011.

   [<a name="ref-I-D.ietf-oauth-v2" id="ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]
              Hammer-Lahav, E., Recordon, D., and D. Hardt, "The OAuth
              2.0 Authorization Protocol", <a href="./draft-ietf-oauth-v2-22">draft-ietf-oauth-v2-22</a> (work
              in progress), September 2011.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate



<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

   [<a name="ref-RFC2246" id="ref-RFC2246">RFC2246</a>]  Dierks, T. and C. Allen, "The TLS Protocol Version 1.0",
              <a href="./rfc2246">RFC 2246</a>, January 1999.

   [<a name="ref-RFC3986" id="ref-RFC3986">RFC3986</a>]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              <a href="./rfc3986">RFC 3986</a>, January 2005.

   [<a name="ref-RFC5234" id="ref-RFC5234">RFC5234</a>]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, <a href="./rfc5234">RFC 5234</a>, January 2008.

   [<a name="ref-RFC5246" id="ref-RFC5246">RFC5246</a>]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", <a href="./rfc5246">RFC 5246</a>, August 2008.

   [<a name="ref-RFC6125" id="ref-RFC6125">RFC6125</a>]  Saint-Andre, P. and J. Hodges, "Representation and
              Verification of Domain-Based Application Service Identity
              within Internet Public Key Infrastructure Using X.509
              (PKIX) Certificates in the Context of Transport Layer
              Security (TLS)", <a href="./rfc6125">RFC 6125</a>, March 2011.

   [<a name="ref-W3C.REC-html401-19991224" id="ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>]
              Raggett, D., Hors, A., and I. Jacobs, "HTML 4.01
              Specification", World Wide Web Consortium
              Recommendation REC-html401-19991224, December 1999,
              &lt;<a href="http://www.w3.org/TR/1999/REC-html401-19991224">http://www.w3.org/TR/1999/REC-html401-19991224</a>&gt;.

<span class="h3"><a class="selflink" name="section-6.2" href="#section-6.2">6.2</a>.  Informative References</span>

   [<a name="ref-NIST800-63" id="ref-NIST800-63">NIST800-63</a>]
              Burr, W., Dodson, D., Perlner, R., Polk, T., Gupta, S.,
              and E. Nabbus, "NIST Special Publication 800-63-1,
              INFORMATION SECURITY", December 2008.

   [<a name="ref-RFC2616" id="ref-RFC2616">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", <a href="./rfc2616">RFC 2616</a>, June 1999.

   [<a name="ref-RFC2617" id="ref-RFC2617">RFC2617</a>]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              <a href="./rfc2617">RFC 2617</a>, June 1999.


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Acknowledgements</span>

   The following people contributed to preliminary versions of this
   document: Blaine Cook (BT), Brian Eaton (Google), Yaron Y. Goland



<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   (Microsoft), Brent Goldman (Facebook), Raffi Krikorian (Twitter),
   Luke Shepard (Facebook), and Allen Tom (Yahoo!).  The content and
   concepts within are a product of the OAuth community, the WRAP
   community, and the OAuth Working Group.

   The OAuth Working Group has dozens of very active contributors who
   proposed ideas and wording for this document, including: Michael
   Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, John Bradley,
   Brian Campbell, Leah Culver, Bill de hOra, Brian Ellin, Igor
   Faynberg, Stephen Farrell, George Fletcher, Tim Freeman, Evan
   Gilbert, Yaron Y. Goland, Thomas Hardjono, Justin Hart, Phil Hunt,
   John Kemp, Eran Hammer-Lahav, Chasen Le Hara, Barry Leiba, Michael B.
   Jones, Torsten Lodderstedt, Eve Maler, James Manger, Laurence Miao,
   William J. Mills, Chuck Mortimore, Anthony Nadalin, Julian Reschke,
   Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob Sayre, Marius
   Scurtescu, Naitik Shah, Justin Smith, Jeremy Suriel, Christian
   Stuebner, Paul Tarjan, Hannes Tschofenig, Franklin Tse, and Shane
   Weeden.


<span class="h2"><a class="selflink" name="appendix-B" href="#appendix-B">Appendix B</a>.  Document History</span>

   [[ to be removed by the RFC editor before publication as an RFC ]]

   -15

   o  Clarified that form-encoded content must consist entirely of ASCII
      characters.

   o  Added TLS version requirements.

   o  Applied editorial improvements suggested by Mark Nottingham during
      the APPS area review.

   -14

   o  Changes made in response to review comments by Security Area
      Director Stephen Farrell.  Specifically:

   o  Strengthened warnings about passing an access token as a query
      parameter and more precisely described the limitations placed upon
      the use of this method.

   o  Clarified that the "realm" attribute MAY included to indicate the
      scope of protection in the manner described in HTTP/1.1, Part 7
      [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>].





<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   o  Normatively stated that "the token integrity protection MUST be
      sufficient to prevent the token from being modified".

   o  Added statement that "TLS is mandatory to implement and use with
      this specification" to the introduction.

   o  Stated that TLS MUST be used with "a ciphersuite that provides
      confidentiality and integrity protection".

   o  Added "As a further defense against token disclosure, the client
      MUST validate the TLS certificate chain when making requests to
      protected resources" to the Threat Mitigation section.

   o  Clarified that putting a validity time field inside the protected
      part of the token is one means, but not the only means, of
      limiting the lifetime of the token.

   o  Dropped the confusing phrase "for instance, through the use of
      TLS" from the sentence about confidentiality protection of the
      exchanges.

   o  Reference <a href="./rfc6125">RFC 6125</a> for identity verification, rather than <a href="./rfc2818">RFC</a>
      <a href="./rfc2818">2818</a>.

   o  Stated that the token MUST be protected between front end and back
      end servers when the TLS connection terminates at a front end
      server that is distinct from the actual server that provides the
      resource.

   o  Stated that bearer tokens MUST not be stored in cookies that can
      be sent in the clear in the Threat Mitigation section.

   o  Replaced sole remaining reference to [<a href="./rfc2616" title="&quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;">RFC2616</a>] with HTTPbis
      [<a href="#ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>] reference.

   o  Replaced all references where the reference is used as if it were
      part of the sentence (such as "defined by [I-D.whatever]") with
      ones where the specification name is used, followed by the
      reference (such as "defined by Whatever [I-D.whatever]").

   o  Other on-normative editorial improvements.

   -13

   o  At the request of Hannes Tschofenig, made ABNF changes to make it
      clear that no special WWW-Authenticate response header field
      parsers are needed.  The "scope", "error-description", and
      "error-uri" parameters are all now defined as quoted-string in the



<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


      ABNF (as "error" already was).  Restrictions on these values that
      were formerly described in the ABNFs are now described in
      normative text instead.

   -12

   o  Made non-normative editorial changes that Hannes Tschofenig
      requested be applied prior to forwarding the specification to the
      IESG.

   o  Added rationale for the choice of the b64token syntax.

   o  Added rationale stating that receivers are free to parse the
      "scope" attribute using a standard quoted-string parser, since it
      will correctly process all legal "scope" values.

   o  Added additional active working group contributors to the
      Acknowledgements section.

   -11

   o  Replaced uses of &lt;"&gt; with DQUOTE to pass ABNF syntax check.

   -10

   o  Removed the #auth-param option from Authorization header syntax
      (leaving only the b64token syntax).

   o  Restricted the "scope" value character set to %x21 / %x23-5B /
      %x5D-7E (printable ASCII characters excluding double-quote and
      backslash).  Indicated that scope is intended for programmatic use
      and is not meant to be displayed to end users.

   o  Restricted the character set for "error_description" strings to SP
      / VCHAR and indicated that they are not meant to be displayed to
      end users.

   o  Included more description in the Abstract, since Hannes Tschofenig
      indicated that the RFC editor would require this.

   o  Changed "Access Grant" to "Authorization Grant", as was done in
      the core spec.

   o  Simplified the introduction to the Authenticated Requests section.

   -09





<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   o  Incorporated working group last call comments.  Specific changes
      were:

   o  Use definitions from [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>] rather than
      [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>].

   o  Update credentials definition to conform to
      [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>].

   o  Further clarified that query parameters may occur in any order.

   o  Specify that error_description is UTF-8 encoded (matching the core
      specification).

   o  Registered "Bearer" Authentication Scheme in Authentication Scheme
      Registry defined by [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>].

   o  Updated references to oauth-v2, httpbis-p1-messaging, and httpbis-
      p7-auth drafts.

   o  Other wording improvements not introducing normative changes.

   -08

   o  Updated references to oauth-v2 and HTTPbis drafts.

   -07

   o  Added missing comma in error response example.

   -06

   o  Changed parameter name "bearer_token" to "access_token", per
      working group consensus.

   o  Changed HTTP status code for "invalid_request" error code from
      HTTP 401 (Unauthorized) back to HTTP 400 (Bad Request), per input
      from HTTP working group experts.

   -05

   o  Removed OAuth Errors Registry, per design team input.

   o  Changed HTTP status code for "invalid_request" error code from
      HTTP 400 (Bad Request) to HTTP 401 (Unauthorized) to match HTTP
      usage [[ change pending working group consensus ]].





<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   o  Added missing quotation marks in error-uri definition.

   o  Added note to add language and encoding information to
      error_description if the core specification does.

   o  Explicitly reference the Augmented Backus-Naur Form (ABNF) defined
      in [<a href="./rfc5234" title="&quot;Augmented BNF for Syntax Specifications: ABNF&quot;">RFC5234</a>].

   o  Use auth-param instead of repeating its definition, which is (
      token "=" ( token / quoted-string ) ).

   o  Clarify security considerations about including an audience
      restriction in the token and include a recommendation to issue
      scoped bearer tokens in the summary of recommendations.

   -04

   o  Edits responding to working group last call feedback on -03.
      Specific edits enumerated below.

   o  Added Bearer Token definition in Terminology section.

   o  Changed parameter name "oauth_token" to "bearer_token".

   o  Added realm parameter to "WWW-Authenticate" response to comply
      with [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>].

   o  Removed "[ RWS 1#auth-param ]" from "credentials" definition since
      it did not comply with the ABNF in [<a href="#ref-I-D.ietf-httpbis-p7-auth">I-D.ietf-httpbis-p7-auth</a>].

   o  Removed restriction that the "bearer_token" (formerly
      "oauth_token") parameter be the last parameter in the entity-body
      and the HTTP request URI query.

   o  Do not require WWW-Authenticate Response in a reply to a malformed
      request, as an HTTP 400 Bad Request response without a WWW-
      Authenticate header is likely the right response in some cases of
      malformed requests.

   o  Removed OAuth Parameters registry extension.

   o  Numerous editorial improvements suggested by working group
      members.

   -03

   o  Restored the WWW-Authenticate response header functionality
      deleted from the framework specification in draft 12 based upon



<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


      the specification text from draft 11.

   o  Augmented the OAuth Parameters registry by adding two additional
      parameter usage locations: "resource request" and "resource
      response".

   o  Registered the "oauth_token" OAuth parameter with usage location
      "resource request".

   o  Registered the "error" OAuth parameter.

   o  Created the OAuth Error registry and registered errors.

   o  Changed the "OAuth2" OAuth access token type name to "Bearer".

   -02

   o  Incorporated feedback received on draft 01.  Most changes were to
      the security considerations section.  No normative changes were
      made.  Specific changes included:

   o  Changed terminology from "token reuse" to "token capture and
      replay".

   o  Removed sentence "Encrypting the token contents is another
      alternative" from the security considerations since it was
      redundant and potentially confusing.

   o  Corrected some references to "resource server" to be
      "authorization server" in the security considerations.

   o  Generalized security considerations language about obtaining
      consent of the resource owner.

   o  Broadened scope of security considerations description for
      recommendation "Don't pass bearer tokens in page URLs".

   o  Removed unused reference to OAuth 1.0.

   o  Updated reference to framework specification and updated David
      Recordon's e-mail address.

   o  Removed security considerations text on authenticating clients.

   o  Registered the "OAuth2" OAuth access token type and "oauth_token"
      parameter.

   -01



<span class="grey">Jones, et al.             Expires June 20, 2012                [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft           OAuth 2.0 Bearer Tokens           December 2011</span>


   o  First public draft, which incorporates feedback received on -00
      including enhanced Security Considerations content.  This version
      is intended to accompany OAuth 2.0 draft 11.

   -00

   o  Initial draft based on preliminary version of OAuth 2.0 draft 11.


Authors' Addresses

   Michael B. Jones
   Microsoft

   Email: mbj@microsoft.com
   URI:   <a href="http://self-issued.info/">http://self-issued.info/</a>


   Dick Hardt
   independent

   Email: dick.hardt@gmail.com
   URI:   <a href="http://dickhardt.org/">http://dickhardt.org/</a>


   David Recordon
   Facebook

   Email: dr@fb.com
   URI:   <a href="http://www.davidrecordon.com/">http://www.davidrecordon.com/</a>





















Jones, et al.             Expires June 20, 2012                [Page 22]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
