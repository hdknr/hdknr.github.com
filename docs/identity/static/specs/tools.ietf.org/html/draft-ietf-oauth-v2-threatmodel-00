<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-v2-threatmodel" />
<meta name="DC.Description.Abstract" content="This document gives additional security considerations for OAuth,\nbeyond those in the OAuth specification, based on a comprehensive\nthreat model for the OAuth 2.0 Protocol." />
<meta name="DC.Creator" content="Lodderstedt, Torsten" />
<meta name="DC.Creator" content="McGloin, Mark" />
<meta name="DC.Creator" content="Hunt, Phil" />
<meta name="DC.Date.Issued" content="2012-06-27" />
<meta name="DC.Title" content="OAuth 2.0 Threat Model and Security Considerations" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-v2-threatmodel-00 - OAuth 2.0 Threat Model and Security Considerations</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-v2-threatmodel-00.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-v2-threatmodel-00.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-v2-threatmodel-00.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-v2-threatmodel-00.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-v2-threatmodel' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-v2-threatmodel@tools.ietf.org?subject=draft-ietf-oauth-v2-threatmodel%20" title="Send email to the document authors">Email</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-v2-threatmodel-00.txt" title="Run an idnits check of this document">Nits</a>]                 </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-ietf-oauth-v2-threatmodel-00">00</a> <a href="./draft-ietf-oauth-v2-threatmodel-01">01</a> <a href="./draft-ietf-oauth-v2-threatmodel-02">02</a> <a href="./draft-ietf-oauth-v2-threatmodel-03">03</a> <a href="./draft-ietf-oauth-v2-threatmodel-04">04</a> <a href="./draft-ietf-oauth-v2-threatmodel-05">05</a> <a href="./draft-ietf-oauth-v2-threatmodel-06">06</a>                                          </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Web Authorization Protocol (oauth)                   T. Lodderstedt, Ed.
Internet-Draft                                       Deutsche Telekom AG
Intended status: Standards Track                              M. McGloin
Expires: January 2, 2012                                             IBM
                                                                 P. Hunt
                                                      Oracle Corporation
                                                           July 01, 2011


           <span class="h1">OAuth 2.0 Threat Model and Security Considerations</span>
                   <span class="h1">draft-ietf-oauth-v2-threatmodel-00</span>

Abstract

   This document gives security considerations based on a comprehensive
   threat model for the OAuth 2.0 Protocol.

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <a href="./rfc2119">RFC 2119</a> [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 2, 2012.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
   <a href="#section-2">2</a>.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
     <a href="#section-2.1">2.1</a>.  Scope  . . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
     <a href="#section-2.2">2.2</a>.  Attack Assumptions . . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
     <a href="#section-2.3">2.3</a>.  Architectural assumptions  . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
       <a href="#section-2.3.1">2.3.1</a>.  Authorization Servers  . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-2.3.2">2.3.2</a>.  Resource Server  . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-2.3.3">2.3.3</a>.  Client . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
         <a href="#section-2.3.3.1">2.3.3.1</a>.  Web Application  . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
         <a href="#section-2.3.3.2">2.3.3.2</a>.  Native Applications  . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
         <a href="#section-2.3.3.3">2.3.3.3</a>.  User-agent-based Applications  . . . . . . . . . . <a href="#page-10">10</a>
         <a href="#section-2.3.3.4">2.3.3.4</a>.  Autonomous . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
   <a href="#section-3">3</a>.  Security Features  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-3.1">3.1</a>.  Tokens . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
       <a href="#section-3.1.1">3.1.1</a>.  Scope  . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
       <a href="#section-3.1.2">3.1.2</a>.  Expires_In . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-3.2">3.2</a>.  Access Token . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-3.3">3.3</a>.  Refresh Token  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-3.4">3.4</a>.  Authorization Code . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-3.5">3.5</a>.  Redirect-URI . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-3.6">3.6</a>.  State parameter  . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-3.7">3.7</a>.  Client Identity  . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
   <a href="#section-4">4</a>.  Security Threat Model  . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
     <a href="#section-4.1">4.1</a>.  Clients  . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
       <a href="#section-4.1.1">4.1.1</a>.  Threat: Obtain Client Secrets  . . . . . . . . . . . . <a href="#page-17">17</a>
       <a href="#section-4.1.2">4.1.2</a>.  Threat: Obtain Refresh Tokens  . . . . . . . . . . . . <a href="#page-18">18</a>
       <a href="#section-4.1.3">4.1.3</a>.  Threat: Obtain Access Tokens . . . . . . . . . . . . . <a href="#page-20">20</a>
       4.1.4.  Threat: End-user credentials phished using
               compromised or embedded browser  . . . . . . . . . . . <a href="#page-20">20</a>
     <a href="#section-4.2">4.2</a>.  Authorization Endpoint . . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
       4.2.1.  Threat: Password phishing by counterfeit
               authorization server . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
       4.2.2.  Threat: User unintentionally grants too much
               access scope . . . . . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
       4.2.3.  Threat: Malicious client obtains existing
               authorization by fraud . . . . . . . . . . . . . . . . <a href="#page-22">22</a>
       <a href="#section-4.2.4">4.2.4</a>.  Threat: Open redirector  . . . . . . . . . . . . . . . <a href="#page-22">22</a>
     <a href="#section-4.3">4.3</a>.  Token endpoint . . . . . . . . . . . . . . . . . . . . . . <a href="#page-23">23</a>



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


       <a href="#section-4.3.1">4.3.1</a>.  Threat: Eavesdropping access tokens  . . . . . . . . . <a href="#page-23">23</a>
       4.3.2.  Threat: Obtain access tokens from authorization
               server database  . . . . . . . . . . . . . . . . . . . <a href="#page-23">23</a>
       4.3.3.  Threat: Obtain client credentials over non secure
               transport  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-23">23</a>
       4.3.4.  Threat: Obtain client secret from authorization
               server database  . . . . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
       <a href="#section-4.3.5">4.3.5</a>.  Threat: Obtain client secret by online guessing  . . . <a href="#page-24">24</a>
       <a href="#section-4.3.6">4.3.6</a>.  Threat: DoS on dynamic client secret creation  . . . . <a href="#page-24">24</a>
     <a href="#section-4.4">4.4</a>.  Obtaining Authorization  . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
       <a href="#section-4.4.1">4.4.1</a>.  Authorization Code . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
         4.4.1.1.  Threat: Eavesdropping or leaking authorization
                   codes  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
         4.4.1.2.  Threat: Obtain authorization codes from
                   authorization server database  . . . . . . . . . . <a href="#page-26">26</a>
         <a href="#section-4.4.1.3">4.4.1.3</a>.  Threat: Online guessing of authorization codes . . <a href="#page-27">27</a>
         <a href="#section-4.4.1.4">4.4.1.4</a>.  Threat: Malicious client obtains authorization . . <a href="#page-27">27</a>
         <a href="#section-4.4.1.5">4.4.1.5</a>.  Threat: Authorization code phishing  . . . . . . . <a href="#page-28">28</a>
         <a href="#section-4.4.1.6">4.4.1.6</a>.  Threat: User session impersonation . . . . . . . . <a href="#page-29">29</a>
         4.4.1.7.  Threat: Authorization code leakage through
                   counterfeit client . . . . . . . . . . . . . . . . <a href="#page-29">29</a>
         <a href="#section-4.4.1.8">4.4.1.8</a>.  Threat: CSRF attack against redirect-uri . . . . . <a href="#page-31">31</a>
         4.4.1.9.  Threat: Clickjacking attack against
                   authorization  . . . . . . . . . . . . . . . . . . <a href="#page-32">32</a>
         <a href="#section-4.4.1.10">4.4.1.10</a>. Threat: DoS, Exhaustion of resources attacks . . . <a href="#page-32">32</a>
         4.4.1.11. Threat: DoS using manufactured authorization
                   codes  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-33">33</a>
       <a href="#section-4.4.2">4.4.2</a>.  Implicit Grant . . . . . . . . . . . . . . . . . . . . <a href="#page-34">34</a>
         4.4.2.1.  Threat: Access token leak in
                   transport/end-points . . . . . . . . . . . . . . . <a href="#page-34">34</a>
         <a href="#section-4.4.2.2">4.4.2.2</a>.  Threat: Access token leak in browser history . . . <a href="#page-35">35</a>
         <a href="#section-4.4.2.3">4.4.2.3</a>.  Threat: Malicious client obtains authorization . . <a href="#page-35">35</a>
         <a href="#section-4.4.2.4">4.4.2.4</a>.  Threat: Manipulation of scripts  . . . . . . . . . <a href="#page-35">35</a>
         <a href="#section-4.4.2.5">4.4.2.5</a>.  Threat: CSRF attack against redirect-uri . . . . . <a href="#page-36">36</a>
       <a href="#section-4.4.3">4.4.3</a>.  Resource Owner Password Credentials  . . . . . . . . . <a href="#page-37">37</a>
         4.4.3.1.  Threat: Accidental exposure of passwords at
                   client site  . . . . . . . . . . . . . . . . . . . <a href="#page-37">37</a>
         4.4.3.2.  Threat: Client obtains scopes without end-user
                   authorization  . . . . . . . . . . . . . . . . . . <a href="#page-38">38</a>
         4.4.3.3.  Threat: Client obtains refresh token through
                   automatic authorization  . . . . . . . . . . . . . <a href="#page-38">38</a>
         <a href="#section-4.4.3.4">4.4.3.4</a>.  Threat: Obtain user passwords on transport . . . . <a href="#page-39">39</a>
         4.4.3.5.  Threat: Obtain user passwords from
                   authorization server database  . . . . . . . . . . <a href="#page-39">39</a>
         <a href="#section-4.4.3.6">4.4.3.6</a>.  Threat: Online guessing  . . . . . . . . . . . . . <a href="#page-39">39</a>
       <a href="#section-4.4.4">4.4.4</a>.  Client Credentials . . . . . . . . . . . . . . . . . . <a href="#page-40">40</a>
     <a href="#section-4.5">4.5</a>.  Refreshing an Access Token . . . . . . . . . . . . . . . . <a href="#page-40">40</a>
       4.5.1.  Threat: Eavesdropping refresh tokens from



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


               authorization server . . . . . . . . . . . . . . . . . <a href="#page-40">40</a>
       4.5.2.  Threat: Obtaining refresh token from authorization
               server database  . . . . . . . . . . . . . . . . . . . <a href="#page-40">40</a>
       <a href="#section-4.5.3">4.5.3</a>.  Threat: Obtain refresh token by online guessing  . . . <a href="#page-41">41</a>
       4.5.4.  Threat: Obtain refresh token phishing by
               counterfeit authorization server . . . . . . . . . . . <a href="#page-41">41</a>
     <a href="#section-4.6">4.6</a>.  Accessing Protected Resources  . . . . . . . . . . . . . . <a href="#page-41">41</a>
       <a href="#section-4.6.1">4.6.1</a>.  Threat: Eavesdropping access tokens on transport . . . <a href="#page-41">41</a>
       <a href="#section-4.6.2">4.6.2</a>.  Threat: Replay authorized resource server requests . . <a href="#page-42">42</a>
       <a href="#section-4.6.3">4.6.3</a>.  Threat: Guessing access tokens . . . . . . . . . . . . <a href="#page-42">42</a>
       4.6.4.  Threat: Access token phishing by counterfeit
               resource server  . . . . . . . . . . . . . . . . . . . <a href="#page-43">43</a>
       4.6.5.  Threat: Abuse of token by legitimate resource
               server or client . . . . . . . . . . . . . . . . . . . <a href="#page-43">43</a>
       <a href="#section-4.6.6">4.6.6</a>.  Threat: Leak of confidential data in HTTP-Proxies  . . <a href="#page-44">44</a>
       4.6.7.  Threat: Token leakage via logfiles and HTTP
               referrers  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-44">44</a>
   <a href="#section-5">5</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-45">45</a>
     <a href="#section-5.1">5.1</a>.  General  . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-45">45</a>
       <a href="#section-5.1.1">5.1.1</a>.  Confidentiality of Requests  . . . . . . . . . . . . . <a href="#page-45">45</a>
       <a href="#section-5.1.2">5.1.2</a>.  Server authentication  . . . . . . . . . . . . . . . . <a href="#page-45">45</a>
       <a href="#section-5.1.3">5.1.3</a>.  Always keep the resource owner informed  . . . . . . . <a href="#page-46">46</a>
       <a href="#section-5.1.4">5.1.4</a>.  Credentials  . . . . . . . . . . . . . . . . . . . . . <a href="#page-46">46</a>
         <a href="#section-5.1.4.1">5.1.4.1</a>.  Credential storage protection  . . . . . . . . . . <a href="#page-46">46</a>
         <a href="#section-5.1.4.2">5.1.4.2</a>.  Online attacks on secrets  . . . . . . . . . . . . <a href="#page-47">47</a>
       <a href="#section-5.1.5">5.1.5</a>.  Tokens (access, refresh, code) . . . . . . . . . . . . <a href="#page-48">48</a>
         <a href="#section-5.1.5.1">5.1.5.1</a>.  Limit token scope  . . . . . . . . . . . . . . . . <a href="#page-48">48</a>
         <a href="#section-5.1.5.2">5.1.5.2</a>.  Expiration time  . . . . . . . . . . . . . . . . . <a href="#page-49">49</a>
         <a href="#section-5.1.5.3">5.1.5.3</a>.  Short expiration time  . . . . . . . . . . . . . . <a href="#page-49">49</a>
         <a href="#section-5.1.5.4">5.1.5.4</a>.  Limit number of usages/ One time usage . . . . . . <a href="#page-50">50</a>
         5.1.5.5.  Bind tokens to a particular resource server
                   (Audience) . . . . . . . . . . . . . . . . . . . . <a href="#page-50">50</a>
         <a href="#section-5.1.5.6">5.1.5.6</a>.  Use endpoint address as token audience . . . . . . <a href="#page-50">50</a>
         <a href="#section-5.1.5.7">5.1.5.7</a>.  Audience and Token scopes  . . . . . . . . . . . . <a href="#page-50">50</a>
         <a href="#section-5.1.5.8">5.1.5.8</a>.  Bind token to client id  . . . . . . . . . . . . . <a href="#page-51">51</a>
         <a href="#section-5.1.5.9">5.1.5.9</a>.  Signed tokens  . . . . . . . . . . . . . . . . . . <a href="#page-51">51</a>
         <a href="#section-5.1.5.10">5.1.5.10</a>. Encryption of token content  . . . . . . . . . . . <a href="#page-51">51</a>
         <a href="#section-5.1.5.11">5.1.5.11</a>. Random token value with high entropy . . . . . . . <a href="#page-51">51</a>
         <a href="#section-5.1.5.12">5.1.5.12</a>. Assertion formats  . . . . . . . . . . . . . . . . <a href="#page-51">51</a>
       <a href="#section-5.1.6">5.1.6</a>.  Access tokens  . . . . . . . . . . . . . . . . . . . . <a href="#page-51">51</a>
     <a href="#section-5.2">5.2</a>.  Authorization Server . . . . . . . . . . . . . . . . . . . <a href="#page-52">52</a>
       <a href="#section-5.2.1">5.2.1</a>.  Authorization Codes  . . . . . . . . . . . . . . . . . <a href="#page-52">52</a>
         5.2.1.1.  Automatic revocation of derived tokens if
                   abuse is detected  . . . . . . . . . . . . . . . . <a href="#page-52">52</a>
       <a href="#section-5.2.2">5.2.2</a>.  Refresh tokens . . . . . . . . . . . . . . . . . . . . <a href="#page-52">52</a>
         <a href="#section-5.2.2.1">5.2.2.1</a>.  Restricted issuance of refresh tokens  . . . . . . <a href="#page-52">52</a>
         <a href="#section-5.2.2.2">5.2.2.2</a>.  Binding of refresh token to client_id  . . . . . . <a href="#page-52">52</a>
         <a href="#section-5.2.2.3">5.2.2.3</a>.  Refresh Token Replacement  . . . . . . . . . . . . <a href="#page-52">52</a>



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


         <a href="#section-5.2.2.4">5.2.2.4</a>.  Refresh Token Revocation . . . . . . . . . . . . . <a href="#page-53">53</a>
         5.2.2.5.  Combine refresh token requests with
                   user-provided secret . . . . . . . . . . . . . . . <a href="#page-53">53</a>
         <a href="#section-5.2.2.6">5.2.2.6</a>.  Device identification  . . . . . . . . . . . . . . <a href="#page-53">53</a>
         <a href="#section-5.2.2.7">5.2.2.7</a>.  X-FRAME-OPTION header  . . . . . . . . . . . . . . <a href="#page-53">53</a>
       <a href="#section-5.2.3">5.2.3</a>.  Client authentication and authorization  . . . . . . . <a href="#page-54">54</a>
         5.2.3.1.  Don't issue secrets to clients with
                   inappropriate security policy  . . . . . . . . . . <a href="#page-54">54</a>
         <a href="#section-5.2.3.2">5.2.3.2</a>.  Clients without secret require user consent  . . . <a href="#page-55">55</a>
         5.2.3.3.  Client_id only in combination with redirect_uri  . 55
         <a href="#section-5.2.3.4">5.2.3.4</a>.  Deployment-specific client secrets . . . . . . . . <a href="#page-55">55</a>
         <a href="#section-5.2.3.5">5.2.3.5</a>.  Validation of pre-registered redirect_uri  . . . . <a href="#page-56">56</a>
         <a href="#section-5.2.3.6">5.2.3.6</a>.  Client secret revocation . . . . . . . . . . . . . <a href="#page-57">57</a>
         5.2.3.7.  Use strong client authentication (e.g.
                   client_assertion / client_token) . . . . . . . . . <a href="#page-57">57</a>
       <a href="#section-5.2.4">5.2.4</a>.  End-user authorization . . . . . . . . . . . . . . . . <a href="#page-57">57</a>
         5.2.4.1.  Automatic processing of repeated
                   authorizations requires client validation  . . . . <a href="#page-57">57</a>
         <a href="#section-5.2.4.2">5.2.4.2</a>.  Informed decisions based on transparency . . . . . <a href="#page-58">58</a>
         <a href="#section-5.2.4.3">5.2.4.3</a>.  Validation of client properties by end-user  . . . <a href="#page-58">58</a>
         <a href="#section-5.2.4.4">5.2.4.4</a>.  Binding of authorization code to client_id . . . . <a href="#page-58">58</a>
         <a href="#section-5.2.4.5">5.2.4.5</a>.  Binding of authorization code to redirect_uri  . . <a href="#page-58">58</a>
     <a href="#section-5.3">5.3</a>.  Client App Security  . . . . . . . . . . . . . . . . . . . <a href="#page-59">59</a>
       5.3.1.  Don't store credentials in code or resources
               bundled with software packages . . . . . . . . . . . . <a href="#page-59">59</a>
       5.3.2.  Standard web server protection measures (for
               config files and databases)  . . . . . . . . . . . . . <a href="#page-59">59</a>
       <a href="#section-5.3.3">5.3.3</a>.  Store secrets in a secure storage  . . . . . . . . . . <a href="#page-59">59</a>
       5.3.4.  Utilize device lock to prevent unauthorized device
               access . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-59">59</a>
       <a href="#section-5.3.5">5.3.5</a>.  Platform security measures . . . . . . . . . . . . . . <a href="#page-59">59</a>
     <a href="#section-5.4">5.4</a>.  Resource Servers . . . . . . . . . . . . . . . . . . . . . <a href="#page-59">59</a>
       <a href="#section-5.4.1">5.4.1</a>.  Authorization headers  . . . . . . . . . . . . . . . . <a href="#page-59">59</a>
       <a href="#section-5.4.2">5.4.2</a>.  Authenticated requests . . . . . . . . . . . . . . . . <a href="#page-60">60</a>
       <a href="#section-5.4.3">5.4.3</a>.  Signed requests  . . . . . . . . . . . . . . . . . . . <a href="#page-60">60</a>
   <a href="#section-6">6</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-60">60</a>
   <a href="#section-7">7</a>.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-61">61</a>
   <a href="#section-8">8</a>.  References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-61">61</a>
     <a href="#section-8.1">8.1</a>.  Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-61">61</a>
     <a href="#section-8.2">8.2</a>.  Informative References . . . . . . . . . . . . . . . . . . <a href="#page-61">61</a>
   <a href="#appendix-A">Appendix A</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-61">61</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-62">62</a>









<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   This document gives security considerations based on a comprehensive
   threat model for the OAuth 2.0 Protocol [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  It
   contains the following content:

   o  Documents any assumptions and scope considered when creating the
      threat model.

   o  Describes the security features in-built into the OAuth protocol
      and how they are intended to thwart attacks.

   o  Gives a comprehensive threat model for OAuth and describes the
      respective counter measures to thwart those threats.

   Threats include any intentional attacks on OAuth tokens and resources
   protected by OAuth tokens as well as security risks introduced if the
   proper security measures are not put in place.  Threats are
   structured along the lines of the protocol structure to aid
   development teams implement each part of the protocol securely.  For
   example all threats for granting access or all threats for a
   particular client profile or all threats for protecting the resource
   server.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Overview</span>

<span class="h3"><a class="selflink" name="section-2.1" href="#section-2.1">2.1</a>.  Scope</span>

   The security considerations document only considers clients bound to
   a particular deployment as supported by [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  Such
   deployments have the following characteristics:

   o  Resource server URLs are static and well-known at development
      time, authorization server URLs can be static or discovered.

   o  Token scope values (e.g. applicable URLs and methods) are well-
      known at development time.

   o  Client registration: Since registration of clients is out of scope
      of the current core spec, this document assumes a broad variety of
      options from static registration during development time to
      dynamic registration at runtime.

   The following are considered out of scope :






<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Communication between authorization server and resource server

   o  Token formats

   o  Except for "Resource Owner Password Credentials" (see
      [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], section 4.3), the mechanism used by
      authorization servers to authenticate the user

   o  Mechanism by which a user obtained an assertion and any resulting
      attacks mounted as a result of the assertion being false.

   o  Clients are not bound to a specific deployment: An example could
      by a mail client with support for contact list access via the
      portable contacts API (see [<a href="#ref-portable-contacts">portable-contacts</a>]).  Such clients
      cannot be registered upfront with a particular deployment and must
      dynamically discover the URLs relevant for the Oauth protocol.

<span class="h3"><a class="selflink" name="section-2.2" href="#section-2.2">2.2</a>.  Attack Assumptions</span>

   The following assumptions relate to an attacker and resources
   available to an attacker:

   o  It is assumed the attacker has full access to the network between
      the client and authorization servers and the client and the
      resource server, respectively.  The attacker may eaves drop on any
      communications between those parties.  He is not assumed to have
      access to communication between authorization and resource server.

   o  It is assumed an attacker has unlimited resources to mount an
      attack.

   o  It is assumed that 2 of the 3 parties involved in the OAuth
      protocol may collude to mount an attack against the 3rd party.
      For example, the client and authorization server may be under
      control of an attacker and collude to trick a user to gain access
      to resources.

<span class="h3"><a class="selflink" name="section-2.3" href="#section-2.3">2.3</a>.  Architectural assumptions</span>

   This section documents the assumptions about the features,
   limitations and design options of the different entities of a OAuth
   deployment along with the security-sensitive data-elements managed by
   those entity.  These assumptions are the foundation of the treat
   analysis.

   The OAuth protocol leaves deployments with a certain degree of
   freedom how to implement and apply the standard.  The core
   specification defines the core concepts of an authorization server



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   and a resource server.  Both servers can be implemented in the same
   server entity, or they may also be different entities.  The later is
   typically the case for multi-service providers with a single
   authentication and authorization system, and are more typical in
   middleware architectures.

<span class="h4"><a class="selflink" name="section-2.3.1" href="#section-2.3.1">2.3.1</a>.  Authorization Servers</span>

   The following data elements MAY be stored or accessible on the
   authorization server:

   o  user names and passwords

   o  client ids and secrets

   o  client-specific refresh tokens

   o  client-specific access tokens (in case of handle-based design)

   o  HTTPS certificate/key

   o  per authorization process (in case of handle-based design):
      redirect_uri, client_id, authorization code

<span class="h4"><a class="selflink" name="section-2.3.2" href="#section-2.3.2">2.3.2</a>.  Resource Server</span>

   The following data elements MAY be stored or accessible on the
   resource server:

   o  user data (out of scope)

   o  HTTPS certificate/key

   o  authz server credentials (handle-based design), or

   o  authz server shared secret/public key (assertion-based design)

   o  access tokens (per request)

   It is assumed that a resource server has no knowledge of refresh
   tokens, user passwords, or client secrets.

<span class="h4"><a class="selflink" name="section-2.3.3" href="#section-2.3.3">2.3.3</a>.  Client</span>

   The following data elements are stored or accessible on the client:






<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  client id (and client secret or corresponding client credential)

   o  one or more refresh tokens (persistent) and access tokens
      (transient) per end-user or other security-context or delegation
      context

   o  trusted CA certs (HTTPS)

   o  per authorization process: redirect_uri, authorization code

<span class="h5"><a class="selflink" name="section-2.3.3.1" href="#section-2.3.3.1">2.3.3.1</a>.  Web Application</span>

   A web application is a client running on a web server, typically with
   its own user management.  End-users access the client via an HTML
   user interface rendered in a user- agent on the end-user's device.
   The client credentials as well as any token issued to the client are
   stored on the web server and are not exposed to or accessible by the
   end-user.  Tokens are bound to a single user identity at the site.
   The potential number of tokens affected by a security breach depends
   on number of site users.

   Such clients are implemented using the authorization code grant type
   (see <a href="#section-4.4.1">Section 4.4.1</a>).

<span class="h5"><a class="selflink" name="section-2.3.3.2" href="#section-2.3.3.2">2.3.3.2</a>.  Native Applications</span>

   A native application is a client which is installed and executes on
   the end-user's device, such as a notebook, PC, Tablet, Smartphone, or
   Gaming Console.  The OAuth protocol data and credentials are
   accessible to the end-user.  It is assumed that such an application
   can protect dynamically issued credentials, such as refresh tokens,
   from eavesdropping by other applications residing on the same device.

   Massively distributed applications such as these cannot reliably keep
   secrets confidential, which are issued per software package.  This is
   because such secrets would need to be transferred to the user device
   as part of the installation process.  An attacker could reverse
   engineer any secret from the binary or accompanying resources.
   Native Applications are able to protect per installation/instance
   secrets (e.g. refresh tokens) to some extent.

   Device platforms typically allow users to lock the device with a PIN
   code and to segregate different apps or users (multi-user operation
   systems).

   Some devices can be identified/authenticated (to varying degrees of
   assurance):




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012                [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Handsets and smart phones by its International Mobile Equipment
      Identity (IMEI)

   o  Set top boxes, gaming consoles, others by using certificates and
      TPM module - Note: This does not help to identify client apps but
      may be used to bound tokens to devices and to detect token theft

   Mobile devices, such as handsets or smart phones have the following
   special characteristics:

   o  Limited input capabilities, therefore such clients typically
      obtain a refresh token in order to provide automatic login for
      sub-sequent application sessions

   o  As mobile and small devices, they can get cloned, stolen or lost
      easier than other devices.

   o  Security breach will affect single user (or a few users) only.

   For the purposes of this document, the scenario of attackers who
   control a smartphone device entirely is out of scope.

   There are several implementation options for native applications:

   o  The authorization code grant type in combination with an embedded
      or external browser (<a href="#section-4.4.1">Section 4.4.1</a>)

   o  The implict grant type in combination with an embedded or external
      browser (<a href="#section-4.4.2">Section 4.4.2</a>)

   o  The resource owner password credentials grant type can be used as
      well (<a href="#section-4.4.3">Section 4.4.3</a>)

   Different threats exists for those implementation options, which are
   discussed in the respective sections of the threat model.

<span class="h5"><a class="selflink" name="section-2.3.3.3" href="#section-2.3.3.3">2.3.3.3</a>.  User-agent-based Applications</span>

   A user-agent-based application is a client in which the client code
   is downloaded from a web server and executes within a user-agent on
   the end-user's device.  The OAuth protocol data and credentials are
   accessible to the end-user.  Since such applications directly reside
   within the user-agent, they can make seamless use of the user-agent
   capabilities in the end-user authorization process.

   Such client are implemented using the implicit grant grant type
   (<a href="#section-4.4.2">Section 4.4.2</a>).




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h5"><a class="selflink" name="section-2.3.3.4" href="#section-2.3.3.4">2.3.3.4</a>.  Autonomous</span>

   Autonomous clients access resource services using rights grants by
   client credentials only.  Thus the autonomous client becomes the
   "user".  Authenticating autonomous clients is conceptually similar to
   end-user authentication since the issued tokens refer to the client's
   identity.  Autonomous clients shall always be required to use a
   secret or some other form of authentication (e.g. client assertion in
   the form of a SAML assertion or STS token) acceptable to the
   authorization/token services.  The client must ensure the
   confidentiality of client_secret or other credential.

   Such client are implemented using the client credentials grant type.


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Security Features</span>

   These are some of the security features which have been built into
   the OAuth 2.0 protocol to mitigate attacks and security issues.

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  Tokens</span>

   OAuth makes extensive use of all kinds of tokens (access tokens,
   refresh tokens, authorization codes).  The information content of a
   token can be represented in two ways as follows:

   Handle (or artifact)  a reference to some internal data structure
      within the authorization server, the internal data structure
      contains the attributes of the token, such as user id, scope, etc.
      Handles enable simple revocation and do not require cryptographic
      mechanisms to protected token content from being modified.  On the
      other hand, handles require communication between issuing and
      consuming entity (e.g. authorization and resource server) in order
      to validate the token and obtain token-bound data.  This
      communication might have an negative impact on performance and
      scalability if both entities reside on different system.  Handles
      are therefore typically used if the issuing and consuming entity
      are the same.  A 'handle' token is often referred to as an
      'opaque' token because the resource server does not need to be
      able to interpret the token directly, it simply uses the token.

   Assertions (aka self-contained token)  a parseable token.  An
      assertion typically has a duration, an audience, and is digitally
      signed containing information about the user and the client.
      Examples of assertion formats are SAML assertions and Kerberos
      tickets.  Assertions can typically directly be validated and used
      by a resource server without interactions with the authorization
      server.  This results in better performance and scalability in



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


      deployment where issuing and consuming entity reside on different
      systems.  Implementing token revocation is more difficult with
      assertions than with handles.

   Tokens can be used in two ways to invoke requests on resource servers
   as follows:

   bearer token  A 'bearer token' is a token that can be used by any
      client who has received the token (e.g.
      [<a href="#ref-I-D.ietf-oauth-v2-bearer">I-D.ietf-oauth-v2-bearer</a>]).  Because mere possession is enough to
      use the token it is important that communication between end-
      points be secured to ensure that only authorized end-points may
      capture the token.  The bearer token is convenient to client
      applications as it does not require them to do anything to use
      them (such as a proof of identity).  Bearer tokens have similar
      characteristics to web SSO cookies used in browsers.

   proof token  A 'proof token' is a token that can only be used by a
      specific client.  Each use of the token, requires the client to
      perform some action that proves that it is the authorized user of
      the token.  Examples of this are MAC tokens, which require the
      client to digitally sign the resource request with a secret
      corresponding to the particular token send with the request
      (e.g.[<a href="#ref-I-D.ietf-oauth-v2-http-mac">I-D.ietf-oauth-v2-http-mac</a>]).

<span class="h4"><a class="selflink" name="section-3.1.1" href="#section-3.1.1">3.1.1</a>.  Scope</span>

   A Scope represents the access authorization associated with a
   particular token with respect to resource servers, resources and
   methods on those resources.  Scopes are the OAuth way to explicitly
   manage the power associated with an access token.  A scope can be
   controlled by the authorization server and/or the end-user in order
   to limit access to resources for OAuth clients these parties deem
   less secure or trustworthy.  Optionally, the client can request the
   scope to apply to the token but only for lesser scope than would
   otherwise be granted, e.g. to reduce the potential impact if this
   token is sent over non secure channels.  A scope is typically
   complemented by a restriction on a token's lifetime.

<span class="h4"><a class="selflink" name="section-3.1.2" href="#section-3.1.2">3.1.2</a>.  Expires_In</span>

   Expires_In allows an authorization server (based on its policies or
   on behalf of the end-user) to limit the lifetime of the access token.
   This mechanisms can be used to issue short-living tokens to OAuth
   clients the authorization server deems less secure or where sending
   tokens over non secure channels.





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h3"><a class="selflink" name="section-3.2" href="#section-3.2">3.2</a>.  Access Token</span>

   An access token is used by a client to access a resource.  Access
   tokens typically have short life-spans (minutes or hours) that cover
   typical session lifetimes.  An access token may be refreshed through
   the use of a refresh token.  The short lifespan of an access token in
   combination with the usage of refresh tokens enables the possibility
   of passive revocation of access authorization on the expiry of the
   current access token.

<span class="h3"><a class="selflink" name="section-3.3" href="#section-3.3">3.3</a>.  Refresh Token</span>

   A refresh token represents a long-lasting authorization of a certain
   client to access resources on behalf of a resource owner.  Such
   tokens are exchanged between client and authorization server, only.
   Clients use this kind of token to obtain ("refresh") new access
   tokens used for resource server invocations.

   A refresh token, coupled with a short access token lifetime, can be
   used to grant longer access to resources without involving end user
   authorization.  This offers an advantage where resource servers and
   authorization servers are not the same entity, e.g. in a distributed
   environment, as the refresh token must always be exchanged at the
   authorization server.  The authorization server can revoke the
   refresh token at any time causing the granted access to be revoked
   once the current access token expires.  Because of this, a short
   access token lifetime is important if timely revocation is a high
   priority.

   The refresh token is also a secret bound to the client identifier and
   _instance_ which originally requested the authorization and
   representing the original resource owner grant.  This is ensured by
   the authorization process as follows:

   1.  The resource owner and user-agent safely deliver the
       authorization code to the client instance in first place.

   2.  The client uses it immediately in secure transport-level
       communications to the authorization server and then securely
       stores the long-lived refresh token.

   3.  The client always uses the refresh token in secure transport-
       level communications to the authorization server to get an access
       token (and optionally rollover the refresh token).

   So as long as the confidentiality of the particular token can be
   ensured by the client, a refresh tokens can also be used as an
   alternative mean to authenticate the client instance itself.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h3"><a class="selflink" name="section-3.4" href="#section-3.4">3.4</a>.  Authorization Code</span>

   An Authorization Code represents the intermediary result of a
   successful end-user authorization process and is used by the client
   to obtain access and refresh token.  Authorization codes are sent to
   the client's redirect_uri instead of tokens for two purposes.

   1.  Instead of (longer-lasting) tokens, the short-living
       authorization code is exposed to potential attackers via URI
       query parameters (HTTP referrer), browser cacher or log file
       entries.

   2.  It is much simpler to authenticate clients during the direct
       request between client and authorization server than in the
       context of the indirect authorization request.  The later would
       require digital signatures.

<span class="h3"><a class="selflink" name="section-3.5" href="#section-3.5">3.5</a>.  Redirect-URI</span>

   A Redirect-uri helps to identify clients and prevents phishing
   attacks from other clients attempting to trick the user into
   believing the phisher is the client.  The value of the actual
   redirect_uri used in the authorization request has to be presented
   and is verified when an authorization code is exchanged for tokens.
   This helps to prevent attacks, where the authorization code is
   revealed through redirectors and counterfeit web app clients.
   Moreover, the authorization server may require clients to pre-
   register their redirect URIs and validate the redirect_uri in the
   authorization request in order to detect malicious clients.

<span class="h3"><a class="selflink" name="section-3.6" href="#section-3.6">3.6</a>.  State parameter</span>

   The state parameter is used to link requests and callbacks to prevent
   CSRF attacks where an attacker authorizes access to his own resources
   and then tricks a users into following a redirect with the attacker's
   token.

<span class="h3"><a class="selflink" name="section-3.7" href="#section-3.7">3.7</a>.  Client Identity</span>

   Authentication protocols have typically not taken into account the
   identity of the software component acting on behalf of the end-user.
   OAuth does this in order to increase the security level in delegated
   authorization scenarios and because the client will be able to act
   without the user's presence.  Depending on the client type, the
   client identity can and should be authenticated (see below).

   OAuth uses the _client_id_ (client identity) to collate associated
   request to the same originator, such as



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  a particular end-user authorization process and the corresponding
      request on the tokens endpoint to exchange the authorization code
      for tokens or

   o  the initial authorization and issuance of a tokens by an end-user
      to a particular client and sub-sequent requests by this client to
      obtain tokens w/o user consent (automatic processing of repeated
      authorization)

   The client identity may also be used by the authorization server to
   display relevant registration information to a user when requesting
   consent for scope requested by a particular client.  The client
   identity may be used to limit the number of request for a particular
   client or to charge the client per request.  Client Identity may
   furthermore be useful to differentiate access by different clients,
   e.g. in server log files.

   The _client_secret_ is used to verify the client identifier.  The
   authorization server should only rely on this form of client
   authentication where these secrets can be deployed to the clients in
   a secure manner and the client is capable of keeping its secret
   confidential.  Alternatively, the client identity can also be
   verified using the _redirect_uri_ or by the _end-user_.

   Clients (and the trustworthiness of its identity) can be classifed by
   using the following parameters:

   o  Deployment-specific or -independent client_id (Note: for native
      apps, every installation of a particular app on a certain device
      is considered a deployment.)

   o  Validated properties, such as app name or redirect_uri

   o  Client_secret available

   Typical client categories are:

   Deployment-independent client_id with pre-registered redirect_uri and
   without client_secret  Such an identity is used by multiple
      installations of the same software package.  The identity of such
      a client can only be validated with the help of the end-user.
      This is a viable option for native apps in order to identify the
      client for the purpose of displaying meta information about the
      client to the user and to differentiate clients in log files.
      Revocation of such an identity will affect ALL deployments of the
      respective software.





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Deployment-independent client_id with pre-registered redirect_uri and
   with client_secret  This is an option for native applications only,
      since web application would require different redirect URIs.  This
      category is not advisable because the client secret cannot be
      protected appropriately (see <a href="#section-4.1.1">Section 4.1.1</a>).  Due to its security
      weaknesses, such client identities have the same trustlevel as
      deployment-independent clients without secret.  Revocation will
      affect ALL deployments.

   Deployment-specific client_id with pre-registered redirect_uri and
   with client_secret  The client registration process insures the
      validation of the client's properties, such as redirect_uri,
      website address, web site name, contacts.  Such a client identity
      can be utilized for all relevant use cases cited above.  This
      level can be achieved for web applications in combination with a
      manual or user-bound registration process.  Achieving this level
      for native applications is much more difficult.  Either the
      installation of the app is conducted by an administrator, who
      validates the clients authenticity, or the process from validating
      the app to the installation of the app on the device and the
      creation of the client credentials is controlled end-to-end by a
      single entity (e.g. app market provider).  Revocation will affect
      a single deployment only.

   Deployment-specific client_id with client_secret without validated
   properties  Such a client can be recognized by the authorization
      server in transactions with subsequent requests (e.g.
      authorization and token issuance, refresh token issuance and
      access token refreshment).  The authorization server cannot assure
      any property of the client to end-users.  Automatic processing of
      re-authorizations could be allowed as well.  Such client
      credentials can be generated automatically without any validation
      of client properties, which makes it another option especially for
      native apps.  Revocation will affect a single deployment only.

   Use of the client secret is considered a relatively weak form of
   credential for the client.  Use of stronger mechanisms such as a
   client assertion (e.g.  SAML), key cryptography, are preferred.


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Security Threat Model</span>

   This sections gives a comprehensive threat model of OAuth 2.0.
   Threats are grouped first by attackes directed against an OAuth
   component, which are client, authorization server, and resource
   server.  Subsequently, they are grouped by flow, e.g. obtain token or
   access protected resources.  Every countermeasure description refers
   to a detailed description in <a href="#section-5">Section 5</a>.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Clients</span>

   This section describes possible threats directed to OAuth clients.

<span class="h4"><a class="selflink" name="section-4.1.1" href="#section-4.1.1">4.1.1</a>.  Threat: Obtain Client Secrets</span>

   The attacker could try to get access to the secret of a particular
   client in order to:

   o  replay its refresh tokens and authorization codes, or

   o  obtain tokens on behalf of the attacked client with the privileges
      of that client.

   The resulting impact would be:

   o  Client authentication of access to authorization server can be
      bypassed

   o  Stolen refresh tokens or authorization codes can be replayed

   Depending on the client category, there are the following approaches
   an attacker could utilize to obtain the client secret.

   *Attack: Obtain Secret From Source Code or Binary.* This applies for
   all client profiles.  For open source projects, secrets can be
   extracted directly from source code in their public repositories.
   Secrets can be extracted from application binaries just as easily
   when published source is not available to the attacker.  Even if an
   application takes significant measures to obfuscate secrets in their
   application distribution one should consider that the secret can
   still be reverse-engineered by anyone with access to a complete
   functioning application bundle or binary.

   _Countermeasures:_

   o  Don't issue secrets to clients with inappropriate security policy
      - <a href="#section-5.2.3.1">Section 5.2.3.1</a>

   o  Clients without secrect require user consent - <a href="#section-5.2.3.2">Section 5.2.3.2</a>

   o  Use deployment-specific client secrets - <a href="#section-5.2.3.4">Section 5.2.3.4</a>

   o  Client secret revocation - <a href="#section-5.2.3.6">Section 5.2.3.6</a>

   __

   *Attack: Obtain a Deployment-Specific Secret.* An attacker may try to



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   obtain the secret from a client installation, either from a web site
   (web server) or a particular devices (native app).

   _Countermeasures:_

   o  Web server: apply standard web server protection measures (for
      config files and databases) - <a href="#section-5.3.2">Section 5.3.2</a>

   o  Native apps: Store secrets in a secure local storage -
      <a href="#section-5.3.3">Section 5.3.3</a>

   o  Client secret revocation - <a href="#section-5.2.3.6">Section 5.2.3.6</a>

<span class="h4"><a class="selflink" name="section-4.1.2" href="#section-4.1.2">4.1.2</a>.  Threat: Obtain Refresh Tokens</span>

   Depending on the client type, there are different ways refresh tokens
   may be revealed to an attacker.  The following sub-sections give a
   more detailed description of the different attacks with respect to
   different client types and further specialized countermeasures.  Some
   generally applicable countermeasure to mitigate such attacks shall be
   given in advance:

   o  The authorization server must validate the client id associated
      with the particular refresh token with every refresh request-
      <a href="#section-5.2.2.2">Section 5.2.2.2</a>

   o  Limited scope tokens - <a href="#section-5.1.5.1">Section 5.1.5.1</a>

   o  Refresh token revocation - <a href="#section-5.2.2.4">Section 5.2.2.4</a>

   o  Client secret revocation - <a href="#section-5.2.3.6">Section 5.2.3.6</a>

   o  Refresh tokens can automatically be replaced in order to detect
      unauthorized token usage by another party (Refresh Token
      Replacement) - <a href="#section-5.2.2.3">Section 5.2.2.3</a>

   **

   *Attack: Obtain Refresh Token from Web application.* An attack may
   obtain the refresh tokens issued to a web server client.  Impact:
   Exposure of all refresh tokens on that side.

   _Countermeasures:_

   o  Standard web server protection measures - <a href="#section-5.3.2">Section 5.3.2</a>

   o  Use strong client authentication (e.g. client_assertion /
      client_token), so the attacker cannot obtain the client secret



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


      required to exchange the tokens - <a href="#section-5.2.3.7">Section 5.2.3.7</a>

   **

   *Attack: Obtain Refresh Token from Native clients.* On native
   clients, leakage of a refresh token typically affects a single user,
   only.

   _Read from local filesystem:_ The attacker could try get file system
   access on the device and read the refresh tokens.  The attacker could
   utilize a malicious app for that purpose.

   _Countermeasures:_

   o  Store secrets in a secure storage - <a href="#section-5.3.3">Section 5.3.3</a>

   o  Utilize device lock to prevent unauthorized device access -
      <a href="#section-5.3.4">Section 5.3.4</a>

   __

   _Steal device_: The host device (e.g. mobile phone) may be stolen.
   In that case, the attacker gets access to all apps under the identity
   of the legitimate user.

   _Countermeasures:_

   o  Utilize device lock to prevent unauthorized device access -
      <a href="#section-5.3.4">Section 5.3.4</a>

   o  Combine refresh token requests with user-provided secret -
      <a href="#section-5.2.2.5">Section 5.2.2.5</a>

   o  Where a user knows the device has been stolen, they can revoke the
      affected tokens - <a href="#section-5.2.2.4">Section 5.2.2.4</a>

   __

   _Clone device: _All device data and applications are copied to
   another device.  Applications are used as-is on the target device.

   _Countermeasures:_

   o  Combine refresh token request with device identification -
      <a href="#section-5.2.2.6">Section 5.2.2.6</a>

   o  Combine refresh token requests with user-provided secret -
      <a href="#section-5.2.2.5">Section 5.2.2.5</a>



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Refresh Token Replacement - <a href="#section-5.2.2.3">Section 5.2.2.3</a>

   o  Where a user knows the device has been cloned, they can use this
      countermeasure - Refresh Token Revocation - <a href="#section-5.2.2.4">Section 5.2.2.4</a>

   __

   _Obtain refresh tokens from backup:_ A refresh token could be
   obtained from the backup of a client application, or device.

   _Countermeasures:_

   o  tbd

<span class="h4"><a class="selflink" name="section-4.1.3" href="#section-4.1.3">4.1.3</a>.  Threat: Obtain Access Tokens</span>

   Depending on the client type, there are different ways access tokens
   may be revealed to an attacker.  Access tokens could be stolen from
   the device if the app stores them in a storage, which is accessible
   to other applications.

   Impact: Where the token is a bearer token and no additional mechanism
   is used to identify the client, the attacker can access all resources
   associated with the token and its scope.

   Countermeasures:

   o  Keep access tokens in transient memory and limit grants:
      <a href="#section-5.1.6">Section 5.1.6</a>

   o  Limited scope tokens - <a href="#section-5.1.5.1">Section 5.1.5.1</a>

   o  Keep access tokens in private memory or apply same protection
      means as for refresh tokens - <a href="#section-5.2.2">Section 5.2.2</a>

   o  Keep access token lifetime short - <a href="#section-5.1.5.3">Section 5.1.5.3</a>

<span class="h4"><a class="selflink" name="section-4.1.4" href="#section-4.1.4">4.1.4</a>.  Threat: End-user credentials phished using compromised or</span>
        embedded browser

   A malicious app could attempt to phish end-user passwords by misusing
   an embedded browser in the end-user authorization process, or by
   presenting its own user-interface instead of allowing trusted system
   browser to render the authorization UI.  By doing so, the usual
   visual trust mechanisms may be bypassed (e.g.  TLS confirmation, web
   site mechanisms).  By using an embedded or internal client app UI,
   the client app has access to additional information it should not
   have access to (e.g. uid/password).



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Impact: If the client app or the communication is compromised, the
   user would not be aware and all information in the authorization
   exchange could be captured such as username and password.

   Countermeasures:

   o  Client developers and end-user can be educated to trust an
      external System-Browser only.

   o  Client apps could be validated prior publication in a app market.

   o  Client developers should not collect authentication information
      directly from users and should instead use redirects to and back
      from a trusted external system-browser.

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Authorization Endpoint</span>

<span class="h4"><a class="selflink" name="section-4.2.1" href="#section-4.2.1">4.2.1</a>.  Threat: Password phishing by counterfeit authorization server</span>

   OAuth makes no attempt to verify the authenticity of the
   Authorization Server.  A hostile party could take advantage of this
   by intercepting the Client's requests and returning misleading or
   otherwise incorrect responses.  This could be achieved using DNS or
   ARP spoofing.  Wide deployment of OAuth and similar protocols may
   cause Users to become inured to the practice of being redirected to
   websites where they are asked to enter their passwords.  If Users are
   not careful to verify the authenticity of these websites before
   entering their credentials, it will be possible for attackers to
   exploit this practice to steal Users' passwords.

   Countermeasures:

   o  Authorization servers should consider such attacks when developing
      services based on OAuth, and should require transport-layer
      security for any requests where the authenticity of the
      authorization server or of request responses is an issue (see
      <a href="#section-5.1.2">Section 5.1.2</a>).

   o  Authorization servers should attempt to educate Users about the
      risks phishing attacks pose, and should provide mechanisms that
      make it easy for users to confirm the authenticity of their sites.

<span class="h4"><a class="selflink" name="section-4.2.2" href="#section-4.2.2">4.2.2</a>.  Threat: User unintentionally grants too much access scope</span>

   When obtaining end user authorization, the end-user may not
   understand the scope of the access being granted and to whom or they
   may end up providing a client with access to resources which should
   not be permitted.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Countermeasures:

   o  Explain the scope (resources and the permissions) the user is
      about to grant in a understandable way - <a href="#section-5.2.4.2">Section 5.2.4.2</a>

   o  Narrow scope based on client-specific policy - When obtaining end
      user authorization and where the client requests scope, the
      authorization server may want to consider whether to honour that
      scope based on who the client is.  That decision is between the
      client and authorization server and is outside the scope of this
      spec.  The authorization server may also want to consider what
      scope to grant based on the profile used, e.g. providing lower
      scope where no client secret is provided from a native
      application. - <a href="#section-5.1.5.1">Section 5.1.5.1</a>

<span class="h4"><a class="selflink" name="section-4.2.3" href="#section-4.2.3">4.2.3</a>.  Threat: Malicious client obtains existing authorization by fraud</span>

   Authorization servers may wish to automatically process authorization
   requests from clients which have been previously authorized by the
   user.  When the user is redirected to the authorization server's end-
   user authorization endpoint to grant access, the authorization server
   detects that the user has already granted access to that particular
   client.  Instead of prompting the user for approval, the
   authorization server automatically redirects the user back to the
   client.

   A malicious client may exploit that feature and try to obtain such an
   authorization code instead of the legimate client.

   Countermeasures:

   o  Authorization servers should not automatically process repeat
      authorizations where the client is not authenticated through a
      client secret or some other authentication mechanism such as
      signing with security certs (see <a href="#section-5.2.3.7">Section 5.2.3.7</a>) or validation of
      a pre-registered redirect uri (<a href="#section-5.2.3.5">Section 5.2.3.5</a> )

   o  Authorization servers can mitigate the risks associated with
      automatic processing by limiting the scope of Access Tokens
      obtained through automated approvals - <a href="#section-5.1.5.1">Section 5.1.5.1</a>

<span class="h4"><a class="selflink" name="section-4.2.4" href="#section-4.2.4">4.2.4</a>.  Threat: Open redirector</span>

   An attacker could use the end-user authorization endpoint and the
   redirect_uri parameter to abuse the authorization server as
   redirector.

   Impact?



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 22]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-23" id="page-23" href="#page-23" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Countermeasure

   o  don't redirect to redirect_uri, if client identity or redirect_uri
      could not be verified

<span class="h3"><a class="selflink" name="section-4.3" href="#section-4.3">4.3</a>.  Token endpoint</span>

<span class="h4"><a class="selflink" name="section-4.3.1" href="#section-4.3.1">4.3.1</a>.  Threat: Eavesdropping access tokens</span>

   Attackers may attempts to eaversdrop access token on transit from the
   authorization server to the client.

   Impact: The attacker is able to access all resources with the
   permissions covered by the scope of the particular access token.

   Countermeasures:

   o  Authorization servers MUST ensure that these transmissions are
      protected using transport-layer mechanisms such as TLS or SSL (see
      <a href="#section-5.1.1">Section 5.1.1</a>).

   o  If end-to-end confidentiality cannot be guaranteed, reducing scope
      (see <a href="#section-5.1.5.1">Section 5.1.5.1</a>) and expiry time (<a href="#section-5.1.5.3">Section 5.1.5.3</a>) for access
      tokens can be used to reduce the damage in case of leaks.

<span class="h4"><a class="selflink" name="section-4.3.2" href="#section-4.3.2">4.3.2</a>.  Threat: Obtain access tokens from authorization server database</span>

   This threat is applicable if the authorization server stores access
   tokens as handles in a database.  An attacker may obtain access
   tokens from the authorization server's database by gaining access to
   the database or launching a SQL injection attack.  Impact: disclosure
   of all access tokens

   Countermeasures:

   o  System security measures - <a href="#section-5.1.4.1.1">Section 5.1.4.1.1</a>

   o  Store access token hashes only - <a href="#section-5.1.4.1.3">Section 5.1.4.1.3</a>

   o  Standard SQL inj.  Countermeasures - <a href="#section-5.1.4.1.2">Section 5.1.4.1.2</a>

<span class="h4"><a class="selflink" name="section-4.3.3" href="#section-4.3.3">4.3.3</a>.  Threat: Obtain client credentials over non secure transport</span>

   An attacker could attempt to eavesdrop the transmission of client
   credentials between client and server during the client
   authentication process or during Oauth token requests.  Impact:
   Revelation of a client credential enabling the possibility for
   phishing or immitation of a client service.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 23]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-24" id="page-24" href="#page-24" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Countermeasures:

   o  Implement transport security through Confidentiality of Requests

   o  Alternative authentication means, which do not require to send
      plaintext credentials over the wire (Examples: Digest
      authentication)

<span class="h4"><a class="selflink" name="section-4.3.4" href="#section-4.3.4">4.3.4</a>.  Threat: Obtain client secret from authorization server database</span>

   An attacker may obtain valid client_id/secret combinations from the
   authorization server's database by gaining access to the database or
   launching a SQL injection attack.  Impact: disclosure of all
   client_id/secret combinations.  This allows the attacker to act on
   behalf of legitimate clients.

   Countermeasures:

   o  Ensure proper handling of credentials as per Credential storage
      protection.

<span class="h4"><a class="selflink" name="section-4.3.5" href="#section-4.3.5">4.3.5</a>.  Threat: Obtain client secret by online guessing</span>

   An attacker may try to guess valid client_id/secret pairs.  Impact:
   disclosure of single client_id/secret pair.

   Countermeasures:

   o  High entropy of secrets - <a href="#section-5.1.4.2.2">Section 5.1.4.2.2</a>

   o  Lock accounts - <a href="#section-5.1.4.2.3">Section 5.1.4.2.3</a>

<span class="h4"><a class="selflink" name="section-4.3.6" href="#section-4.3.6">4.3.6</a>.  Threat: DoS on dynamic client secret creation</span>

   If an authorization servers includes a nontrivial amount of entropy
   in client secrets and if the authorization server automatically
   grants them, an attacker could exhaust the pool by repeatedly
   applying for them.

   Countermeasures:

   o  The authorization server should consider some verification step
      for new clients.  The authorization server should include a
      nontrivial amount of entropy in client secrets.







<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 24]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-25" id="page-25" href="#page-25" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h3"><a class="selflink" name="section-4.4" href="#section-4.4">4.4</a>.  Obtaining Authorization</span>

   This section covers threats which are specific to certain flows
   utilized to obtain access tokens.  Each flow is characterized by
   response types and/or grant types on the end-user authorization and
   tokens endpoint, respectively.

<span class="h4"><a class="selflink" name="section-4.4.1" href="#section-4.4.1">4.4.1</a>.  Authorization Code</span>

<span class="h5"><a class="selflink" name="section-4.4.1.1" href="#section-4.4.1.1">4.4.1.1</a>.  Threat: Eavesdropping or leaking authorization codes</span>

   An attacker could try to eavesdrop transmission of the authorization
   code between authorization server and client.  Furthermore,
   authorization codes are passed via the browser which may
   unintentionally leak those codes to untrusted web sites and attackers
   by different ways:

   o  Referer headers: browsers frequently pass a "referer" header when
      a web page embeds content, or when a user travels from one web
      page to another web page.  These referer headers may be sent even
      when the origin site does not trust the destination site.  The
      referer header is commonly logged for traffic analysis purposes.

   o  Request logs: web server request logs commonly include query
      parameters on requests.

   o  Open redirectors: web sites sometimes need to send users to
      another destination via a redirector.  Open redirectors pose a
      particular risk to web-based delegation protocols because the
      redirector can leak verification codes to untrusted destination
      sites.

   o  Browser history: web browsers commonly record visited URLs in the
      browser history.  Another user of the same web browser may be able
      to view URLs that were visited by previous users.

   Note: A description of a similar attacks on the SAML protocol can be
   found at <a href="http://www.oasis-open.org/committees/download.php/3405/oasis-sstc-saml-bindings-1.1.pdf">http://www.oasis-open.org/committees/download.php/3405/</a>
   <a href="http://www.oasis-open.org/committees/download.php/3405/oasis-sstc-saml-bindings-1.1.pdf">oasis-sstc-saml-bindings-1.1.pdf</a> (S.4.1.1.9.1), <a href="http://www.thomasgross.net/publications/papers/">http://</a>
   <a href="http://www.thomasgross.net/publications/papers/">www.thomasgross.net/publications/papers/</a>
   GroPfi2006-SAML2_Analysis_Janus.WSSS_06.pdf and <a href="http://www.oasis-open.org/committees/download.php/11191/">http://</a>
   <a href="http://www.oasis-open.org/committees/download.php/11191/">www.oasis-open.org/committees/download.php/11191/</a>
   sstc-gross-sec-analysis-response-01.pdf.

   Countermeasures:






<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 25]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-26" id="page-26" href="#page-26" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Authorization server as well as the client MUST ensure that these
      transmissions are protected using transport-layer mechanisms such
      as TLS or SSL (see <a href="#section-5.1.1">Section 5.1.1</a>).

   o  The authorization server shall require the client to authenticate
      wherever possible, so the binding of the authorization code to a
      certain client can be validated in a reliable way (see
      <a href="#section-5.2.4.4">Section 5.2.4.4</a>).

   o  Limited duration of authorization codes - <a href="#section-5.1.5.3">Section 5.1.5.3</a>

   o  The authorization server SHOULD enforce a one time usage
      restriction (see <a href="#section-5.1.5.4">Section 5.1.5.4</a>).

   o  If an Authorization Server observes multiple attempts to redeem a
      authorization code, the Authorization Server may want to revoke
      all tokens granted based on the authorization code (see
      <a href="#section-5.2.1.1">Section 5.2.1.1</a>).

   o  In the absence of these countermeasures, reducing scope
      (<a href="#section-5.1.5.1">Section 5.1.5.1</a>) and expiry time (<a href="#section-5.1.5.3">Section 5.1.5.3</a>) for access
      tokens can be used to reduce the damage in case of leaks.

   o  The client server may reload the target page of the redirect_uri
      in order to automatically cleanup the browser cache.

<span class="h5"><a class="selflink" name="section-4.4.1.2" href="#section-4.4.1.2">4.4.1.2</a>.  Threat: Obtain authorization codes from authorization server</span>
          database

   This threat is applicable if the authorization server stores
   authorization codes as handles in a database.  An attacker may obtain
   authorization codes from the authorization server's database by
   gaining access to the database or launching a SQL injection attack.
   Impact: disclosure of all authorization codes, most likely along with
   the respective redirect_uri and client_id values.

   Countermeasures:

   o  Credential storage protection can be employed - <a href="#section-5.1.4.1">Section 5.1.4.1</a>

   o  System security measures - <a href="#section-5.1.4.1.1">Section 5.1.4.1.1</a>

   o  Store access token hashes only - <a href="#section-5.1.4.1.3">Section 5.1.4.1.3</a>

   o  Standard SQL inj.  Countermeasures - <a href="#section-5.1.4.1.2">Section 5.1.4.1.2</a>






<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 26]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-27" id="page-27" href="#page-27" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h5"><a class="selflink" name="section-4.4.1.3" href="#section-4.4.1.3">4.4.1.3</a>.  Threat: Online guessing of authorization codes</span>

   An attacker may try to guess valid authorization code values and send
   it using the grant type "code" in order to obtain a valid access
   token.  Impact: disclosure of single access token (+probably refresh
   token)

   Countermeasures:

   o  For handle-based designs: <a href="#section-5.1.5.11">Section 5.1.5.11</a>

   o  For assertion-based designs: <a href="#section-5.1.5.9">Section 5.1.5.9</a>

   o  Authenticate the client, adds another value the attacker has to
      guess - <a href="#section-5.2.3.4">Section 5.2.3.4</a>

   o  Binding of authorization code to redirect_uri, adds another value
      the attacker has to guess - <a href="#section-5.2.4.5">Section 5.2.4.5</a>

   o  Short expiration time - <a href="#section-5.1.5.3">Section 5.1.5.3</a>

<span class="h5"><a class="selflink" name="section-4.4.1.4" href="#section-4.4.1.4">4.4.1.4</a>.  Threat: Malicious client obtains authorization</span>

   A malicious client could counterfeit a valid client and obtain an
   access authorization that way.  The malicious client could even
   utilize screen scraping techniques in order to simulate the user
   consent in the authorization flow.

   Assumption: It is not the task of the authorization server to protect
   the end-user's device from malicious software.  This is the
   responsibility of the platform running on the particular device
   probably in cooperation with other components of the respective
   ecosystem (e.g. an application management infrastructure).  The sole
   responsibility of the authorization server is to control access to
   the end-user's resources living in resource servers and to prevent
   unauthorized access to them.  Based on this assumption, the following
   countermeasures are available to cope with the threat.

   Countermeasures:

   o  The authorization server should authentication the client, if
      possible (see <a href="#section-5.2.3.4">Section 5.2.3.4</a>).  Note: the authentication takes
      place after the end-user has authorized the access.

   o  The authorization server should validate the client's redirect_uri
      against the pre-registered redirect_uri, if one exists (see
      <a href="#section-5.2.3.5">Section 5.2.3.5</a>).  Note: The validation of the redirect_uri is the
      only technical mean to recognize a malicious client id in advance



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 27]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-28" id="page-28" href="#page-28" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


      of the authorization process.  Further note this does not work for
      native applications because in contrast to web applications this
      URI is not bound to a single communication endpoint.  The valid
      client's redirect_uri (typically with custom scheme) can be used
      by a malicious on any device.

   o  After authenticating the end-user, the authorization server should
      ask him/her for consent.  In this context, the user shall be
      explained the purpose, scope, and duration of the authorization.
      Moreover, the authorization server must view to the end-user the
      meta data it associates with the particular client.  It is up to
      the user to validate the binding of this data to the particular
      application (e.g.  Name) and to approve the authorization request.
      (see <a href="#section-5.2.4.3">Section 5.2.4.3</a>).

   o  The authorization server must not perform automatic re-
      authorizations for clients it is unable to reliably authenticate
      or validate (see <a href="#section-5.2.4.1">Section 5.2.4.1</a>).

   o  If the authorization server automatically authenticates the end-
      user, it may nevertheless require some user input in order to
      prevent screen scraping.  Examples are CAPTCHAs or user-specific
      secret like PIN codes.

   o  The authorization server may also limit the scope of tokens it
      issues to clients it cannot reliably authenticate (see
      <a href="#section-5.1.5.1">Section 5.1.5.1</a>).

<span class="h5"><a class="selflink" name="section-4.4.1.5" href="#section-4.4.1.5">4.4.1.5</a>.  Threat: Authorization code phishing</span>

   A hostile party could impersonate the client site and get access to
   the authorization code.  This could be achieved using DNS or ARP
   spoofing.  This applies to clients, which are web applications, thus
   the redirect URI is not local to the host where the user's browser is
   running.

   Impact: This affects web applications and may lead to a disclosure of
   authorization codes and, potentially, the corresponding access and
   refresh tokens.

   Countermeasures:

   o  The authorization server MUST require the client to authenticate
      with a secret, so the binding of the authorization code to a
      certain client can be validated in a reliable way (see
      <a href="#section-5.2.4.4">Section 5.2.4.4</a>).





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 28]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-29" id="page-29" href="#page-29" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  The redirect_uri of the client SHOULD point to a HTTPS protected
      endpoint and the browser shall be utilized to authenticate this
      redirect_uri using server authentication (see <a href="#section-5.1.2">Section 5.1.2</a>).

<span class="h5"><a class="selflink" name="section-4.4.1.6" href="#section-4.4.1.6">4.4.1.6</a>.  Threat: User session impersonation</span>

   A hostile party could impersonate the client site and impersonate the
   user's session on this client.  This could be achieved using DNS or
   ARP spoofing.  This applies to clients, which are web applications,
   thus the redirect URI is not local to the host where the user's
   browser is running.

   Impact: An attacker who intercepts the authorization code as it is
   sent by the browser to the callback endpoint can gain access to
   protected resources by submitting the authorization code to the
   client.  The client will exchange the authorization code for an
   access token and use the access token to access protected resources
   for the benefit of the attacker, delivering protected resources to
   the attacker, or modifying protected resources as directed by the
   attacker.  If OAuth is used by the client to delegate authentication
   to a social site (e.g. as in the implementation of the "Facebook
   Login" button), the attacker can use the intercepted authorization
   code to log in to the client as the user.

   Note: Authenticating the client during authorization code exchange
   will not help to detect such an attack as it is the legitimate client
   that obtains the tokens.

   Countermeasures:

   o  In order to prevent an attacker from impersonating the end-users
      session, the redirect_uri of the client MUST point to a HTTPS
      protected endpoint and the browser shall be utilized to
      authenticate this redirect_uri using server authentication (see
      <a href="#section-5.1.2">Section 5.1.2</a>)

<span class="h5"><a class="selflink" name="section-4.4.1.7" href="#section-4.4.1.7">4.4.1.7</a>.  Threat: Authorization code leakage through counterfeit client</span>

   The attack leverages the authorization code grant type in an attempt
   to get another user (victim) to log-in, authorize access to his/her
   resources, and sub-sequently obtain the authorization code and inject
   it into a client application using the attacker's account.  The goal
   is to associate an access authorization for resources of the victim
   with the user account of the attacker on a client site.

   The attacker abuses an existing client application and combines it
   with his own counterfeit client web site.  The attack depends on the
   victim expecting the client application to request access to a



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 29]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-30" id="page-30" href="#page-30" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   certain resource server.  The victim, seeing only a normal request
   from an expected application, approves the request.  The attacker
   then uses the victim's authorization to gain access to the
   information unknowingly authorized by the victim.

   The attacker conducts the following flow:

   1.  The attacker accesses the client web site (or application) and
       initates data access to a particular resource server.  The client
       web site in turn initiates an authorization request to the
       resource server's authorization server.  Instead of proceeding
       with the authorization process, the attacker modifies the
       authorization server end-user authorization URL as constructed by
       the client to include a redirect_uri parameter refering to a web
       site under his control (attacker's web site).

   2.  The attacker tricks another user (the victim) to open that
       modified end-user authorization URI and to authorize access (e.g.
       an email link, or blog link).  The way the attacker achieve that
       goal is out of scope.

   3.  Having clicked the link, the victim is requested to authenticate
       and authorize the client site to have access.

   4.  After completion of the authorization process, the authorization
       server redirects the user agent to the attacker's web site
       instead of the original client web site.

   5.  The attacker obtains the authorization code from his web site by
       means out of scope of this document.

   6.  He then constructs a redirect_uri to the target web site (or app)
       based on the original authorization request's redirect_uri and
       the newly obtained authorization code and directs his user agent
       to this URL.  The authorization code is injected into the
       original client site (or application).

   7.  The client site uses the authorization code to fetch a token from
       the authorization server and associates this token with the
       attacker's user account on this site.

   8.  The attacker may now access the victims resources using the
       client site.

   Impact: The attackes gains access to the victim's resources as
   associated with his account on the client site.

   Countermeasures:



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 30]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-31" id="page-31" href="#page-31" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  The attacker must use another redirect_uri for its authorization
      process than the target web site because it needs to intercept the
      flow.  So if the authorization server associates the authorization
      code with the redirect_uri of a particular end-user authorization
      and validates this redirect_uri with the redirect_uri passed to
      the tokens endpount, such an attack is detected (see
      <a href="#section-5.2.4.5">Section 5.2.4.5</a>).

   o  The authorization server may also enforce the usage and validation
      of pre-registered redirect URIs (see <a href="#section-5.2.3.5">Section 5.2.3.5</a>).  This will
      allow for an early recognition of sesssion fixation attempts.

   o  For native apps, one could also consider to use deployment-
      specific client ids and secrets (see <a href="#section-5.2.3.4">Section 5.2.3.4</a>, along with
      the binding of authorization code to client_id (see
      <a href="#section-5.2.4.4">Section 5.2.4.4</a>), to detect such an attack because the attacker
      does not have access the deployment-specific secret.  Thus he will
      not be able to exchange the authorization code.

   o  The client may consider to use other flows, which are not
      vulnerable to this kind of attacks such as "Implicit Grant" or
      "Resource Owner Password Credentials" (see <a href="#section-4.4.2">Section 4.4.2</a> or
      <a href="#section-4.4.3">Section 4.4.3</a>).

<span class="h5"><a class="selflink" name="section-4.4.1.8" href="#section-4.4.1.8">4.4.1.8</a>.  Threat: CSRF attack against redirect-uri</span>

   Cross-Site Request Forgery (CSRF) is a web-based attack whereby HTTP
   requests are transmitted from a user that the website trusts or has
   authenticated (e.g., via HTTP redirects or HTML forms).  CSRF attacks
   on OAuth approvals can allow an attacker to obtain authorization to
   OAuth protected resources without the consent of the User.

   This attack works against the redirect-uri used in the authorization
   code flow.  An attacker could authorize an authorization code to
   their own protected resources on an authorization server.  He then
   aborts the redirect flow back to the client on his device and tricks
   the victim into executing the redirect back to the client.  The
   client receives the redirect, fetches the token(s) from the
   authorization server and asscociates the victim's client session with
   the resources accessible using the token.

   Impact: The user accesses resources on behalf of the attacker.  The
   effective impact depends on the type of resource accessed.  For
   example, the user may upload private items to an attacker's
   resources.  Or when using OAuth in 3rd party login scenarios, the
   user may associate his client account with the attacker's idenity at
   the external identity provider.  This way the attacker could easily
   accces the victim's data at the client by logging in from another



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 31]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-32" id="page-32" href="#page-32" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   device with his credentials at the external identity provider.

   Countermeasures:

   o  The state parameter should be used to link the authorization
      request with the redirect-uri used deliver the access token.  This
      will ensure the client is not tricked into completing any redirect
      callback unless it is linked to an authorization request the
      client initiated.  The state parameter should be unguessable and
      the client should be capable of keeping the state parameter
      secret.

   o  Client developers and end-user can be educated not follow
      untrusted urls.

<span class="h5"><a class="selflink" name="section-4.4.1.9" href="#section-4.4.1.9">4.4.1.9</a>.  Threat: Clickjacking attack against authorization</span>

   With Clickjacking, a malicious site loads the target site in a
   transparent iframe overlaid on top of a set of dummy buttons which
   are carefully constructed to be placed directly under important
   buttons on the target site.  When a user clicks a visible button,
   they are actually clicking a button (such as an "Authorize" button)
   on the hidden page.

   Impact: An attacker can steal a user's authentication credentials and
   access their resources

   Countermeasure

   o  Native applications SHOULD use external browsers instead of
      embedding browsers in an iFrame when requesting end-user
      authorization

   o  For newer browsers, avoidance of iFrames can be enforced server
      side by using the X-FRAME-OPTION header - <a href="#section-5.2.2.7">Section 5.2.2.7</a>

   o  For older browsers, javascript framebusting techniques can be used
      but may not be effective in all browsers.

<span class="h5"><a class="selflink" name="section-4.4.1.10" href="#section-4.4.1.10">4.4.1.10</a>.  Threat: DoS, Exhaustion of resources attacks</span>

   If an authorization server includes a nontrivial amount of entropy in
   authorization codes or access tokens (limiting the number of possible
   codes/tokens) and automatically grants either without user
   intervention and has no limit on code or access tokens per user, an
   attacker could exhaust the pool by repeatedly directing user(s)
   browser to request code or access tokens.  This is because more
   entropy means a larger number of tokens can be issued.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 32]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-33" id="page-33" href="#page-33" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Countermeasures:

   o  The authorization server should consider limiting the number of
      access tokens granted per user.  The authorization server should
      include a nontrivial amount of entropy in authorization codes.

<span class="h5"><a class="selflink" name="section-4.4.1.11" href="#section-4.4.1.11">4.4.1.11</a>.  Threat: DoS using manufactured authorization codes</span>

   An attacker who owns a botnet can locate the redirect URIs of clients
   that listen on HTTP, access them with random authorization codes, and
   cause a large number of HTTPS connections to be concentrated onto the
   authorization server.  This can result in a DoS attack on the
   authorization server.

   This attack can still be effective even when CSRF defense/the 'state'
   parameter are deployed on the client side.  With such a defense, the
   attacker might need to incur an additional HTTP request to obtain a
   valid CSRF code/ state parameter.  This apparently cuts down the
   effectiveness of the attack by a factor of 2.  However, if the HTTPS/
   HTTP cost ratio is higher than 2 (the cost factor is estimated to be
   around 3.5x at
   <a href="http://www.semicomplete.com/blog/geekery/ssl-latency.html">http://www.semicomplete.com/blog/geekery/ssl-latency.html</a>), the
   attacker still achieves a magnification of resource utilization at
   the expense of the authorization server.

   Impact: There are a few effects that the attacker can accomplish with
   this OAuth flow that they cannot easily achieve otherwise.

   1.  Connection laundering: With the clients as the relay between the
       attacker and the authorization server, the authorization server
       learns little or no information about the identity of the
       attacker.  Defenses such rate limiting on the offending attacker
       machines are less effective due to the difficulty to identify the
       attacking machines.  Although an attacker could also launder its
       connections through an anonymizing systems such as Tor, the
       effectiveness of that approach depends on the capacity of the
       anonyming system.  On the other hand, a potentially large number
       of OAuth clients could be utilized for this attack.

   2.  Asymmetric resource utilization: The attacker incurs the cost of
       an HTTP connection and causes an HTTPS connection to be made on
       the authorization server; and the attacker can co-ordinate the
       timing of such HTTPS connections across multiple clients
       relatively easily.  Although the attacker could achieve something
       similar, say, by including an iframe pointing to the HTTPS URL of
       the authorization server in an HTTP web page and lure web users
       to visit that page, timing attacks using such a scheme may be
       more difficult as it seems nontrivial to synchronize a large



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 33]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-34" id="page-34" href="#page-34" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


       number of users to simultaneously visit a particular site under
       the attacker's control.

   Countermeasures

   o  Though not a complete countermeasure by themselves, CSRF defense
      and the 'state' parameter created with secure random codes SHOULD
      be deployed on the client side.  The client SHOULD forward the
      authorization code to the authorization server only after both the
      CSRF token and the 'state' parameter are validated.

   o  If the client authenticates the user, either through a single sign
      on protocol ( such as OpenID / Facebook Connect ) or through local
      authentication, the client SHOULD suspend the access by a user
      account if the number of invalid authorization codes submitted by
      this user exceeds a certain threshold.

   o  The authorization server SHOULD send an error response to the
      client reporting an invalid authorization code and rate limit or
      disallow connections from clients whose number of invalid requests
      exceeds a threshold.

   o  The authorization server MAY in addition sign the authorization
      code using the public key from its SSL certificate, and require
      the client to validate the signature.  To enhance interoperability
      between multiple clients and authorization servers, a standard
      procedure to create and validate the signature (including what
      attributes to sign) MAY be developed and agreed between the
      clients and the servers.

<span class="h4"><a class="selflink" name="section-4.4.2" href="#section-4.4.2">4.4.2</a>.  Implicit Grant</span>

   he implict grant flow, the access token is directly returned to the
   client as fragment part of the redirect_uri.  It is assumed that the
   token is not send to the redirect_uri target since HTTP user agents
   do not send fragments server requests.  Thus an attacker cannot
   eavesdrop the access token on this communication path and It cannot
   leak through HTTP referer headers.

<span class="h5"><a class="selflink" name="section-4.4.2.1" href="#section-4.4.2.1">4.4.2.1</a>.  Threat: Access token leak in transport/end-points</span>

   This token might be eavesdropped by an attacker.  The token is sent
   from server to client via a URI fragment of the redirect_uri.  If the
   communication is not secured or the end-point is not secured, the
   token could be leaked by parsing the returned URI.

   Impact: the attacker would be able to assume the same rights granted
   by the token.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 34]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-35" id="page-35" href="#page-35" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Countermeasures:

   o  The authorization server must ensure confidentialty of the
      response from the authorizaton server to the client (see
      <a href="#section-5.1.1">Section 5.1.1</a>).

<span class="h5"><a class="selflink" name="section-4.4.2.2" href="#section-4.4.2.2">4.4.2.2</a>.  Threat: Access token leak in browser history</span>

   An attacker could obtain the token from the browsers history.  Note
   this means the attacker needs access to the particular device.

   Countermeasures:

   o  Shorten token duration (see <a href="#section-5.1.5.3">Section 5.1.5.3</a>) and reduced scope of
      the token may reduce the impact of that attack (see
      <a href="#section-5.1.5.1">Section 5.1.5.1</a>).

   o  Make these requests non-cachable

   o  Native apps can directly embedd a browser widget and therewith
      gain full control of the cache.  So the app can cleanup browser
      history after authorization process.

<span class="h5"><a class="selflink" name="section-4.4.2.3" href="#section-4.4.2.3">4.4.2.3</a>.  Threat: Malicious client obtains authorization</span>

   An malicious client could attempt to obtain a token by fraud.

   The same countermeasures as for <a href="#section-4.4.1.4">Section 4.4.1.4</a> are applicable,
   except client authentication.

<span class="h5"><a class="selflink" name="section-4.4.2.4" href="#section-4.4.2.4">4.4.2.4</a>.  Threat: Manipulation of scripts</span>

   A hostile party could act as the client web server and replace or
   modify the actual implementation of the client (script).  This could
   be achieved using DNS or ARP spoofing.  This applies to clients
   implemented within the Web Browser in a scripting language.

   Impact: The attacker could obtain user credential information and
   assume the full identity of the user.

   Countermeasures:

   o  The authorization server must authenticate the server from which
      scripts are obtained (see <a href="#section-5.1.2">Section 5.1.2</a>).

   o  The client must ensure that scripts obtained have not been altered
      in transport (see <a href="#section-5.1.1">Section 5.1.1</a>).




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 35]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-36" id="page-36" href="#page-36" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Introduce one time per-use secrets (e.g. client_secret) values
      that can only be used by scripts in a small time window once
      loaded from a server.  The intention would be to reduce the
      effectiveness of copying client-side scripts for re-use in an
      attackers modified code. [[pending discussion]]

<span class="h5"><a class="selflink" name="section-4.4.2.5" href="#section-4.4.2.5">4.4.2.5</a>.  Threat: CSRF attack against redirect-uri</span>

   Cross-Site Request Forgery (CSRF) is a web-based attack whereby HTTP
   requests are transmitted from a user that the website trusts or has
   authenticated (e.g., via HTTP redirects or HTML forms).  CSRF attacks
   on OAuth approvals can allow an attacker to obtain authorization to
   OAuth protected resources without the consent of the User.

   This attack works against the redirect-uri used in the implicit grant
   flow.  An attacker could acquire an access token to their own
   protected resources.  He could then construct a redirect-uri and
   embed their access token in that uri.  If he can trick the user into
   following the redirect-uri and the client does not have protection
   against this attack, the user may have the attacker's access token
   authorized within their client.

   Impact: The user accesses resources on behalf of the attacker.  The
   effective impact depends on the type of resource accessed.  For
   example, the user may upload private items to an attacker's
   resources.  Or when using OAuth in 3rd party login scenarios, the
   user may associate his client account with the attacker's idenity at
   the external identity provider.  This way the attacker could easily
   accces the victim's data at the client by logging in from another
   device with his credentials at the external identity provider.

   Countermeasures:

   o  The state parameter should be used to link the authorization
      request with the redirect-uri used deliver the access token.  This
      will ensure the client is not tricked into completing any redirect
      callback unless it is linked to an authorization request the
      client initiated.  The state parameter should be unguessable and
      the client should be capable of keeping the state parameter
      secret.

   o  Client developers and end-user can be educated not follow
      untrusted urls.








<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 36]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-37" id="page-37" href="#page-37" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h4"><a class="selflink" name="section-4.4.3" href="#section-4.4.3">4.4.3</a>.  Resource Owner Password Credentials</span>

   The "Resource Owner Password Credentials" grant type (see
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], Section 4.3), often used for legacy/migration
   reasons, allows a client to request an access token using an end-
   users user-id and password along with its own credential.  This grant
   type has higher risk because it maintains the uid/password anti-
   pattern.  Additionally, because the user does not have control over
   the authorization process, clients using this grant type are not
   limited by scope, but instead have potentially the same capabilities
   as the user themselves.  As there is no authorization step, the
   ability to offer token revocation is bypassed.

   Impact: The resource server can only differentiate scope based on the
   access token being associated with a particular client.  The client
   could also acquire long-living tokens and pass them up to a attacker
   web service for further abuse.  The client, eavesdroppers, or end-
   points could eavesdrop user id and password.

   Countermeasures:

   o  Except for migration reasons, minimize use of this grant type

   o  The authorization server must validate the client id associated
      with the particular refresh token with every refresh request -
      <a href="#section-5.2.2.2">Section 5.2.2.2</a>

   o  Authorization server MUST ensure that these transmissions are
      protected using transport-layer mechanisms such as TLS or SSL (see
      <a href="#section-5.1.1">Section 5.1.1</a>).

<span class="h5"><a class="selflink" name="section-4.4.3.1" href="#section-4.4.3.1">4.4.3.1</a>.  Threat: Accidental exposure of passwords at client site</span>

   If the client does not provide enough protection, an attacker or
   disgruntled employee could retrieve the passwords for a user.

   Countermeasures:

   o  Use other flows, which do not rely on the client's cooperation for
      secure resource owner credential handling

   o  Use digest authentication instead of plaintext credential
      processing

   o  Obfuscation of passwords in logs






<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 37]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-38" id="page-38" href="#page-38" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h5"><a class="selflink" name="section-4.4.3.2" href="#section-4.4.3.2">4.4.3.2</a>.  Threat: Client obtains scopes without end-user authorization</span>

   All interaction with the resource owner is performed by the client.
   Thus it might, intentionally or unintentionally, happen that the
   client obtains a token with scope unknown for or unintended by the
   resource owner.  For example, the resource owner might think the
   client needs and acquires read-only access to its media storage only
   but the client tries to acquire an access token with full access
   permissions.

   Countermeasures:

   o  Use other flows, which do not rely on the client's cooperation for
      resource owner interaction

   o  The authorization server may generally restrict the scope of
      access tokens (<a href="#section-5.1.5.1">Section 5.1.5.1</a>) issued by this flow.  If the
      particular client is trustworthy and can be authenticated in a
      reliable way, the authorization server could relax that
      restriction.  Resource owners may prescribe (e.g. in their
      preferences) what the maximum permission for client using this
      flow shall be.

   o  The authorization server could notify the resource owner by an
      appropriate media, e.g. e-Mail, of the grant issued (see
      <a href="#section-5.1.3">Section 5.1.3</a>).

<span class="h5"><a class="selflink" name="section-4.4.3.3" href="#section-4.4.3.3">4.4.3.3</a>.  Threat: Client obtains refresh token through automatic</span>
          authorization

   All interaction with the resource owner is performed by the client.
   Thus it might, intentionally or unintentionally, happen that the
   client obtains a long-term authorization represented by a refresh
   token even if the resource owner did not intend so.

   Countermeasures:

   o  Use other flows, which do not rely on the client's cooperation for
      resource owner interaction

   o  The authorization server may generally refuse to issue refresh
      tokens in this flow (see <a href="#section-5.2.2.1">Section 5.2.2.1</a>).  If the particular
      client is trustworthy and can be authenticated in a reliable way
      (see client authentication), the authorization server could relax
      that restriction.  Resource owners may allow or deny (e.g. in
      their preferences) to issue refresh tokens using this flow as
      well.




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 38]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-39" id="page-39" href="#page-39" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  The authorization server could notify the resource owner by an
      appropriate media, e.g. e-Mail, of the refresh token issued (see
      <a href="#section-5.1.3">Section 5.1.3</a>).

<span class="h5"><a class="selflink" name="section-4.4.3.4" href="#section-4.4.3.4">4.4.3.4</a>.  Threat: Obtain user passwords on transport</span>

   An attacker could attempt to eavesdrop the transmission of end-user
   credentials with the grant type "password" between client and server.

   Impact: disclosure of a single end-users password.

   Countermeasures:

   o  Confidentiality of Requests - <a href="#section-5.1.1">Section 5.1.1</a>

   o  alternative authentication means, which do not require to send
      plaintext credentials over the wire (Examples: Digest
      authentication)

<span class="h5"><a class="selflink" name="section-4.4.3.5" href="#section-4.4.3.5">4.4.3.5</a>.  Threat: Obtain user passwords from authorization server</span>
          database

   An attacker may obtain valid username/password combinations from the
   authorization server's database by gaining access to the database or
   launching a SQL injection attack.

   Impact: disclosure of all username/password combinations.  The impact
   may exceed the domain of the authorization server since many users
   tend to use the same credentials on different services.

   Countermeasures:

   o  Credential storage protection can be employed - <a href="#section-5.1.4.1">Section 5.1.4.1</a>

<span class="h5"><a class="selflink" name="section-4.4.3.6" href="#section-4.4.3.6">4.4.3.6</a>.  Threat: Online guessing</span>

   An attacker may try to guess valid username/password combinations
   using the grant type "password".

   Impact: Revelation of a single username/password combination.

   Countermeasures:

   o  Password policy - <a href="#section-5.1.4.2.1">Section 5.1.4.2.1</a>

   o  Lock accounts - <a href="#section-5.1.4.2.3">Section 5.1.4.2.3</a>





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 39]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-40" id="page-40" href="#page-40" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Tar pit - <a href="#section-5.1.4.2.4">Section 5.1.4.2.4</a>

   o  CAPTCHA - <a href="#section-5.1.4.2.5">Section 5.1.4.2.5</a>

   o  Abandon on grant type "password"

   o  Client authentication (see <a href="#section-5.2.3">Section 5.2.3</a>) will provide another
      authentication factor and thus hinder the attack.

<span class="h4"><a class="selflink" name="section-4.4.4" href="#section-4.4.4">4.4.4</a>.  Client Credentials</span>

   Client credentials (see [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], Section 3) consist of an
   identifier (not secret) combined with an additional means (such as a
   matching client secret) of authenticating a client.

   [[Threats seem to be covered elsewhere such as <a href="#section-4.4.1.1">Section 4.4.1.1</a>]]

<span class="h3"><a class="selflink" name="section-4.5" href="#section-4.5">4.5</a>.  Refreshing an Access Token</span>

<span class="h4"><a class="selflink" name="section-4.5.1" href="#section-4.5.1">4.5.1</a>.  Threat: Eavesdropping refresh tokens from authorization server</span>

   dAn attacker may eavesdrop refresh tokens when they are transmitted
   from the authorization server to the client.

   Countermeasures:

   o  Authorization servers MUST ensure that these transmissions are
      protected using transport-layer mechanisms such as TLS or SSL (see
      <a href="#section-5.1.1">Section 5.1.1</a>).

   o  If end-to-end confidentiality cannot be guaranteed, reducing scope
      (see <a href="#section-5.1.5.1">Section 5.1.5.1</a>) and expiry time (see <a href="#section-5.1.5.3">Section 5.1.5.3</a>) for
      issued access tokens can be used to reduce the damage in case of
      leaks.

<span class="h4"><a class="selflink" name="section-4.5.2" href="#section-4.5.2">4.5.2</a>.  Threat: Obtaining refresh token from authorization server</span>
        database

   This threat is applicable if the authorization server stores refresh
   tokens as handles in a database.  An attacker may obtain refresh
   tokens from the authorization server's database by gaining access to
   the database or launching a SQL injection attack.

   Impact: disclosure of all refresh tokens

   Countermeasures:





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 40]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-41" id="page-41" href="#page-41" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Credential storage protection - <a href="#section-5.1.4.1">Section 5.1.4.1</a>

   o  Bind token to client id, if the attacker cannot obtain the
      required id and secret - <a href="#section-5.1.5.8">Section 5.1.5.8</a>

<span class="h4"><a class="selflink" name="section-4.5.3" href="#section-4.5.3">4.5.3</a>.  Threat: Obtain refresh token by online guessing</span>

   An attacker may try to guess valid refresh token values and send it
   using the grant type "refresh_token" in order to obtain a valid
   access token.

   Impact: exposure of single refresh token and derivable access tokens.

   Countermeasures:

   o  For handle-based designs - <a href="#section-5.1.5.11">Section 5.1.5.11</a>

   o  For assertion-based designs - <a href="#section-5.1.5.9">Section 5.1.5.9</a>

   o  Bind token to client id, because the attacker would guess the
      matching client id, too (see <a href="#section-5.1.5.8">Section 5.1.5.8</a>)

   o  Authenticate the client, adds another element the attacker has to
      guess (see <a href="#section-5.2.3.4">Section 5.2.3.4</a>)

<span class="h4"><a class="selflink" name="section-4.5.4" href="#section-4.5.4">4.5.4</a>.  Threat: Obtain refresh token phishing by counterfeit</span>
        authorization server

   An attacker could try to obtain valid refresh tokens by proxying
   requests to the authorization server.  Given the assumption that the
   authorization server URL is well-known at development time or can at
   least be obtained from a well-known resource server, the attacker
   must utilize some kind of spoofing in order to suceed.

   Countermeasures:

   o  Server authentication (as described in <a href="#section-5.1.2">Section 5.1.2</a>)

<span class="h3"><a class="selflink" name="section-4.6" href="#section-4.6">4.6</a>.  Accessing Protected Resources</span>

<span class="h4"><a class="selflink" name="section-4.6.1" href="#section-4.6.1">4.6.1</a>.  Threat: Eavesdropping access tokens on transport</span>

   An attacker could try to obtain a valid access token on transport
   between client and resource server.  As access tokens are shared
   secrets between authorization and resource server, they MUST by
   treated with the same care as other credentials (e.g. end-user
   passwords).




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 41]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-42" id="page-42" href="#page-42" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Countermeasures:

   o  Access tokens sent as bearer tokens, SHOULD NOT be sent in the
      clear over an insecure channel.  Instead transport protection
      means shall be utilized to prevent eavesdropping by an attacker
      (see <a href="#section-5.1.1">Section 5.1.1</a>).

   o  A short lifetime reduces impact in case tokens are compromised
      (see <a href="#section-5.1.5.3">Section 5.1.5.3</a>).

   o  The access token can be bound to a client's identity and require
      the client to authenticate with the resource server (see
      <a href="#section-5.4.2">Section 5.4.2</a>).  Client authentication MUST be performed without
      exposing the required secret to the transport channel.

<span class="h4"><a class="selflink" name="section-4.6.2" href="#section-4.6.2">4.6.2</a>.  Threat: Replay authorized resource server requests</span>

   An attacker could attempt to replay valid requests in order to obtain
   or to modify/destroy user data.

   Countermeasures:

   o  The resource server should utilize transport security measure in
      order to prevent such attacks (see <a href="#section-5.1.1">Section 5.1.1</a>).  This would
      prevent the attacker from capturing valid requests.

   o  Alternatively, the resource server could employ signed requests
      (see <a href="#section-5.4.3">Section 5.4.3</a>) along with nounces and timestamps in order to
      uniquely identify requests.  The resource server MUST detect and
      refuse every replayed request.

<span class="h4"><a class="selflink" name="section-4.6.3" href="#section-4.6.3">4.6.3</a>.  Threat: Guessing access tokens</span>

   Where the token is a handle, the attacker may use attempt to guess
   the access token values based on knowledge they have from other
   access tokens.

   Impact: Access to a single user's data.

   Countermeasures:

   o  Handle Tokens should have a reasonable entropy (see
      <a href="#section-5.1.5.11">Section 5.1.5.11</a>) in order to make guessing a valid token value
      difficult.

   o  Assertion (or self-contained token ) tokens contents SHALL be
      protected by a digital signature (see <a href="#section-5.1.5.9">Section 5.1.5.9</a>).




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 42]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-43" id="page-43" href="#page-43" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Security can be further strengthened by using a short access token
      duration (see <a href="#section-5.1.5.2">Section 5.1.5.2</a> and <a href="#section-5.1.5.3">Section 5.1.5.3</a>).

<span class="h4"><a class="selflink" name="section-4.6.4" href="#section-4.6.4">4.6.4</a>.  Threat: Access token phishing by counterfeit resource server</span>

   An attacker may pretend to be a particular resource server and to
   accept tokens from a particular authorization server.  If the client
   sends a valid access tokens to this counterfeit resource server, the
   server in turn may use that token to access other services on behalf
   of the resource owner.

   Countermeasures:

   o  Clients SHOULD not make authenticated requests with an access
      token to unfamiliar resource servers, regardless of the presence
      of a secure channel.  If the resource server address is well-known
      to the client, it may authenticate the resource servers (see
      <a href="#section-5.1.2">Section 5.1.2</a>).

   o  Associate the endpoint address of the resource server the client
      talked to with the access token (e.g. in an audience field) and
      validate association at legitimate resource server.  The endpoint
      address validation policy may be strict (exact match) or more
      relaxed (e.g. same host).  This would require to tell the
      authorization server the resource server endpoint address in the
      authorization process.

   o  Associate an access token with a client and authenticate the
      client with resource server requests (typically via signature in
      order to not disclose secret to a potential attacker).  This
      prevents the attack because the counterfeit server is assumed to
      miss the capabilities to correctly authenticate on behalf of the
      legitimate client to the resource server (<a href="#section-5.4.2">Section 5.4.2</a>).

   o  Restrict the token scope (see <a href="#section-5.1.5.1">Section 5.1.5.1</a>) and or limit the
      token to a certain resource server (<a href="#section-5.1.5.5">Section 5.1.5.5</a>).

<span class="h4"><a class="selflink" name="section-4.6.5" href="#section-4.6.5">4.6.5</a>.  Threat: Abuse of token by legitimate resource server or client</span>

   A legitimate resource server could attempt to use an access token to
   access another resource servers.  Similarily, a client could try to
   use a token obtained for one server on another resource server.

   Countermeasures:

   o  Tokens should be restricted to particular resource servers (see
      <a href="#section-5.1.5.5">Section 5.1.5.5</a>).




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 43]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-44" id="page-44" href="#page-44" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h4"><a class="selflink" name="section-4.6.6" href="#section-4.6.6">4.6.6</a>.  Threat: Leak of confidential data in HTTP-Proxies</span>

   The HTTP Authorization scheme (OAuth HTTP Authorization Scheme) is
   optional.  However, [<a href="./rfc2616">RFC2616</a>](Fielding, R., Gettys, J., Mogul, J.,
   Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
   Transfer Protocol -- HTTP/1.1," .) relies on the Authorization and
   WWW-Authenticate headers to distinguish authenticated content so that
   it can be protected.  Proxies and caches, in particular, may fail to
   adequately protect requests not using these headers.  For example,
   private authenticated content may be stored in (and thus retrievable
   from) publicly-accessible caches.

   CounterMeasures:

   o  Resource servers not using the HTTP Authorization scheme (OAuth
      HTTP Authorization Scheme - see <a href="#section-5.4.1">Section 5.4.1</a>) should take care to
      use other mechanisms, such as the Cache-Control header, to ensure
      that authenticated content is protected.

   o  Reducing scope (see <a href="#section-5.1.5.1">Section 5.1.5.1</a>) and expiry time
      (<a href="#section-5.1.5.3">Section 5.1.5.3</a>) for access tokens can be used to reduce the
      damage in case of leaks.

<span class="h4"><a class="selflink" name="section-4.6.7" href="#section-4.6.7">4.6.7</a>.  Threat: Token leakage via logfiles and HTTP referrers</span>

   If access tokens are sent via URI query parameters, such tokens may
   leak to log files and HTTP referrers.

   Countermeasures:

   o  Use authorization headers or POST parameters instead of URI
      request parameters (see <a href="#section-5.4.1">Section 5.4.1</a>).

   o  Set logging configuration appropriately

   o  Prevent unauthorized persons from access to system log files (see
      <a href="#section-5.1.4.1.1">Section 5.1.4.1.1</a>)

   o  HTTP referrers can be prevented by reloading the target page again
      without URI parameters

   o  Abuse of leaked access tokens can be prevented by enforcing
      authenticated requests (see <a href="#section-5.4.2">Section 5.4.2</a>).

   o  The impact of token leakage may be reduced by limiting scope (see
      <a href="#section-5.1.5.1">Section 5.1.5.1</a>) and duration (see <a href="#section-5.1.5.3">Section 5.1.5.3</a>) and enforcing
      one time token usage (see <a href="#section-5.1.5.4">Section 5.1.5.4</a>).




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 44]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-45" id="page-45" href="#page-45" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Security Considerations</span>

   This section describes the countermeasures as recommended to mitigate
   the threats as described in <a href="#section-4">Section 4</a>.

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  General</span>

<span class="h4"><a class="selflink" name="section-5.1.1" href="#section-5.1.1">5.1.1</a>.  Confidentiality of Requests</span>

   This is applicable to all requests sent from client to authorization
   server or resource server.  While OAuth provides a mechanism for
   verifying the integrity of requests, it provides no guarantee of
   request confidentiality.  Unless further precautions are taken,
   eavesdroppers will have full access to request content and may be
   able to mount attacks through using content of request, e.g. secrets
   or tokens, or mount replay attacks.

   Attacks can be mitigated by using transport-layer mechanisms such as
   TLS or SSL.  VPN may considered as well.

   This is a countermeasure against the following threats:

   o  Replay of access tokens obtained on tokens endpoint or resource
      server's endpoint

   o  Replay of refresh tokens obtained on tokens endpoint

   o  Replay of authorization codes obtained on tokens endpoint
      (redirect?)

   o  Replay of user passwords and client secrets

<span class="h4"><a class="selflink" name="section-5.1.2" href="#section-5.1.2">5.1.2</a>.  Server authentication</span>

   HTTPS server authentication or similar means can be used to
   authenticate the identity of a server.  The goal is to reliably bind
   the DNS name of the server to the public key presented by the server
   during connection establishment.

   The client MUST validate the binding of the server to its domain
   name.  If the server fails to prove that binding, it is condered a
   men-in-the-middle.  The security measure depends on the certification
   authorities the client trusts for that purpose.  Clients should
   carefully select those trusted CAs and protect the storage for
   trusted CA certificates from modifications.

   This is a countermeasure against the following threats:




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 45]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-46" id="page-46" href="#page-46" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Spoofing

   o  Proxying

   o  Phishing by conterfeit servers

<span class="h4"><a class="selflink" name="section-5.1.3" href="#section-5.1.3">5.1.3</a>.  Always keep the resource owner informed</span>

   Transparency to the resource owner is a key element of the OAuth
   protocol.  The user shall always be in control of the authorization
   processes and get the necessary information to meet informed
   decisions.  Moreover, user involvement is a further security
   countermeasure.  The user can probably recognize certain kinds of
   attacks better than the authorization server.  Information can be
   presented/exchanged during the authorization process, after the
   authorization process, and every time the user wishes to get informed
   by using techniques such as:

   o  User consent forms

   o  Notification messages (e-Mail, SMS, ...)

   o  Activity/Event logs

   o  User self-care apps or portals

<span class="h4"><a class="selflink" name="section-5.1.4" href="#section-5.1.4">5.1.4</a>.  Credentials</span>

   This sections describes countermeasures used to protect all kind of
   credentials from unauthorized access and abuse.  Credentials are long
   term secrets, such as client secrets and user passwords as well as
   all kinds of tokens (refresh and access token) or authorization
   codes.

<span class="h5"><a class="selflink" name="section-5.1.4.1" href="#section-5.1.4.1">5.1.4.1</a>.  Credential storage protection</span>

<span class="h6"><a class="selflink" name="section-5.1.4.1.1" href="#section-5.1.4.1.1">5.1.4.1.1</a>.  Standard system security means</span>

   A server system may be locked down so that no attacker may get access
   to sensible configuration files and databases.

<span class="h6"><a class="selflink" name="section-5.1.4.1.2" href="#section-5.1.4.1.2">5.1.4.1.2</a>.  Standard SQL inj. Countermeasures</span>

   If a client identifier or other authentication component is queried
   or compared against a SQL Database it may become possible for an
   injection attack to occur if parameters received are not validated
   before submission to the database.




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 46]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-47" id="page-47" href="#page-47" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  Ensure that server code is using the minimum database privileges
      possible to reduce the "surface" of possible attacks.

   o  Avoid dynamic SQL using concatenated input.  If possible, use
      static SQL.

   o  When using dynamic SQL, parameterize queries using bind arguments.
      Bind arguments eliminate possibility of SQL injections.

   o  Filter and sanitize the input.  For example, if an identifier has
      a known format, ensure that the supplied value matches the
      identifier syntax rules.

<span class="h6"><a class="selflink" name="section-5.1.4.1.3" href="#section-5.1.4.1.3">5.1.4.1.3</a>.  No cleartext storage of credentials</span>

   The authorization server may consider to not store credential in
   clear text.  Typical approaches are to store hashes instead.  If the
   credential lacks a reasonable entropy level (because it is a user
   password) an additional salt will harden the storage to prevent
   offline dictionary attacks.  Note: Some authentication protocols
   require the authorization server to have access to the secret in the
   clear.  Those protocols cannot be implemented if the server only has
   access to hashes.

<span class="h6"><a class="selflink" name="section-5.1.4.1.4" href="#section-5.1.4.1.4">5.1.4.1.4</a>.  Encryption of credentials</span>

   For client applicatinos, insecurely persisted client credentials are
   easy targets for attackers to obtain.  Store client credentials using
   an encrypted persistence mechanism such as a keystore or database.
   Note that compiling client credentials directly into client code
   makes client applications vulnerable to scanning as well as difficult
   to administer should client credentials change over time.

<span class="h6"><a class="selflink" name="section-5.1.4.1.5" href="#section-5.1.4.1.5">5.1.4.1.5</a>.  Use of asymmetric cryptography</span>

   Usage of asymmetric cryptography will free the authorization server
   of the obligation to manage credentials.  Nevertheless, it MUST
   ensure the integrity of the respective public keys.

<span class="h5"><a class="selflink" name="section-5.1.4.2" href="#section-5.1.4.2">5.1.4.2</a>.  Online attacks on secrets</span>

<span class="h6"><a class="selflink" name="section-5.1.4.2.1" href="#section-5.1.4.2.1">5.1.4.2.1</a>.  Password policy</span>

   The authorization server may decide to enforce a complex user
   password policy in order to increase the user passwords' entropy.
   This will hinder online password attacks.





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 47]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-48" id="page-48" href="#page-48" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h6"><a class="selflink" name="section-5.1.4.2.2" href="#section-5.1.4.2.2">5.1.4.2.2</a>.  High entropy of secrets</span>

   When creating token handles or other secrets not intended for usage
   by human users, the authorization server MUST include a reasonable
   level of entropy in order to mitigate the risk of guessing attacks.

   The token value MUST be constructed from a cryptographically strong
   random or pseudo-random number sequence [<a href="./rfc1750">RFC1750</a>] generated by the
   Authorization Server.  The probability of any two Authorization Code
   values being identical MUST be less than or equal to 2^(-128) and
   SHOULD be less than or equal to 2^(-160).

<span class="h6"><a class="selflink" name="section-5.1.4.2.3" href="#section-5.1.4.2.3">5.1.4.2.3</a>.  Lock accounts</span>

   Online attacks on passwords can be mitigated by locking the
   respective accounts after a certain number of failed attempts.

   Note: This measure can be abused to lock down legitimate service
   users.

<span class="h6"><a class="selflink" name="section-5.1.4.2.4" href="#section-5.1.4.2.4">5.1.4.2.4</a>.  Tar pit</span>

   The authorization server may react on failed attempts to authenticate
   by username/password by temporarily locking the respective account
   and delaying the response for a certain duration.  This duration may
   increase with the number of failed attempts.  The objective is to
   slow the attackes attempts on a certain username down.

   Note: this may require a more complex and stateful design of the
   authorization server.

<span class="h6"><a class="selflink" name="section-5.1.4.2.5" href="#section-5.1.4.2.5">5.1.4.2.5</a>.  Usage of CAPTCHAs</span>

   The idea is to prevent programms from automatically checkinga huge
   number of passwords by requiring human interaction.

   Note: this has a negative impact on user experience.

<span class="h4"><a class="selflink" name="section-5.1.5" href="#section-5.1.5">5.1.5</a>.  Tokens (access, refresh, code)</span>

<span class="h5"><a class="selflink" name="section-5.1.5.1" href="#section-5.1.5.1">5.1.5.1</a>.  Limit token scope</span>

   The authorization server may decide to reduce or limit the scope
   associated with a token.  Basis of this decision is out of scope,
   examples are:






<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 48]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-49" id="page-49" href="#page-49" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  a client-specific policy, e.g. issue only less powerful tokens to
      unauthenticated clients,

   o  a service-specific policy, e.g. it a very sensible service,

   o  a resource-owner specific setting, or

   o  combinations of such policies and preferences.

   The authorization server may allow different scopes dependent on the
   grant type.  For example, end-user authorization via direct
   interaction with the end-user (authorization code) might be
   considered more reliable than direct authorization via gran type
   username/password.  This means will reduce the impact of the
   following threats:

   o  token leakage

   o  token issuance to malicious software

   o  unintended issuance of to powerful tokens with resource owner
      credentials flow

<span class="h5"><a class="selflink" name="section-5.1.5.2" href="#section-5.1.5.2">5.1.5.2</a>.  Expiration time</span>

   Tokens should generally expire after a reasonable duration.  This
   complements and strengthens other security measures (such as
   signatures) and reduces the impact of all kinds of token leaks.

<span class="h5"><a class="selflink" name="section-5.1.5.3" href="#section-5.1.5.3">5.1.5.3</a>.  Short expiration time</span>

   A short expiration time for tokens is a protection means against the
   following threats:

   o  replay

   o  reduce impact of token leak

   o  reduce likelyhood of sucessful online guessing

   Note: Short token duration requires preciser clock synchronisation
   between authorization server and resource server.  Furthermore,
   shorter duration may require more token refreshments (access token)
   or repeated end-user authorization processes (authorization code and
   refresh token).






<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 49]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-50" id="page-50" href="#page-50" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h5"><a class="selflink" name="section-5.1.5.4" href="#section-5.1.5.4">5.1.5.4</a>.  Limit number of usages/ One time usage</span>

   The authorization server may restrict the number of request, which
   can be performed with a certain token.  This mechanism can be used to
   mitigate the following threats:

   o  replay of tokens

   o  reduce likelyhood of sucessful online guessing

   Additionally, If an Authorization Server observes multiple attempts
   to redeem a authorization code, the Authorization Server may want to
   revoke all tokens granted based on the authorization code.

<span class="h5"><a class="selflink" name="section-5.1.5.5" href="#section-5.1.5.5">5.1.5.5</a>.  Bind tokens to a particular resource server (Audience)</span>

   Authorization servers in multi-service environments may consider to
   issue tokens with different content to different resource servers and
   to explicitely indicate in the token the target server a token is
   intended to be sent to (see Audience in SAML Assertions).  This
   countermeasure can be used in the following situations:

   o  It reduce the impact of a successful replay attempt, since the
      token is applicable to a single resource server, only.

   o  It prevents abuse of a token by a rough resource server or client,
      since the token can only be used on that server.  It is rejected
      by other servers.

   o  It reduce the impact of a leakage of a valid token to a conterfeit
      resource server.

<span class="h5"><a class="selflink" name="section-5.1.5.6" href="#section-5.1.5.6">5.1.5.6</a>.  Use endpoint address as token audience</span>

   This may be used to indicate to a resource server, which endpoint
   address has been used to obtain the token.  This measure will allow
   to detect requests from a counterfeit resource server, since such
   token will contain the endpoint address of that server.

<span class="h5"><a class="selflink" name="section-5.1.5.7" href="#section-5.1.5.7">5.1.5.7</a>.  Audience and Token scopes</span>

   Deployments may consider to use only tokens with explicitely defined
   scope, where every scope is associated with a particular resource
   server.  This approach can be used to mitigate attacks, where a
   resource server or client uses a token for a different then the
   intended purpose.





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 50]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-51" id="page-51" href="#page-51" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h5"><a class="selflink" name="section-5.1.5.8" href="#section-5.1.5.8">5.1.5.8</a>.  Bind token to client id</span>

   An authorization server may bind a token to a certain client
   identity.  This identity match must be validated for every request
   with that token.  This means can be used, to

   o  detect token leakage and

   o  prevent token abuse.

   Note: Validating the client identity may require the target server to
   authenticate the client's identity.  This authentication can be based
   on secrets managed independent of the token (e.g. pre-registered
   client id/secret on authorization server) or sent with the token
   itself (e.g. as part of the encrypted token content).

<span class="h5"><a class="selflink" name="section-5.1.5.9" href="#section-5.1.5.9">5.1.5.9</a>.  Signed tokens</span>

   Self-contained tokens shall be signed in order to detect any attempt
   to modify or produce faked tokens.

<span class="h5"><a class="selflink" name="section-5.1.5.10" href="#section-5.1.5.10">5.1.5.10</a>.  Encryption of token content</span>

   Self-contained may be encrypted for privacy reasons or to protect
   system internal data.

<span class="h5"><a class="selflink" name="section-5.1.5.11" href="#section-5.1.5.11">5.1.5.11</a>.  Random token value with high entropy</span>

   When creating token handles, the authorization server MUST include a
   reasonable level of entropy in order to mitigate the risk of guessing
   attacks.  The token value MUST be constructed from a
   cryptographically strong random or pseudo-random number sequence
   [<a href="./rfc1750">RFC1750</a>] generated by the Authorization Server.  The probability of
   any two token values being identical MUST be less than or equal to
   2^(-128) and SHOULD be less than or equal to 2^(-160).

<span class="h5"><a class="selflink" name="section-5.1.5.12" href="#section-5.1.5.12">5.1.5.12</a>.  Assertion formats</span>

   For service providers intending to implement an assertion-based token
   design it is highly recommended to adopt a standard assertion format
   (such as SAML or JWT).

<span class="h4"><a class="selflink" name="section-5.1.6" href="#section-5.1.6">5.1.6</a>.  Access tokens</span>

   o  keep them in transient memory (accessible by the client app only)

   o  exposure to 3rd parties (malicious app)




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 51]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-52" id="page-52" href="#page-52" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  limit number of access tokens granted to a user

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  Authorization Server</span>

<span class="h4"><a class="selflink" name="section-5.2.1" href="#section-5.2.1">5.2.1</a>.  Authorization Codes</span>

<span class="h5"><a class="selflink" name="section-5.2.1.1" href="#section-5.2.1.1">5.2.1.1</a>.  Automatic revocation of derived tokens if abuse is detected</span>

   If an Authorization Server observes multiple attempts to redeem a
   authorization code, the Authorization Server may want to revoke all
   tokens granted based on the authorization code.

<span class="h4"><a class="selflink" name="section-5.2.2" href="#section-5.2.2">5.2.2</a>.  Refresh tokens</span>

<span class="h5"><a class="selflink" name="section-5.2.2.1" href="#section-5.2.2.1">5.2.2.1</a>.  Restricted issuance of refresh tokens</span>

   The authorization server may decide based on an appropriate policy
   not to issue refresh tokens.  Since refresh tokens areo long term
   credentials, they may be subject theft.  For example, if the
   authorization server does not trust a client to securely store such
   tokens, it may refuse to issue such a client a refresh token.

<span class="h5"><a class="selflink" name="section-5.2.2.2" href="#section-5.2.2.2">5.2.2.2</a>.  Binding of refresh token to client_id</span>

   The authorization server MUST bind every refresh token to the id of
   the client such a token was originally issued to and validate this
   binding for every request to refresh that token.  This measure is a
   countermeasure against refresh token theft or leakage.

   Note: This binding MUST be protected from unauthorized modifications.

<span class="h5"><a class="selflink" name="section-5.2.2.3" href="#section-5.2.2.3">5.2.2.3</a>.  Refresh Token Replacement</span>

   Refresh token replacement is intended to automatically detect and
   prevent attempts to use the same refresh token in parallel from
   different apps/devices.  This happens if a token gets stolen from the
   client and is subsequently used by the attacker and the legitimate
   client.  The basic idea is to change the refresh token value with
   every refresh request in order to detect attempts to obtain access
   tokens using old refresh tokens.  Since the authorization server
   cannot determine whether the attacker or the legitimate client is
   trying to access, in case of such an access attempt the valid refresh
   token and the access authorization associated with it are both
   revoked.

   The OAuth specification supports this measure in that the tokens
   response allows the authorization server to return a new refresh
   token even for requests with grant type "refresh_token".



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 52]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-53" id="page-53" href="#page-53" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   Note: this measure may cause problems in clustered environments since
   usage of the currently valid refresh token must be ensured.  In such
   an environment, other measures might be more appropriate.

<span class="h5"><a class="selflink" name="section-5.2.2.4" href="#section-5.2.2.4">5.2.2.4</a>.  Refresh Token Revocation</span>

   The authorization server may allow clients or end-users to
   explicitely request the invalidation of refresh tokens.

   This is a countermeasure againts:

   o  device theft

   o  ...

<span class="h5"><a class="selflink" name="section-5.2.2.5" href="#section-5.2.2.5">5.2.2.5</a>.  Combine refresh token requests with user-provided secret</span>

   The exchange of a refresh token can be bound to the presence of a
   certain user-provided secret, such as a PIN, a password or a SIM
   card.  This is a kind of multi-factor authentication on the tokens
   endpoint, since an attacker must possess both factors in order to be
   able to obtain an access token.

<span class="h5"><a class="selflink" name="section-5.2.2.6" href="#section-5.2.2.6">5.2.2.6</a>.  Device identification</span>

   The authorization server may require to bind authentication
   credentials to a device identifier or token assigned to that device.
   As the IMEI can be spoofed, that is not suitable, For mobile phones,
   a registration process can be used to assign a unique token to the
   device using an sms message.  That token or identifer can then be
   validated with when authenticating user credentials.

   This is a countermeasure against the following threats:

   o  phishing attacks

   o  ...

<span class="h5"><a class="selflink" name="section-5.2.2.7" href="#section-5.2.2.7">5.2.2.7</a>.  X-FRAME-OPTION header</span>

   For newer browsers, avoidance of iFrames can be enforced server side
   by using the X-FRAME-OPTION header.  This header can have two values,
   deny and sameorigin, which will block any framing or framing by sites
   with a different origin, respectively.

   This is a countermeasure against the following threats:





<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 53]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-54" id="page-54" href="#page-54" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   o  clickjacking attacks

   o  ...

<span class="h4"><a class="selflink" name="section-5.2.3" href="#section-5.2.3">5.2.3</a>.  Client authentication and authorization</span>

   As described in <a href="#section-3">Section 3</a> (Security Features), clients are
   identified, authenticated and authorized for several purposes, such
   as a

   o  Collate sub-sequent requests to the same client,

   o  Indicate the trustworthiness of a particular client to the end-
      user,

   o  Authorize access of clients to certain features on the
      authorization or resource server, and

   o  Log a client identity to log files for analysis or statics.

   Due to the different capababilities and characterictics of the
   different client types, there are different ways to support achieve
   objectives, which will be described in this section.  Generally
   spoken, authorization server providers should be aware of the
   security policy and deployment of a particular clients and adapt its
   treatment accordingly.  For example, one approach could be to treat
   all clients as less trustworthy and unsecure.  On the other extrem, a
   service provider could activate every client installation by hand of
   an administrator and that way gain confidence in the identity of the
   software package and the security of the environment the client is
   installed in.  And there are several approaches in between.

<span class="h5"><a class="selflink" name="section-5.2.3.1" href="#section-5.2.3.1">5.2.3.1</a>.  Don't issue secrets to clients with inappropriate security</span>
          policy

   Authorization servers should not issue secrets to clients, if these
   cannot sufficiently protect it.  This prevents the server from
   overestimating the value of a sucessful authentication of the client.

   For example, it is of limited benefit to create a single client id
   and secret which is shared by all installations of a native app.
   First of all, this secret must be somehow transmitted from the
   developer via the respective distribution channel, e.g. an app
   market, to all installations of the app on end-user devices.  So the
   secret is typically burned into the source code of the app or a
   associated resource bundle, which cannot be entirely protected from
   reverse engineering.  Second, effectively such secrets cannot be
   revoked since this would immediatly put all installations out of



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 54]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-55" id="page-55" href="#page-55" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   work.  Moreover, since the authorization server cannot really trust
   on the client's identity, it would be dangerous to indicate to end-
   users the trustworthiness of the client.

   There are other ways to achieve a reasonable security level, as
   described in the following sections.

<span class="h5"><a class="selflink" name="section-5.2.3.2" href="#section-5.2.3.2">5.2.3.2</a>.  Clients without secret require user consent</span>

   The authorization may issue a client id, but only accept
   authorization request, which are approved by the end-user.  This
   measure precludes automatic authorization processes.  This is a
   countermeasure for clients without secret against the following
   threats:

   o  ...  [[Not sure what is meant here]]

   o  ...

<span class="h5"><a class="selflink" name="section-5.2.3.3" href="#section-5.2.3.3">5.2.3.3</a>.  Client_id only in combination with redirect_uri</span>

   The authorization may issue a client id, but bind this client_id to a
   certain pre-configured redirect_uri.  So any authorization request
   with another redirect_uri is refused automatically.  Alternatively,
   the authorization server may not accept any dynamic redirect_uri for
   such a client_id and instead always redirect to the well-known pre-
   configured redirect_uri.  This is a countermeasure for clients
   without secrets against the following threats:

   o  ...[[Not sure what is meant here]]

   o  ...

<span class="h5"><a class="selflink" name="section-5.2.3.4" href="#section-5.2.3.4">5.2.3.4</a>.  Deployment-specific client secrets</span>

   A authorization server may issue separate client ids and
   corresponding secrets to the different deployments of a client.

   For web applications, this could mean to create one client_id and
   client_secret per web site a software package is installed on.  So
   the provider of that particular site could request client id and
   secret from the authorization server during setup of the web site.
   This would also allow to validate some of the properties of that web
   site, such as redirect_uri, address, and whatever proofs useful.  The
   web site provider has to ensure the security of the client secret on
   the site.

   For native applications, things are more complicated because every



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 55]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-56" id="page-56" href="#page-56" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   installation of the app on any device is another deployment.
   Deployment specific secrets will require

   1.  Either to obtain a client_id and client_secret during download
       process from the app market, or

   2.  During installation on the device.

   Either approach will require an automated mechanism for issuing
   client ids and secrets, which is currently not defined by OAuth.

   The first approach would allow to achieve a level where the client is
   authenticated and identified, whereas the second option only allows
   to authenticate the client but not to validate properties of the
   client.  But this would at least help to prevent several replay
   attacks.  Moreover, deployment-specific client_id and secret allow to
   selectively revoke all refresh tokens of a specific deployment at
   once.

   This is a countermeasure against the following threats:

   o  ...

   o  ...

<span class="h5"><a class="selflink" name="section-5.2.3.5" href="#section-5.2.3.5">5.2.3.5</a>.  Validation of pre-registered redirect_uri</span>

   An authorization server may require clients to register their
   redirect_uri or a pattern (TBD: make definition more precise)
   thereof.  The way this registration is performed is out of scope of
   this document.  Every actual redirect_uri sent with the respective
   client_id to the end-user authorization endpoint must comply with
   that pattern.  Otherwise the authorization server must assume the
   inbound GET request has been sent by an attacker and refuse it.
   Note: the authorization server MUST NOT redirect the user agent back
   to the redirect_uri of such an authorization request.

   o  Authorization code leakage through conterfeit web site: allows to
      detect attack attempts already after first redirect to end-user
      authorization endpoint (<a href="#section-4.4.1.7">Section 4.4.1.7</a>).

   o  For clients with validated properties, this measure also helps to
      detect malicious apps early in the end-user authorization process.
      This reduces the need for a interactive validation by the user
      (<a href="#section-4.4.1.4">Section 4.4.1.4</a>, <a href="#section-4.4.2.3">Section 4.4.2.3</a>).

   The underlying assumption of this measure is that an attacker must
   use another redirect_uri in order to get access to the authorization



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 56]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-57" id="page-57" href="#page-57" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   code.  Deployments might consider the possibility of an attacker
   using spoofing attacks to a victims device to circumvent this
   security measure.

   Note: Pre-registering clients might not scale in some deployments
   (manual process) or require dynamic client registration (not
   specified yet).  With the lack of dynamic client registration, it
   only works for clients bound to certain deployments at development/
   configuration time.  As soon as dynamic resource server discovery
   gets involved, that's no longer feasable.

<span class="h5"><a class="selflink" name="section-5.2.3.6" href="#section-5.2.3.6">5.2.3.6</a>.  Client secret revocation</span>

   An authorization server may revoke a client's secret in order to
   prevent abuse of a revealed secret.

   Note: This measure will immediately invalidate any authorization code
   or refresh token issued to the respective client.  This might be
   unintentionally for client identifiers and secrets used across
   multiple deployments of a particular native or web application.

   This a countermeasure against:

   o  ...

   o  ...

<span class="h5"><a class="selflink" name="section-5.2.3.7" href="#section-5.2.3.7">5.2.3.7</a>.  Use strong client authentication (e.g. client_assertion /</span>
          client_token)

   Assumption: prevents an attacker from obtaining a client secret
   because this secret is kept in some hardware security module?

<span class="h4"><a class="selflink" name="section-5.2.4" href="#section-5.2.4">5.2.4</a>.  End-user authorization</span>

<span class="h5"><a class="selflink" name="section-5.2.4.1" href="#section-5.2.4.1">5.2.4.1</a>.  Automatic processing of repeated authorizations requires</span>
          client validation

   Authorization servers should not automatically process repeat
   authorizations where the client is not authenticated through a client
   secret or some other authentication mechanism such as signing with
   security certs (5.7.2.7.  Use strong client authentication (e.g.
   client_assertion / client_token)) or validation of a pre-registered
   redirect uri (5.7.2.5.  Validation of pre-registered redirect_uri ).







<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 57]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-58" id="page-58" href="#page-58" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h5"><a class="selflink" name="section-5.2.4.2" href="#section-5.2.4.2">5.2.4.2</a>.  Informed decisions based on transparency</span>

   The authorization server shall intelligible explain to the end-user
   what happens in the authorization process and what the consequences
   are.  For example, the user shall understand what access he is about
   to grant to which client for what duration.  It shall also be obvious
   to the user, whether the server is able to reliably certify certain
   client properties (web site address, security policy).

<span class="h5"><a class="selflink" name="section-5.2.4.3" href="#section-5.2.4.3">5.2.4.3</a>.  Validation of client properties by end-user</span>

   In the authorization process, the user is typically asked to approve
   a client's request for authorization.  This is an important security
   mechanism by itself because the end-users can be involed in the
   validation of client properties, such as whether the client name
   known to the authorization server fits the name of the web site or
   the app the end-user is using.  This measure is especially helpful in
   all situation where the authorization server is unable to
   authenticate the client.  It is a countermeasure against:

   o  Malicious app

   o  ...

<span class="h5"><a class="selflink" name="section-5.2.4.4" href="#section-5.2.4.4">5.2.4.4</a>.  Binding of authorization code to client_id</span>

   The authorization server MUST bind every authorization code to the id
   of the respective client which initiated the end-user authorization
   process.  This measure is a countermeasure against:

   o  replay of authorization codes with different client credentials
      since an attacker cannot use another client_id to exchange an
      authorization code into a token

   o  Online guessing of authorization codes

   Note: This binding MUST be protected from unauthorized modifications.

<span class="h5"><a class="selflink" name="section-5.2.4.5" href="#section-5.2.4.5">5.2.4.5</a>.  Binding of authorization code to redirect_uri</span>

   The authorization server MUST bind every authorization code to the
   actual redirect_uri used as redirect target of the client in the end-
   user authorization process.  This binding MUST be validated when the
   client attempts to exchange the respective authorization code for an
   access token.  This measure is a countermeasure against authorization
   code leakage through counterfeit web sites since an attacker cannot
   use another redirect_uri to exchange an authorization code into a
   token.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 58]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-59" id="page-59" href="#page-59" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h3"><a class="selflink" name="section-5.3" href="#section-5.3">5.3</a>.  Client App Security</span>

<span class="h4"><a class="selflink" name="section-5.3.1" href="#section-5.3.1">5.3.1</a>.  Don't store credentials in code or resources bundled with</span>
        software packages

   [Anything more to say ? :-)]

<span class="h4"><a class="selflink" name="section-5.3.2" href="#section-5.3.2">5.3.2</a>.  Standard web server protection measures (for config files and</span>
        databases)

<span class="h4"><a class="selflink" name="section-5.3.3" href="#section-5.3.3">5.3.3</a>.  Store secrets in a secure storage</span>

   The are different way to store secrets of all kinds (tokens, client
   secrets) securely on a device or server.

   Most multi-user operation systems seggregate the personal storage of
   the different system users.  Moreover, most modern smartphone
   operating systems even support to store app-specific data in separat
   areas of the file systems and protect it from access by other apps.
   Additionally, apps can implements confidential data itself using a
   user-supplied secret, such as PIN or password.

   Another option is to swap refresh token storage to a trusted backend
   server.  This mean in turn requires a resilient authentication
   mechanisms between client and backend server.  Note: Applications
   must ensure that confidential data are kept confidential even after
   readin from secure storage, which typically means to keep this data
   in the local memory of the app.

<span class="h4"><a class="selflink" name="section-5.3.4" href="#section-5.3.4">5.3.4</a>.  Utilize device lock to prevent unauthorized device access</span>

<span class="h4"><a class="selflink" name="section-5.3.5" href="#section-5.3.5">5.3.5</a>.  Platform security measures</span>

   o  Validation process

   o  software package signatures

   o  Remote removal

<span class="h3"><a class="selflink" name="section-5.4" href="#section-5.4">5.4</a>.  Resource Servers</span>

<span class="h4"><a class="selflink" name="section-5.4.1" href="#section-5.4.1">5.4.1</a>.  Authorization headers</span>

   Authorization headers are recognized and specially treated by HTTP
   proxies and servers.  Thus the usage of such headers for sending
   access tokens to resource servers reduces the likelihood of leakage
   or unintended storage of authenticated requests in general and
   especially Authorization headers.



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 59]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-60" id="page-60" href="#page-60" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


<span class="h4"><a class="selflink" name="section-5.4.2" href="#section-5.4.2">5.4.2</a>.  Authenticated requests</span>

   An authorization server may bind tokens to a certain client identitiy
   and encourage resource servers to validate that binding.  This will
   require the resource server to authenticate the originator of a
   request as the legitimate owner of a particular token.  There are a
   couple of options to implement this countermeasure:

   o  The authorization server may associate the distinguished name of
      the client with the token (either internally or in the payload of
      an self-contained token).  The client then uses client
      certificate-based HTTP authentication on the resource server's
      endpoint to authenticate its identity and the resource server
      validates the name with the name referenced by the token.

   o  same as before, but the client uses his private key to sign the
      request to the resource server (public key is either contained in
      the token or sent along with the request)

   o  Alternatively, the authorization server may issue a token-bound
      secret, which the client uses to sign the request.  The resource
      server obtains the secret either directly from the authorization
      server or it is contained in an encrypted section of the token.
      That way the resource server does not "know" the client but is
      able to validate whether the authorization server issued the token
      to that client

   This mechanisms is a countermeasure against abuse of tokens by
   counterfeit resource servers.

<span class="h4"><a class="selflink" name="section-5.4.3" href="#section-5.4.3">5.4.3</a>.  Signed requests</span>

   A resource server may decide to accept signed requests only, either
   to replace transport level security measures or to complement such
   measures.  Every signed request must be uniquly identifiable and must
   not be processed twice by the resource server.  This countermeasure
   helps to mitigate:

   o  modifications of the message and

   o  replay attempts


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  IANA Considerations</span>

   This document makes no request of IANA.

   Note to RFC Editor: this section may be removed on publication as an



<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 60]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-61" id="page-61" href="#page-61" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   RFC.


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Acknowledgements</span>

   We would like to thank Hui-Lan Lu, Francisco Corella, Eric Pflam,
   Shane B Weeden, Skylar Woodward and James H. Manger for their
   comments and contributions.


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  References</span>

<span class="h3"><a class="selflink" name="section-8.1" href="#section-8.1">8.1</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-oauth-v2" id="ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]
              Hammer-Lahav, E., Recordon, D., and D. Hardt, "The OAuth
              2.0 Authorization Protocol", <a href="./draft-ietf-oauth-v2-16">draft-ietf-oauth-v2-16</a> (work
              in progress), May 2011.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

<span class="h3"><a class="selflink" name="section-8.2" href="#section-8.2">8.2</a>.  Informative References</span>

   [<a name="ref-I-D.ietf-oauth-v2-bearer" id="ref-I-D.ietf-oauth-v2-bearer">I-D.ietf-oauth-v2-bearer</a>]
              Jones, M., Hardt, D., and D. Recordon, "The OAuth 2.0
              Protocol: Bearer Tokens", <a href="./draft-ietf-oauth-v2-bearer-06">draft-ietf-oauth-v2-bearer-06</a>
              (work in progress), June 2011.

   [<a name="ref-I-D.ietf-oauth-v2-http-mac" id="ref-I-D.ietf-oauth-v2-http-mac">I-D.ietf-oauth-v2-http-mac</a>]
              Hammer-Lahav, E., Barth, A., and B. Adida, "HTTP
              Authentication: MAC Access Authentication",
              <a href="./draft-ietf-oauth-v2-http-mac-00">draft-ietf-oauth-v2-http-mac-00</a> (work in progress),
              May 2011.

   [<a name="ref-I-D.lodderstedt-oauth-revocation" id="ref-I-D.lodderstedt-oauth-revocation">I-D.lodderstedt-oauth-revocation</a>]
              Lodderstedt, T. and S. Dronia, "Token Revocation",
              <a href="./draft-lodderstedt-oauth-revocation-02">draft-lodderstedt-oauth-revocation-02</a> (work in progress),
              March 2011.

   [<a name="ref-portable-contacts" id="ref-portable-contacts">portable-contacts</a>]
              Smarr, J., "Portable Contacts 1.0 Draft C", August 2008.


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Document History</span>

   [[ to be removed by RFC editor before publication as an RFC ]]




<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 61]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-62" id="page-62" href="#page-62" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


   <a href="./draft-lodderstedt-oauth-security-01">draft-lodderstedt-oauth-security-01</a>

   o  <a href="#section-4.4.1.2">section 4.4.1.2</a> - changed "resource server" to "client" in
      countermeasures description.

   o  <a href="#section-4.4.1.6">section 4.4.1.6</a> - changed "client shall authenticate the server"
      to "The browser shall be utilized to authenticate the redirect_uri
      of the client"

   <a href="./draft-ietf-oauth-v2-threatmodel-00">draft-ietf-oauth-v2-threatmodel-00</a>

   o  <a href="#section-3.4">section 3.4</a> - added the purposes for using authorization codes.

   o  extended <a href="#section-4.4.1.1">section 4.4.1.1</a>

   o  merged 4.4.1.5 into 4.4.1.2

   o  corrected some typos

   o  reformulated "session fixation", renamed respective sections into
      "authorization code disclosure through counterfeit client"

   o  added new section "User session impersonation"

   o  worked out or reworked sections <a href="#section-2.3.3">2.3.3</a>, <a href="#section-4.4.2.4">4.4.2.4</a>, <a href="#section-4.4.4">4.4.4</a>, <a href="#section-5.1.4.1.2">5.1.4.1.2</a>,
      5.1.4.1.4, 5.2.3.5

   o  added new threat "DoS using manufactured authorization codes" as
      proposed by Eric Pflam

   o  added XSRF and clickjacking (incl. state parameter explanation)

   o  changed sub-section order in <a href="#section-4.4.1">section 4.4.1</a>

   o  incorporated feedback from Skylar Woodward (client secrets) and
      Shane B Weeden (refresh tokens as client instance secret)

   o  aligned client section with core draft's client type definition

   o  converted I-D into WG document











<span class="grey">Lodderstedt, et al.      Expires January 2, 2012               [Page 62]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-63" id="page-63" href="#page-63" class="invisible"> </a>
<span class="grey">Internet-Draft             OAuth 2.0 Security                  July 2011</span>


Authors' Addresses

   Torsten Lodderstedt (editor)
   Deutsche Telekom AG

   Email: torsten@lodderstedt.net


   Mark McGloin
   IBM

   Email: mark.mcgloin@ie.ibm.com


   Phil Hunt
   Oracle Corporation

   Email: phil.hunt@yahoo.com

































Lodderstedt, et al.      Expires January 2, 2012               [Page 63]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
