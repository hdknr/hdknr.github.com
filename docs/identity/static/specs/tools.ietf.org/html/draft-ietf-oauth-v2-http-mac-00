<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-v2-http-mac" />
<meta name="DC.Description.Abstract" content="This document specifies the HTTP MAC access authentication scheme, an" />
<meta name="DC.Creator" content="Eran Hammer-Lahav &lt;eran@hueniverse.com&gt;" />
<meta name="DC.Date.Issued" content="2012-02-08" />
<meta name="DC.Title" content="HTTP Authentication: MAC Access Authentication" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-v2-http-mac-00 - HTTP Authentication: MAC Access Authentication</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-v2-http-mac-00.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-v2-http-mac-00.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-v2-http-mac-00.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-v2-http-mac-00.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-v2-http-mac' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-v2-http-mac@tools.ietf.org?subject=draft-ietf-oauth-v2-http-mac%20" title="Send email to the document authors">Email</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-v2-http-mac-00.txt" title="Run an idnits check of this document">Nits</a>]                 </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-ietf-oauth-v2-http-mac-00">00</a> <a href="./draft-ietf-oauth-v2-http-mac-01">01</a>                                                         </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Network Working Group                               E. Hammer-Lahav, Ed.
Internet-Draft                                                    Yahoo!
Intended status: Standards Track                                A. Barth
Expires: November 12, 2011                                        Google
                                                                B. Adida
                                                                 Mozilla
                                                            May 11, 2011


             <span class="h1">HTTP Authentication: MAC Access Authentication</span>
                    <span class="h1">draft-ietf-oauth-v2-http-mac-00</span>

Abstract

   This document specifies the HTTP MAC access authentication scheme, an
   HTTP authentication method using a message authentication code (MAC)
   algorithm to provide cryptographic verification of portions of HTTP
   requests.  The document also defines an OAuth 2.0 binding for use as
   an access-token type, as well as an extension attribute to the HTTP
   Set-Cookie response header field.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 12, 2011.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-1.1">1.1</a>.  Design Constraints . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-1.2">1.2</a>.  Example  . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.3">1.3</a>.  Notational Conventions . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
   <a href="#section-2">2</a>.  Issuing MAC Credentials  . . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
   <a href="#section-3">3</a>.  Making Requests  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
     <a href="#section-3.1">3.1</a>.  The "Authorization" Request Header . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-3.2">3.2</a>.  Body Hash  . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
     <a href="#section-3.3">3.3</a>.  Request MAC  . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
       <a href="#section-3.3.1">3.3.1</a>.  Normalized Request String  . . . . . . . . . . . . . . <a href="#page-11">11</a>
       <a href="#section-3.3.2">3.3.2</a>.  hmac-sha-1 . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
       <a href="#section-3.3.3">3.3.3</a>.  hmac-sha-256 . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
   <a href="#section-4">4</a>.  Verifying Requests . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-4.1">4.1</a>.  The "WWW-Authenticate" Response Header Field . . . . . . . <a href="#page-14">14</a>
   <a href="#section-5">5</a>.  Use with OAuth 2.0 . . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-5.1">5.1</a>.  Issuing MAC-Type Access Tokens . . . . . . . . . . . . . . <a href="#page-15">15</a>
   <a href="#section-6">6</a>.  Use with Set-Cookie  . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
     <a href="#section-6.1">6.1</a>.  User Agent Requirements  . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
       <a href="#section-6.1.1">6.1.1</a>.  The Set-Cookie Header  . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
       <a href="#section-6.1.2">6.1.2</a>.  Storage Model  . . . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
       <a href="#section-6.1.3">6.1.3</a>.  The Authorization Header . . . . . . . . . . . . . . . <a href="#page-17">17</a>
   <a href="#section-7">7</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-7.1">7.1</a>.  MAC Keys Transmission  . . . . . . . . . . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-7.2">7.2</a>.  Confidentiality of Requests  . . . . . . . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-7.3">7.3</a>.  Spoofing by Counterfeit Servers  . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-7.4">7.4</a>.  Plaintext Storage of Credentials . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-7.5">7.5</a>.  Entropy of MAC Keys  . . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-7.6">7.6</a>.  Denial of Service / Resource Exhaustion Attacks  . . . . . <a href="#page-20">20</a>
     <a href="#section-7.7">7.7</a>.  Timing Attacks . . . . . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
     <a href="#section-7.8">7.8</a>.  CSRF Attacks . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
     <a href="#section-7.9">7.9</a>.  Coverage Limitations . . . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
     <a href="#section-7.10">7.10</a>. Version Rollback Attack  . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
   <a href="#section-8">8</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
     <a href="#section-8.1">8.1</a>.  The HTTP MAC Authentication Scheme Algorithm Registry  . . <a href="#page-21">21</a>
       <a href="#section-8.1.1">8.1.1</a>.  Registration Template  . . . . . . . . . . . . . . . . <a href="#page-22">22</a>
       <a href="#section-8.1.2">8.1.2</a>.  Initial Registry Contents  . . . . . . . . . . . . . . <a href="#page-22">22</a>
     <a href="#section-8.2">8.2</a>.  OAuth Access Token Type Registration . . . . . . . . . . . <a href="#page-23">23</a>
       <a href="#section-8.2.1">8.2.1</a>.  The "mac" OAuth Access Token Type  . . . . . . . . . . <a href="#page-23">23</a>
     <a href="#section-8.3">8.3</a>.  OAuth Parameters Registration  . . . . . . . . . . . . . . <a href="#page-23">23</a>
       <a href="#section-8.3.1">8.3.1</a>.  The "mac_key" OAuth Parameter  . . . . . . . . . . . . <a href="#page-23">23</a>



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


       <a href="#section-8.3.2">8.3.2</a>.  The "mac_algorithm" OAuth Parameter  . . . . . . . . . <a href="#page-23">23</a>
   <a href="#section-9">9</a>.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
   <a href="#appendix-A">Appendix A</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
   <a href="#section-10">10</a>. References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
     <a href="#section-10.1">10.1</a>. Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
     <a href="#section-10.2">10.2</a>. Informative References . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-25">25</a>












































<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   This specification defines the HTTP MAC access authentication scheme,
   providing a method for making authenticated HTTP requests with
   partial cryptographic verification of the request, covering the HTTP
   method, request URI, host, and in some cases the request body.

   Similar to the HTTP Basic access authentication scheme [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>], the
   MAC scheme utilizes a set of client credentials which include an
   identifier and key.  However, in contrast with the Basic scheme, the
   key is never included in authenticated requests but is used to
   calculate the request MAC value which is included instead.

   The MAC scheme requires the establishment of a shared symmetric key
   between the client and the server.  This is often accomplished
   through a manual process such as client registration.  This
   specification offers two methods for issuing a set of MAC credentials
   to the client using:

   o  OAuth 2.0 in the form of a MAC-type access token, using any
      supported OAuth grant type.
   o  The HTTP "Set-Cookie" response header field via an extension
      attribute.

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Design Constraints</span>

   The primary design goal of this mechanism is to improve HTTP state
   management for services that are unwilling or unable to employ TLS
   for every request.  In particular, this mechanism leverage an initial
   TLS setup phase (e.g., when the server receives the user's primary
   credentials, such as a TLS client certificate or a password) to
   establish a shared secret between the client and the server.  The
   shared secret is then used over an insecure channel to provide
   protection against a passive network attacker.

   In particular, when a server uses this mechanism, a passive network
   attacker will be unable to "steal" the user's session token, as is
   possible today with cookies and other bearer tokens.  In addition,
   this mechanism helps secure the session token against leakage when
   sent over a secure channel to the wrong server (e.g., when the client
   uses some form of dynamic configuration to determine where to send an
   authenticated request).

   Unlike the HTTP Digest authentication scheme, this mechanism does not
   require interacting with the server to prevent replay attacks.
   Instead, the client provides both a nonce and a timestamp, which the
   server can use to prevent replay attacks using a bounded amount of
   storage.  Also unlike Digest, this mechanism is not intended to



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   protect the user's password itself because the client and server both
   have access to the key material in the clear.  Instead, servers
   should issue a short-lived derivative credential for this mechanism
   during the initial TLS setup phase.

<span class="h3"><a class="selflink" name="section-1.2" href="#section-1.2">1.2</a>.  Example</span>

   The client attempts to access a protected resource without
   authentication, making the following HTTP request to the resource
   server:


     GET /resource/1?b=1&amp;a=2 HTTP/1.1
     Host: example.com


   The resource server returns the following authentication challenge:


     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: MAC


   The client has previously obtained a set of MAC credentials for
   accessing resources on the "http://example.com/" server.  The MAC
   credentials issued to the client include the following attributes:

   MAC key identifier:  h480djs93hd8
   MAC key:  489dks293j39
   MAC algorithm:  hmac-sha-1
   Issue time:  Thu, 02 Dec 2010 21:39:45 GMT

   The client constructs the authentication header by calculating the
   credentials' age (number of seconds since the credentials were
   issued) and generating a random string used to construct a nonce:

   Age:  264095
   Random string:  dj83hs9s
   Nonce:  264095:dj83hs9s

   The client constructs the normalized request string (the new line
   separator character is represented by "\n" for display purposes only;
   the two trailing new line separators signify that no body hash or
   extension value are included with the request, explained below):







<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


     264095:dj83hs9s\n
     GET\n
     /resource/1?b=1&amp;a=2\n
     example.com\n
     80\n
     \n
     \n


   The request MAC is calculated using the specified MAC algorithm
   "hmac-sha-1" and the MAC key over the normalized request string.  The
   result is base64-encoded to produce the request MAC:


     SLDJd4mg43cjQfElUs3Qub4L6xE=


   The client includes the MAC key identifier, nonce, and request MAC
   with the request using the "Authorization" request header field:


     GET /resource/1?b=1&amp;a=2 HTTP/1.1
     Host: example.com
     Authorization: MAC id="h480djs93hd8",
                        nonce="264095:dj83hs9s",
                        mac="SLDJd4mg43cjQfElUs3Qub4L6xE="


   The server validates the request by calculating the request MAC again
   based on the request received and verifies the validity and scope of
   the MAC credentials.  If valid, the server responds with the
   requested resource representation.

<span class="h3"><a class="selflink" name="section-1.3" href="#section-1.3">1.3</a>.  Notational Conventions</span>

   The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   specification are to be interpreted as described in [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].

   This specification uses the Augmented Backus-Naur Form (ABNF)
   notation of [<a href="#ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>].  Additionally, the
   following rules are included from [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>]: auth-param.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Issuing MAC Credentials</span>

   This specification defines two method for issuing MAC credentials
   using OAuth 2.0 as described in <a href="#section-5">Section 5</a> and using the HTTP



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   "Set-Cookie" response header field as described in <a href="#section-6">Section 6</a>.

   This specification does not mandate servers to support any particular
   method for issuing MAC credentials, and other methods MAY be defined
   and used.  Whenever MAC credentials are issued, the credentials MUST
   include the following attributes:

   MAC key identifier
         A string identifying the MAC key used to calculate the request
         MAC.  The string is usually opaque to the client.  The server
         typically assigns a specific scope and lifetime to each set of
         MAC credentials.  The identifier MAY denote a unique value used
         to retrieve the authorization information (e.g. from a
         database), or self-contain the authorization information in a
         verifiable manner (i.e. a string consisting of some data and a
         signature).
   MAC key
         A shared symmetric secret used as the MAC algorithm key.  The
         server MUST NOT issue the same MAC key and MAC key identifier
         combination.
   MAC algorithm
         A MAC algorithm used to calculate the request MAC.  Value MUST
         be one of "hmac-sha-1", "hmac-sha-256", or a registered
         extension algorithm name as described in <a href="#section-8.1">Section 8.1</a>.
         Algorithm names are case-sensitive.  If the MAC algorithm is
         not understood by the client, the client MUST NOT use the MAC
         credentials and continue as if no MAC credentials were issued.
   Issue time
         The time when the credentials were issued, used to calculate
         the credentials age when making requests.  If the MAC
         credentials were obtained via an HTTP response, the time of
         issue is the time the response was received by the client.

   The MAC key identifier, MAC key, MAC algorithm strings MUST NOT
   include characters other than:


     %x20-21 / %x23-5B / %x5D-7E
     ; Any printable ASCII character except for &lt;"&gt; and &lt;\&gt;



<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Making Requests</span>

   To make authenticated requests, the client must be in the possession
   of a valid set of MAC credentials accepted by the server.  The client
   constructs the request by calculating a set of attributes, and adding
   them to the HTTP request using the "Authorization" request header



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   field as described in <a href="#section-3.1">Section 3.1</a>.

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  The "Authorization" Request Header</span>

   The "Authorization" request header field uses the framework defined
   by [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>] as follows:


     credentials    = "MAC" [ RWS 1#param ]

     param          = id /
                      nonce /
                      body-hash /
                      ext /
                      mac

     id             = "id" "=" &lt;"&gt; plain-string &lt;"&gt;
     nonce          = "nonce" "=" &lt;"&gt; 1*DIGIT ":" plain-string &lt;"&gt;
     body-hash      = "bodyhash" "=" &lt;"&gt; plain-string &lt;"&gt;
     ext            = "ext" "=" &lt;"&gt; plain-string &lt;"&gt;
     mac            = "mac" "=" &lt;"&gt; plain-string &lt;"&gt;

     plain-string   = 1*( %x20-21 / %x23-5B / %x5D-7E )


   The header attributes are set as follows:

   id
         REQUIRED.  The MAC key identifier.
   nonce
         REQUIRED.  A unique string generated by the client to allow the
         server to verify that a request has never been made before and
         helps prevent replay attacks when requests are made over an
         insecure channel.  The nonce value MUST be unique across all
         requests with the same MAC key identifier.
         The nonce value MUST consist of the age of the MAC credentials
         expressed as the number of seconds since the credentials were
         issued to the client, a colon character (%x25), and a unique
         string (typically random).  The age value MUST be a positive
         integer and MUST NOT include leading zeros (e.g.
         "000137131200").  For example: "273156:di3hvdf8".
         To avoid the need to retain an infinite number of nonce values
         for future checks, the server MAY choose to restrict the time
         period after which a request with an old age is rejected.  If
         such a restriction is enforced, the server SHOULD allow for a
         sufficiently large window to accommodate network delays which
         will affect the credentials issue time used by the client to
         calculate the credentials' age.



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   bodyhash
         OPTIONAL.  The HTTP request payload body hash as described in
         <a href="#section-3.2">Section 3.2</a>.
   ext
         OPTIONAL.  A string used to include additional information
         which is covered by the request MAC.  The content and format of
         the string is beyond the scope of this specification.
   mac
         REQUIRED.  The HTTP request MAC as described in <a href="#section-3.3">Section 3.3</a>.

   Attributes MUST NOT appear more than once.  Attribute values are
   limited to a subset of ASCII, which does not require escaping, as
   defined by the plain-string ABNF.

<span class="h3"><a class="selflink" name="section-3.2" href="#section-3.2">3.2</a>.  Body Hash</span>

   [[ Need to figure out exactly when body-hash is required ]]

   The body hash is used to provide integrity verification of the HTTP
   request payload body.  The body hash value is calculated using a hash
   algorithm over the entire HTTP request payload body.

   The client MAY include the body hash with any request.  The server
   SHOULD require the calculation and inclusion of the body hash with
   any request containing an payload body, or when the presence (or lack
   of) of an payload body is of significance.

   The body hash algorithm is determined by the MAC algorithm.  The
   SHA-1 hash algorithm as defined by [NIST FIPS-180-3] is used with the
   "hmac-sha-1" MAC algorithm.  The SHA-256 hash algorithm as defined by
   [NIST FIPS-180-3] is used with the "hmac-sha-256" MAC algorithm.
   Additional MAC algorithms MUST specify the corresponding body hash
   algorithm.

   The body hash is calculated as follows:


     bodyhash = BASE64 ( HASH (text) )


   Where:

   HASH
         is the hash algorithm function,







<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011               [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   text
         is the HTTP request payload body,
   BASE64
         is the base64-encoding function per <a href="./rfc2045#section-6.8">[RFC2045] section&nbsp;6.8</a>,
         applied to the hash result octet string, and
   bodyhash
         is the value used in the normalized request string and to set
         the "bodyhash" attribute of the "Authorization" request header
         field.

   The body hash is calculated before the normalized request string is
   constructed and the request MAC is calculated.

   For example, the HTTP request:


     POST /request HTTP/1.1
     Host: example.net
     Content-Type: application/x-www-form-urlencoded

     hello=world%21


   using MAC key identifier "jd93dh9dh39D", nonce "273156:di3hvdf8", MAC
   algorithm "hmac-sha-1", and MAC key "8yfrufh348h", is transmitted as
   (line breaks are for display purposes only):


     POST /request HTTP/1.1
     Host: example.com
     Content-Type: application/x-www-form-urlencoded
     Authorization: MAC id="jd93dh9dh39D",
                        nonce="273156:di3hvdf8",
                        bodyhash="k9kbtCIy0CkI3/FEfpS/oIDjk6k=",
                        mac="W7bdMZbv9UWOTadASIQHagZyirA="

     hello=world%21


<span class="h3"><a class="selflink" name="section-3.3" href="#section-3.3">3.3</a>.  Request MAC</span>

   The client uses the MAC algorithm and the MAC key to calculate the
   request MAC.  This specification defines two algorithms: "hmac-sha-1"
   and "hmac-sha-256", and provides an extension registry for additional
   algorithms.






<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


<span class="h4"><a class="selflink" name="section-3.3.1" href="#section-3.3.1">3.3.1</a>.  Normalized Request String</span>

   The normalized request string is a consistent, reproducible
   concatenation of several of the HTTP request elements into a single
   string.  By normalizing the request into a reproducible string, the
   client and server can both calculate the request MAC over the exact
   same value.

   The string is constructed by concatenating together, in order, the
   following HTTP request elements, each followed by a new line
   character (%x0A):

   1.  The nonce value generated for the request.
   2.  The HTTP request method in upper case.  For example: "HEAD",
       "GET", "POST", etc.
   3.  The HTTP request-URI as defined by <a href="./rfc2616#section-5.1.2">[RFC2616] section&nbsp;5.1.2</a>.
   4.  The hostname included in the HTTP request using the "Host"
       request header field in lower case.
   5.  The port as included in the HTTP request using the "Host" request
       header field.  If the header field does not include a port, the
       default value for the scheme MUST be used (e.g. 80 for HTTP and
       443 for HTTPS).
   6.  The request payload body hash as described in <a href="#section-3.2">Section 3.2</a> if one
       was calculated and included in the request, otherwise, an empty
       string.  Note that the body hash of an empty payload body is not
       an empty string.
   7.  The value of the "ext" "Authorization" request header field
       attribute if one was included in the request, otherwise, an empty
       string.

   Each element is followed by a new line character (%x0A) including the
   last element and even when an element value is an empty string.

   For example, the HTTP request:


     POST /request?b5=%3D%253D&amp;a3=a&amp;c%40=&amp;a2=r%20b&amp;c2&amp;a3=2+q HTTP/1.1
     Host: example.com

     Hello World!


   using nonce "264095:7d8f3e4a", body hash
   "Lve95gjOVATpfV8EL5X4nxwjKHE=", and extension string "a,b,c" is
   normalized into the following string (the new line separator
   character is represented by "\n" for display purposes only):





<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


     264095:7d8f3e4a\n
     POST\n
     /request?b5=%3D%253D&amp;a3=a&amp;c%40=&amp;a2=r%20b&amp;c2&amp;a3=2+q\n
     example.com\n
     80\n
     Lve95gjOVATpfV8EL5X4nxwjKHE=\n
     a,b,c\n


<span class="h4"><a class="selflink" name="section-3.3.2" href="#section-3.3.2">3.3.2</a>.  hmac-sha-1</span>

   "hmac-sha-1" uses the HMAC-SHA1 algorithm as defined in [<a href="./rfc2104" title="and R. Canetti">RFC2104</a>]:


     mac = HMAC-SHA1 (key, text)


   Where:

   text
         is set to the value of the normalized request string as
         described in <a href="#section-3.3.1">Section 3.3.1</a>,
   key
         is set to the MAC key provided by the server, and
   mac
         is used to set the value of the "mac" attribute, after the
         result octet string is base64-encoded per [<a href="./rfc2045" title="&quot;Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies&quot;">RFC2045</a>] <a href="#section-6.8">section</a>
         <a href="#section-6.8">6.8</a>.

   The SHA-1 hash algorithm as defined by [NIST FIPS-180-3] is used for
   generating the body hash attribute described in <a href="#section-3.2">Section 3.2</a> when
   using MAC credentials with the "hmac-sha-1" MAC algorithm.

<span class="h4"><a class="selflink" name="section-3.3.3" href="#section-3.3.3">3.3.3</a>.  hmac-sha-256</span>

   "hmac-sha-256" uses the HMAC algorithm as defined in [<a href="./rfc2104" title="and R. Canetti">RFC2104</a>]
   together with the SHA-256 hash function defined in [NIST FIPS-180-3]:


     mac = HMAC-SHA256 (key, text)


   Where:








<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   text
         is set to the value of the normalize request string as
         described in <a href="#section-3.3.1">Section 3.3.1</a>,
   key
         is set to the MAC key provided by the server, and
   mac
         is used to set the value of the "mac" attribute, after the
         result octet string is base64-encoded per [<a href="./rfc2045" title="&quot;Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies&quot;">RFC2045</a>] <a href="#section-6.8">section</a>
         <a href="#section-6.8">6.8</a>.

   The SHA-256 hash algorithm as defined by [NIST FIPS-180-3] is used
   for generating the body hash attribute described in <a href="#section-3.2">Section 3.2</a> when
   using MAC credentials with the "hmac-sha-256" MAC algorithm.


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Verifying Requests</span>

   A server receiving an authenticated request validates it by
   performing the following REQUIRED steps:

   1.  Recalculate the request body hash (if included in the request) as
       described in <a href="#section-3.2">Section 3.2</a> and request MAC as described in
       <a href="#section-3.3">Section 3.3</a> and compare the request MAC to the value received
       from the client via the "mac" attribute.
   2.  Ensure that the combination of nonce and MAC key identifier
       received from the client has not been used before in a previous
       request (the server MAY reject requests with stale timestamps;
       the determination of staleness is left up to the server to
       define).
   3.  Verify the scope and validity of the MAC credentials.

   If the request fails verification, the server response includes the
   "WWW-Authenticate" response header field as described in <a href="#section-4.1">Section 4.1</a>
   and SHOULD include one of the following HTTP status codes:

   401 (Unauthorized)
         The "Authorization" request header field is not included,
         missing a required parameter, includes an unsupported parameter
         or parameter value, repeats the same parameter, or is otherwise
         malformed.  The MAC credentials provided are expired, revoked,
         malformed, or invalid.  The body hash or request MAC provided
         do not match the values calculated by the server, or a body
         hash is required but missing.
   307 (Temporary Redirect)
         Same as 401, with the exception that a human intervention at
         the destination URI (identified by the "Location" response
         header field) MAY resolve the issue (e.g. provide a login page
         which upon a successful authentication will issue the user-



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


         agent a new set of MAC credentials using the "Set-Cookie"
         response header field as described in <a href="#section-6">Section 6</a>.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  The "WWW-Authenticate" Response Header Field</span>

   If the protected resource request does not include authentication
   credentials, contains an invalid MAC key identifier, or is malformed,
   the server SHOULD include the HTTP "WWW-Authenticate" response header
   field.

   For example:


     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: MAC


   The "WWW-Authenticate" request header field uses the framework
   defined by [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>] as follows:


     challenge   = "MAC" [ RWS 1#param ]
     param       = error / auth-param
     error       = "error" "=" quoted-string


   Each attribute MUST NOT appear more than once.

   If the protected resource request included a MAC "Authorization"
   request header field and failed authentication, the server MAY
   include the "error" attribute to provide the client with a human-
   readable explanation why the access request was declined.

   For example:


     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: MAC error="The MAC credentials expired"



<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Use with OAuth 2.0</span>

   OAuth 2.0 ([<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]) defines a token-based authentication
   framework in which third-party applications (clients) access
   protected resources using access tokens.  Access tokens are obtained
   via the resource owners' authorization from an authorization server.
   This specification defines the OAuth 2.0 MAC token type, as well as



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   type-specific token attributes.

   This specification does not define methods for the client to
   specifically request a MAC-type token from the authorization server.
   Additionally, it does not include any discovery facilities for
   identifying which HMAC algorithms are supported by a resource server,
   or how the client may go about obtaining MAC access tokens for any
   given protected resource.

   The authorization server MUST require the use of a transport-layer
   security mechanism when sending requests to the token endpoint to
   obtain a MAC token.

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  Issuing MAC-Type Access Tokens</span>

   Authorization servers issuing MAC-type access tokens MUST include the
   following parameters whenever a response includes the "access_token"
   parameter:

   access_token
         REQUIRED.  The MAC key identifier.
   mac_key
         REQUIRED.  The MAC key.
   mac_algorithm
         REQUIRED.  The MAC algorithm used to calculate the request MAC.
         Value MUST be one of "hmac-sha-1", "hmac-sha-256", or a
         registered extension algorithm name as described in
         <a href="#section-8.1">Section 8.1</a>.

   For example:


     HTTP/1.1 200 OK
     Content-Type: application/json
     Cache-Control: no-store

     {
       "access_token":"SlAV32hkKG",
       "token_type":"mac",
       "expires_in":3600,
       "refresh_token":"8xLOxBtZp8",
       "mac_key":"adijq39jdlaska9asud",
       "mac_algorithm":"hmac-sha-256"
     }







<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Use with Set-Cookie</span>

   The HTTP "Set-Cookie " response header field defined in [<a href="./rfc6265" title="&quot;HTTP State Management Mechanism&quot;">RFC6265</a>]
   enables the server to set persistent information which the client
   repeats back on follow-up requests.  Each cookie includes a name-
   value pair which is sent back to the server, and a set of attributes
   which inform the client when to include the cookie in follow-up
   requests.  The attributes are never sent back to the server.

   This specification defines the "MAC-Key" and "MAC-Algorithm" cookie
   attributes, which are used by the server, together with the cookie
   name which includes the MAC key identifier, to issue the client a set
   of MAC credentials.

   The server MUST only include the "MAC-Key" attribute in response to
   requests made using a transport-layer security mechanism such as TLS
   1.2 as defined in [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>].  Clients MUST discard any MAC
   credentials received over an insecure channel.

   For example, after a successful end-user authentication, the server
   includes the following response header field (line breaks are for
   display purposes only):


     Set-Cookie: SID=31d4d96e407aad42; Path=/; Domain=example.com;
                 MAC-Key=8yfrufh348h; MAC-Algorithm=hmac-sha-1


   which provides the client with the necessary MAC credentials.  The
   cookie name "SID" is used as the MAC key identifier together with the
   other MAC-specific attributes.  The user-agent uses the MAC
   credentials for subsequent HTTP requests that match the scope of the
   cookie, in this case for "example.com" and all subdomains.

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  User Agent Requirements</span>

   This section updates [<a href="./rfc6265" title="&quot;HTTP State Management Mechanism&quot;">RFC6265</a>], adding the ability to issue MAC
   credentials using the "Set-Cookie " response header field.

<span class="h4"><a class="selflink" name="section-6.1.1" href="#section-6.1.1">6.1.1</a>.  The Set-Cookie Header</span>

   Add the following two subsections to the end of <a href="#section-5.2">Section 5.2</a> (The Set-
   Cookie Header) in [<a href="./rfc6265" title="&quot;HTTP State Management Mechanism&quot;">RFC6265</a>].  These sections instruct the user-agent
   how to parse the "MAC-Key" attribute and "MAC-Algorithm" attribute,
   respectively.






<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


<span class="h5"><a class="selflink" name="section-6.1.1.1" href="#section-6.1.1.1">6.1.1.1</a>.  The MAC-Key attribute</span>

   If the attribute-name case-insensitively matches the string
   "MAC-Key", the user-agent MUST append an attribute to the cookie-
   attribute-list with an attribute name of "MAC-Key" and a attribute-
   value equal to the attribute-value.

<span class="h5"><a class="selflink" name="section-6.1.1.2" href="#section-6.1.1.2">6.1.1.2</a>.  The MAC-Algorithm attribute</span>

   If the attribute-name case-insensitively matches the string
   "MAC-Algorithm", and if the attribute-value is either "hmac-sha-1",
   "hmac-sha-256", or a registered extension value, the user-agent MUST
   append an attribute to the cookie-attribute-list with an attribute
   name of "MAC-Algorithm" and an attribute-value equal to the
   attribute-value.

<span class="h4"><a class="selflink" name="section-6.1.2" href="#section-6.1.2">6.1.2</a>.  Storage Model</span>

   The storage model for cookies is extended with two additional fields:
   "mac-key" and "mac-algorithm", all of which default to the empty
   string.

   The user-agent MUST perform the follow steps after Step 10 of the
   algorithm in <a href="./rfc6265#section-5.3">Section&nbsp;5.3 of [RFC6265]</a>:

   1.  If the cookie-attribute-list contains an attribute with an
       attribute-name of "MAC-Key", set the cookie's "mac-key" field to
       the attribute-value of the last such attribute.
   2.  If the cookie-attribute-list contains an attribute with an
       attribute-name of "Mac-Algorithm", set the cookie's
       "mac-algorithm" field to the attribute-value of the last such
       attribute.

   When the user agent removes excess cookies from the cookie store
   because there are more than a predetermined number of cookies that
   share a domain field, or the combined length of cookies sharing a
   single domain field or being sent in a single request have exceeded a
   predetermined length, the user agent MUST evict cookies with an empty
   mac-key or an empty mac-algorithm field before cookies with both a
   non-empty mac-key and a non-empty mac-algorithm field.

<span class="h4"><a class="selflink" name="section-6.1.3" href="#section-6.1.3">6.1.3</a>.  The Authorization Header</span>

   In addition to being sent to the server in the "Cookie" request
   header field, cookies with "MAC-Key" and "MAC-Algorithm" attributes
   are also used to compute the "Authorization" request header field as
   described in <a href="#section-3.1">Section 3.1</a>.




<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   The user-agent MAY ignore cookies for the purpose of generating the
   "Authorization" request header field.  For example, the user-agent
   might wish to ignore cookies when issuing "third-party" requests or
   use MAC credentials obtained via other means.

   When issuing an HTTP request, let cookie-list be the set of cookies
   defined in <a href="./rfc6265#section-5.4">Section&nbsp;5.4 of [RFC6265]</a>.  Further, let mac-cookie-list be
   those cookies in the cookie-list that contain both a non-empty
   "mac-key" and "mac-algorithm" fields.

   Let the operative-cookie be the first cookie in the mac-cookie-list.

   Include an "Authorization" request header field in the HTTP request
   as described in <a href="#section-3.1">Section 3.1</a> using the cookie's MAC credentials where:

   MAC key identifier
      is equal to the operative-cookie's name,
   MAC key
      is equal to the operative-cookie's "mac-key",
   MAC algorithm
      is equal to the operative-cookie's "mac-algorithm", and
   Issue time
      is equal to the operative-cookie's "creation-time".


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Security Considerations</span>

   As stated in [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>], the greatest sources of risks are usually
   found not in the core protocol itself but in policies and procedures
   surrounding its use.  Implementers are strongly encouraged to assess
   how this protocol addresses their security requirements.

<span class="h3"><a class="selflink" name="section-7.1" href="#section-7.1">7.1</a>.  MAC Keys Transmission</span>

   This specification describes two mechanism for obtaining or
   transmitting MAC keys, both require the use of a transport-layer
   security mechanism when sending MAC keys to the client.  Additional
   methods used to obtain MAC credentials must ensure that these
   transmissions are protected using transport-layer mechanisms such as
   TLS or SSL.

<span class="h3"><a class="selflink" name="section-7.2" href="#section-7.2">7.2</a>.  Confidentiality of Requests</span>

   While this protocol provides a mechanism for verifying the integrity
   of requests, it provides no guarantee of request confidentiality.
   Unless further precautions are taken, eavesdroppers will have full
   access to request content.  Servers should carefully consider the
   kinds of data likely to be sent as part of such requests, and should



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   employ transport-layer security mechanisms to protect sensitive
   resources.

<span class="h3"><a class="selflink" name="section-7.3" href="#section-7.3">7.3</a>.  Spoofing by Counterfeit Servers</span>

   This protocol makes no attempt to verify the authenticity of the
   server.  A hostile party could take advantage of this by intercepting
   the client's requests and returning misleading or otherwise incorrect
   responses.  Service providers should consider such attacks when
   developing services using this protocol, and should require
   transport-layer security for any requests where the authenticity of
   the resource server or of request responses is an issue.

<span class="h3"><a class="selflink" name="section-7.4" href="#section-7.4">7.4</a>.  Plaintext Storage of Credentials</span>

   The MAC key functions the same way passwords do in traditional
   authentication systems.  In order to compute the request MAC, the
   server must have access to the MAC key in plaintext form.  This is in
   contrast, for example, to modern operating systems, which store only
   a one-way hash of user credentials.

   If an attacker were to gain access to these MAC keys - or worse, to
   the server's database of all such MAC keys - he or she would be able
   to perform any action on behalf of any resource owner.  Accordingly,
   it is critical that servers protect these MAC keys from unauthorized
   access.

<span class="h3"><a class="selflink" name="section-7.5" href="#section-7.5">7.5</a>.  Entropy of MAC Keys</span>

   Unless a transport-layer security protocol is used, eavesdroppers
   will have full access to authenticated requests and request MAC
   values, and will thus be able to mount offline brute-force attacks to
   recover the MAC key used.  Servers should be careful to assign MAC
   keys which are long enough, and random enough, to resist such attacks
   for at least the length of time that the MAC credentials are valid.

   For example, if the MAC credentials are valid for two weeks, servers
   should ensure that it is not possible to mount a brute force attack
   that recovers the MAC key in less than two weeks.  Of course, servers
   are urged to err on the side of caution, and use the longest MAC key
   reasonable.

   It is equally important that the pseudo-random number generator
   (PRNG) used to generate these MAC keys be of sufficiently high
   quality.  Many PRNG implementations generate number sequences that
   may appear to be random, but which nevertheless exhibit patterns or
   other weaknesses which make cryptanalysis or brute force attacks
   easier.  Implementers should be careful to use cryptographically



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   secure PRNGs to avoid these problems.

<span class="h3"><a class="selflink" name="section-7.6" href="#section-7.6">7.6</a>.  Denial of Service / Resource Exhaustion Attacks</span>

   This specification includes a number of features which may make
   resource exhaustion attacks against servers possible.  For example,
   this protocol requires servers to track used nonces.  If an attacker
   is able to use many nonces quickly, the resources required to track
   them may exhaust available capacity.  And again, this protocol can
   require servers to perform potentially expensive computations in
   order to verify the request MAC on incoming requests.  An attacker
   may exploit this to perform a denial of service attack by sending a
   large number of invalid requests to the server.

   Resource Exhaustion attacks are by no means specific to this
   specification.  However, implementers should be careful to consider
   the additional avenues of attack that this protocol exposes, and
   design their implementations accordingly.  For example, entropy
   starvation typically results in either a complete denial of service
   while the system waits for new entropy or else in weak (easily
   guessable) MAC keys.  When implementing this protocol, servers should
   consider which of these presents a more serious risk for their
   application and design accordingly.

<span class="h3"><a class="selflink" name="section-7.7" href="#section-7.7">7.7</a>.  Timing Attacks</span>

   This specification makes use of HMACs, for which a signature
   verification involves comparing the received MAC string to the
   expected one.  If the string comparison operator operates in
   observably different times depending on inputs, e.g. because it
   compares the strings character by character and returns a negative
   result as soon as two characters fail to match, then it may be
   possible to use this timing information to determine the expected
   MAC, character by character.

   Service implementers are encouraged to use fixed-time string
   comparators for MAC verification.

<span class="h3"><a class="selflink" name="section-7.8" href="#section-7.8">7.8</a>.  CSRF Attacks</span>

   A Cross-Site Request Forgery attack occurs when a site, evil.com,
   initiates within the victim's browser the loading of a URL from or
   the posting of a form to a web site where a side-effect will occur,
   e.g. transfer of money, change of status message, etc.  To prevent
   this kind of attack, web sites may use various techniques to
   determine that the originator of the request is indeed the site
   itself, rather than a third party.  The classic approach is to
   include, in the set of URL parameters or form content, a nonce



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   generated by the server and tied to the user's session, which
   indicates that only the server could have triggered the action.

   Recently, the Origin HTTP header has been proposed and deployed in
   some browsers.  This header indicates the scheme, host, and port of
   the originator of a request.  Some web applications may use this
   Origin header as a defense against CSRF.

   To keep this specification simple, HTTP headers are not part of the
   string to be MAC'ed.  As a result, MAC authentication cannot defend
   against header spoofing, and a web site that uses the Host header to
   defend against CSRF attacks cannot use MAC authentication to defend
   against active network attackers.  Sites that want the full
   protection of MAC Authentication should use traditional, cookie-tied
   CSRF defenses.

<span class="h3"><a class="selflink" name="section-7.9" href="#section-7.9">7.9</a>.  Coverage Limitations</span>

   The normalized request string has been designed to support the
   authentication methods defined in this specification.  Those
   designing additional methods, should evaluated the compatibility of
   the normalized request string with their security requirements.
   Since the normalized request string does not cover the entire HTTP
   request, servers should employ additional mechanisms to protect such
   elements.

   The request MAC does not cover entity-header fields which can often
   affect how the request body is interpreted by the server (i.e.
   Content-Type).  If the server behavior is influenced by the presence
   or value of such header fields, an attacker can manipulate the
   request header without being detected.  This will alter the request
   even when using the body hash attribute.

<span class="h3"><a class="selflink" name="section-7.10" href="#section-7.10">7.10</a>.  Version Rollback Attack</span>

   [[ TODO ]]


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  IANA Considerations</span>

<span class="h3"><a class="selflink" name="section-8.1" href="#section-8.1">8.1</a>.  The HTTP MAC Authentication Scheme Algorithm Registry</span>

   This specification establishes the HTTP MAC authentication scheme
   algorithm registry.

   Additional MAC algorithms are registered on the advice of one or more
   Designated Experts (appointed by the IESG or their delegate), with a
   Specification Required (using terminology from [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>]).  However,



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   to allow for the allocation of values prior to publication, the
   Designated Expert(s) may approve registration once they are satisfied
   that such a specification will be published.

   Registration requests should be sent to the [TBD]@ietf.org mailing
   list for review and comment, with an appropriate subject (e.g.,
   "Request for MAC Algorithm: example"). [[ Note to RFC-EDITOR: The
   name of the mailing list should be determined in consultation with
   the IESG and IANA.  Suggested name: http-mac-ext-review. ]]

   Within at most 14 days of the request, the Designated Expert(s) will
   either approve or deny the registration request, communicating this
   decision to the review list and IANA.  Denials should include an
   explanation and, if applicable, suggestions as to how to make the
   request successful.

   Decisions (or lack thereof) made by the Designated Expert can be
   first appealed to Application Area Directors (contactable using
   app-ads@tools.ietf.org email address or directly by looking up their
   email addresses on <a href="http://www.iesg.org/">http://www.iesg.org/</a> website) and, if the
   appellant is not satisfied with the response, to the full IESG (using
   the iesg@iesg.org mailing list).

   IANA should only accept registry updates from the Designated
   Expert(s), and should direct all requests for registration to the
   review mailing list.

<span class="h4"><a class="selflink" name="section-8.1.1" href="#section-8.1.1">8.1.1</a>.  Registration Template</span>

   Algorithm name:
      The name requested (e.g., "example").
   Body hash algorithm:
      The corresponding algorithm used to calculate the payload body
      hash.
   Change controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.
   Specification document(s):
      Reference to document that specifies the algorithm, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.

<span class="h4"><a class="selflink" name="section-8.1.2" href="#section-8.1.2">8.1.2</a>.  Initial Registry Contents</span>

   The HTTP MAC authentication scheme algorithm registry's initial
   contents are:



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 22]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-23" id="page-23" href="#page-23" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   o  Algorithm name: hmac-sha-1
   o  Body hash algorithm: sha-1
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Algorithm name: hmac-sha-256
   o  Body hash algorithm: sha-256
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

<span class="h3"><a class="selflink" name="section-8.2" href="#section-8.2">8.2</a>.  OAuth Access Token Type Registration</span>

   This specification registers the following access token type in the
   OAuth Access Token Type Registry.

<span class="h4"><a class="selflink" name="section-8.2.1" href="#section-8.2.1">8.2.1</a>.  The "mac" OAuth Access Token Type</span>

   Type name:
      mac
   Additional Token Endpoint Response Parameters:
      secret, algorithm
   HTTP Authentication Scheme(s):
      MAC
   Change controller:
      IETF
   Specification document(s):
      [[ this document ]]

<span class="h3"><a class="selflink" name="section-8.3" href="#section-8.3">8.3</a>.  OAuth Parameters Registration</span>

   This specification registers the following parameters in the OAuth
   Parameters Registry established by [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].

<span class="h4"><a class="selflink" name="section-8.3.1" href="#section-8.3.1">8.3.1</a>.  The "mac_key" OAuth Parameter</span>

   Parameter name:  mac_key
   Parameter usage location:  authorization response, token response
   Change controller:  IETF
   Specification document(s):  [[ this document ]]
   Related information:  None

<span class="h4"><a class="selflink" name="section-8.3.2" href="#section-8.3.2">8.3.2</a>.  The "mac_algorithm" OAuth Parameter</span>

   Parameter name:  mac_algorithm







<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 23]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-24" id="page-24" href="#page-24" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


   Parameter usage location:  authorization response, token response
   Change controller:  IETF
   Specification document(s):  [[ this document ]]
   Related information:  None


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  Acknowledgments</span>

   The authors would like to thank Rasmus Lerdorf, James Manger, Scott
   Renfro, Toby White, Peter Wolanin, and Skylar Woodward for their
   suggestions and feedback.


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Document History</span>

   [[ To be removed by the RFC editor before publication as an RFC. ]]

   -00

   o  Initial working group document based on
      <a href="./draft-hammer-oauth-v2-mac-token-05">draft-hammer-oauth-v2-mac-token-05</a>.


<span class="h2"><a class="selflink" name="section-10" href="#section-10">10</a>.  References</span>

<span class="h3"><a class="selflink" name="section-10.1" href="#section-10.1">10.1</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-httpbis-p1-messaging" id="ref-I-D.ietf-httpbis-p1-messaging">I-D.ietf-httpbis-p1-messaging</a>]
              Fielding, R., Gettys, J., Mogul, J., Nielsen, H.,
              Masinter, L., Leach, P., Berners-Lee, T., and J. Reschke,
              "HTTP/1.1, part 1: URIs, Connections, and Message
              Parsing", <a href="./draft-ietf-httpbis-p1-messaging-13">draft-ietf-httpbis-p1-messaging-13</a> (work in
              progress), March 2011.

   [<a name="ref-I-D.ietf-oauth-v2" id="ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]
              Hammer-Lahav, E., Recordon, D., and D. Hardt, "The OAuth
              2.0 Authorization Protocol", <a href="./draft-ietf-oauth-v2-15">draft-ietf-oauth-v2-15</a> (work
              in progress), April 2011.

   [NIST FIPS-180-3]
              National Institute of Standards and Technology, "Secure
              Hash Standard (SHS). FIPS PUB 180-3, October 2008".

   [<a name="ref-RFC2045" id="ref-RFC2045">RFC2045</a>]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", <a href="./rfc2045">RFC 2045</a>, November 1996.

   [<a name="ref-RFC2104" id="ref-RFC2104">RFC2104</a>]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-



<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 24]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-25" id="page-25" href="#page-25" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


              Hashing for Message Authentication", <a href="./rfc2104">RFC 2104</a>,
              February 1997.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

   [<a name="ref-RFC2616" id="ref-RFC2616">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", <a href="./rfc2616">RFC 2616</a>, June 1999.

   [<a name="ref-RFC2617" id="ref-RFC2617">RFC2617</a>]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              <a href="./rfc2617">RFC 2617</a>, June 1999.

   [<a name="ref-RFC3986" id="ref-RFC3986">RFC3986</a>]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              <a href="./rfc3986">RFC 3986</a>, January 2005.

   [<a name="ref-RFC5226" id="ref-RFC5226">RFC5226</a>]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", <a href="./bcp26">BCP 26</a>, <a href="./rfc5226">RFC 5226</a>,
              May 2008.

   [<a name="ref-RFC5246" id="ref-RFC5246">RFC5246</a>]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", <a href="./rfc5246">RFC 5246</a>, August 2008.

   [<a name="ref-RFC6265" id="ref-RFC6265">RFC6265</a>]  Barth, A., "HTTP State Management Mechanism", <a href="./rfc6265">RFC 6265</a>,
              April 2011.

   [<a name="ref-W3C.REC-html401-19991224" id="ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>]
              Hors, A., Raggett, D., and I. Jacobs, "HTML 4.01
              Specification", World Wide Web Consortium
              Recommendation REC-html401-19991224, December 1999,
              &lt;<a href="http://www.w3.org/TR/1999/REC-html401-19991224">http://www.w3.org/TR/1999/REC-html401-19991224</a>&gt;.

<span class="h3"><a class="selflink" name="section-10.2" href="#section-10.2">10.2</a>.  Informative References</span>

   [<a name="ref-RFC5849" id="ref-RFC5849">RFC5849</a>]  Hammer-Lahav, E., "The OAuth 1.0 Protocol", <a href="./rfc5849">RFC 5849</a>,
              April 2010.












<span class="grey">Hammer-Lahav, et al.    Expires November 12, 2011              [Page 25]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-26" id="page-26" href="#page-26" class="invisible"> </a>
<span class="grey">Internet-Draft             MAC Authentication                   May 2011</span>


Authors' Addresses

   Eran Hammer-Lahav (editor)
   Yahoo!

   Email: eran@hueniverse.com
   URI:   <a href="http://hueniverse.com">http://hueniverse.com</a>


   Adam Barth
   Google

   Email: ietf@adambarth.com
   URI:   <a href="http://www.adambarth.com">http://www.adambarth.com</a>


   Ben Adida
   Mozilla

   Email: ben@adida.net
   URI:   <a href="http://ben.adida.net">http://ben.adida.net</a>






























Hammer-Lahav, et al.    Expires November 12, 2011              [Page 26]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
