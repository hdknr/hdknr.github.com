<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-v2" />
<meta name="DC.Description.Abstract" content="The OAuth 2.0 authorization framework enables a third-party\napplication to obtain limited access to an HTTP service, either on\nbehalf of a resource owner by orchestrating an approval interaction\nbetween the resource owner and the HTTP service, or by allowing the\nthird-party application to obtain access on its own behalf. This\nspecification replaces and obsoletes the OAuth 1.0 protocol described\nin RFC 5849." />
<meta name="DC.Creator" content="Recordon, David" />
<meta name="DC.Creator" content="Hardt, Dick" />
<meta name="DC.Date.Issued" content="2012-07-12" />
<meta name="DC.Title" content="The OAuth 2.0 Authorization Framework" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-v2-18 - The OAuth 2.0 Authorization Framework</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-v2-18.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-v2-18.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-v2-18.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-v2-18.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-v2' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-v2@tools.ietf.org?subject=draft-ietf-oauth-v2%20" title="Send email to the document authors">Email</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=draft-ietf-oauth-v2-18.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=draft-ietf-oauth-v2-18.txt" title="Side-by-side diff">Diff2</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-v2-18.txt" title="Run an idnits check of this document">Nits</a>] </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-ietf-oauth-v2-00">00</a> <a href="./draft-ietf-oauth-v2-01">01</a> <a href="./draft-ietf-oauth-v2-02">02</a> <a href="./draft-ietf-oauth-v2-03">03</a> <a href="./draft-ietf-oauth-v2-04">04</a> <a href="./draft-ietf-oauth-v2-05">05</a> <a href="./draft-ietf-oauth-v2-06">06</a> <a href="./draft-ietf-oauth-v2-07">07</a> <a href="./draft-ietf-oauth-v2-08">08</a> <a href="./draft-ietf-oauth-v2-09">09</a> <a href="./draft-ietf-oauth-v2-10">10</a> <a href="./draft-ietf-oauth-v2-11">11</a>                           
          <a href="./draft-ietf-oauth-v2-12">12</a> <a href="./draft-ietf-oauth-v2-13">13</a> <a href="./draft-ietf-oauth-v2-14">14</a> <a href="./draft-ietf-oauth-v2-15">15</a> <a href="./draft-ietf-oauth-v2-16">16</a> <a href="./draft-ietf-oauth-v2-17">17</a> <a href="./draft-ietf-oauth-v2-18">18</a> <a href="./draft-ietf-oauth-v2-19">19</a> <a href="./draft-ietf-oauth-v2-20">20</a> <a href="./draft-ietf-oauth-v2-21">21</a> <a href="./draft-ietf-oauth-v2-22">22</a> <a href="./draft-ietf-oauth-v2-23">23</a>                           
          <a href="./draft-ietf-oauth-v2-24">24</a> <a href="./draft-ietf-oauth-v2-25">25</a> <a href="./draft-ietf-oauth-v2-26">26</a> <a href="./draft-ietf-oauth-v2-27">27</a> <a href="./draft-ietf-oauth-v2-28">28</a> <a href="./draft-ietf-oauth-v2-29">29</a> <a href="./draft-ietf-oauth-v2-30">30</a>                                          </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Network Working Group                               E. Hammer-Lahav, Ed.
Internet-Draft                                                    Yahoo!
Obsoletes: <a href="./rfc5849">5849</a> (if approved)                                D. Recordon
Intended status: Standards Track                                Facebook
Expires: January 9, 2012                                        D. Hardt
                                                               Microsoft
                                                            July 8, 2011


                  <span class="h1">The OAuth 2.0 Authorization Protocol</span>
                         <span class="h1">draft-ietf-oauth-v2-18</span>

Abstract

   The OAuth 2.0 authorization protocol enables a third-party
   application to obtain limited access to an HTTP service, either on
   behalf of a resource owner by orchestrating an approval interaction
   between the resource owner and the HTTP service, or by allowing the
   third-party application to obtain access on its own behalf.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 9, 2012.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-1.1">1.1</a>.   Roles . . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.2">1.2</a>.   Protocol Flow . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.3">1.3</a>.   Access Token  . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
     <a href="#section-1.4">1.4</a>.   Authorization Grant . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
       <a href="#section-1.4.1">1.4.1</a>.  Authorization Code . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
       <a href="#section-1.4.2">1.4.2</a>.  Implicit . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
       <a href="#section-1.4.3">1.4.3</a>.  Resource Owner Password Credentials  . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-1.4.4">1.4.4</a>.  Client Credentials . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-1.4.5">1.4.5</a>.  Extensions . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-1.5">1.5</a>.   Refresh Token . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-1.6">1.6</a>.   Notational Conventions  . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
   <a href="#section-2">2</a>.  Client Registration  . . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-2.1">2.1</a>.   Client Types  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-2.2">2.2</a>.   Registration Requirements . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-2.3">2.3</a>.   Client Identifier . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-2.4">2.4</a>.   Client Authentication . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
       <a href="#section-2.4.1">2.4.1</a>.  Client Password  . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
       <a href="#section-2.4.2">2.4.2</a>.  Other Authentication Methods . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-2.5">2.5</a>.   Unregistered Clients  . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
   <a href="#section-3">3</a>.  Protocol Endpoints . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-3.1">3.1</a>.   Authorization Endpoint  . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
       <a href="#section-3.1.1">3.1.1</a>.  Response Type  . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
       <a href="#section-3.1.2">3.1.2</a>.  Redirection URI  . . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-3.2">3.2</a>.   Token Endpoint  . . . . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
       <a href="#section-3.2.1">3.2.1</a>.  Client Authentication  . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
   <a href="#section-4">4</a>.  Obtaining Authorization  . . . . . . . . . . . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-4.1">4.1</a>.   Authorization Code  . . . . . . . . . . . . . . . . . . . <a href="#page-18">18</a>
       <a href="#section-4.1.1">4.1.1</a>.  Authorization Request  . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
       <a href="#section-4.1.2">4.1.2</a>.  Authorization Response . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
       <a href="#section-4.1.3">4.1.3</a>.  Access Token Request . . . . . . . . . . . . . . . . . <a href="#page-23">23</a>
       <a href="#section-4.1.4">4.1.4</a>.  Access Token Response  . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
     <a href="#section-4.2">4.2</a>.   Implicit Grant  . . . . . . . . . . . . . . . . . . . . . <a href="#page-24">24</a>
       <a href="#section-4.2.1">4.2.1</a>.  Authorization Request  . . . . . . . . . . . . . . . . <a href="#page-27">27</a>
       <a href="#section-4.2.2">4.2.2</a>.  Access Token Response  . . . . . . . . . . . . . . . . <a href="#page-28">28</a>
     <a href="#section-4.3">4.3</a>.   Resource Owner Password Credentials . . . . . . . . . . . <a href="#page-30">30</a>
       <a href="#section-4.3.1">4.3.1</a>.  Authorization Request and Response . . . . . . . . . . <a href="#page-31">31</a>
       <a href="#section-4.3.2">4.3.2</a>.  Access Token Request . . . . . . . . . . . . . . . . . <a href="#page-32">32</a>
       <a href="#section-4.3.3">4.3.3</a>.  Access Token Response  . . . . . . . . . . . . . . . . <a href="#page-33">33</a>
     <a href="#section-4.4">4.4</a>.   Client Credentials  . . . . . . . . . . . . . . . . . . . <a href="#page-33">33</a>
       <a href="#section-4.4.1">4.4.1</a>.  Authorization Request and Response . . . . . . . . . . <a href="#page-34">34</a>



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


       <a href="#section-4.4.2">4.4.2</a>.  Access Token Request . . . . . . . . . . . . . . . . . <a href="#page-34">34</a>
       <a href="#section-4.4.3">4.4.3</a>.  Access Token Response  . . . . . . . . . . . . . . . . <a href="#page-35">35</a>
     <a href="#section-4.5">4.5</a>.   Extensions  . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-35">35</a>
   <a href="#section-5">5</a>.  Issuing an Access Token  . . . . . . . . . . . . . . . . . . . <a href="#page-36">36</a>
     <a href="#section-5.1">5.1</a>.   Successful Response . . . . . . . . . . . . . . . . . . . <a href="#page-36">36</a>
     <a href="#section-5.2">5.2</a>.   Error Response  . . . . . . . . . . . . . . . . . . . . . <a href="#page-38">38</a>
   <a href="#section-6">6</a>.  Refreshing an Access Token . . . . . . . . . . . . . . . . . . <a href="#page-39">39</a>
   <a href="#section-7">7</a>.  Accessing Protected Resources  . . . . . . . . . . . . . . . . <a href="#page-40">40</a>
     <a href="#section-7.1">7.1</a>.   Access Token Types  . . . . . . . . . . . . . . . . . . . <a href="#page-41">41</a>
   <a href="#section-8">8</a>.  Extensibility  . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-42">42</a>
     <a href="#section-8.1">8.1</a>.   Defining Access Token Types . . . . . . . . . . . . . . . <a href="#page-42">42</a>
     <a href="#section-8.2">8.2</a>.   Defining New Endpoint Parameters  . . . . . . . . . . . . <a href="#page-42">42</a>
     <a href="#section-8.3">8.3</a>.   Defining New Authorization Grant Types  . . . . . . . . . <a href="#page-43">43</a>
     <a href="#section-8.4">8.4</a>.   Defining New Authorization Endpoint Response Types  . . . <a href="#page-43">43</a>
     <a href="#section-8.5">8.5</a>.   Defining Additional Error Codes . . . . . . . . . . . . . <a href="#page-43">43</a>
   <a href="#section-9">9</a>.  Native Applications  . . . . . . . . . . . . . . . . . . . . . <a href="#page-44">44</a>
   <a href="#section-10">10</a>. Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-45">45</a>
     <a href="#section-10.1">10.1</a>.  Client Authentication . . . . . . . . . . . . . . . . . . <a href="#page-46">46</a>
     <a href="#section-10.2">10.2</a>.  Client Impersonation  . . . . . . . . . . . . . . . . . . <a href="#page-46">46</a>
     <a href="#section-10.3">10.3</a>.  Access Tokens . . . . . . . . . . . . . . . . . . . . . . <a href="#page-47">47</a>
     <a href="#section-10.4">10.4</a>.  Refresh Tokens  . . . . . . . . . . . . . . . . . . . . . <a href="#page-47">47</a>
     <a href="#section-10.5">10.5</a>.  Authorization Codes . . . . . . . . . . . . . . . . . . . <a href="#page-48">48</a>
     <a href="#section-10.6">10.6</a>.  Authorization Code Leakage  . . . . . . . . . . . . . . . <a href="#page-48">48</a>
     <a href="#section-10.7">10.7</a>.  Resource Owner Password Credentials . . . . . . . . . . . <a href="#page-49">49</a>
     <a href="#section-10.8">10.8</a>.  Request Confidentiality . . . . . . . . . . . . . . . . . <a href="#page-49">49</a>
     <a href="#section-10.9">10.9</a>.  Endpoints Authenticity  . . . . . . . . . . . . . . . . . <a href="#page-49">49</a>
     <a href="#section-10.10">10.10</a>. Credentials Guessing Attacks  . . . . . . . . . . . . . . <a href="#page-49">49</a>
     <a href="#section-10.11">10.11</a>. Phishing Attacks  . . . . . . . . . . . . . . . . . . . . <a href="#page-50">50</a>
     <a href="#section-10.12">10.12</a>. Cross-Site Request Forgery  . . . . . . . . . . . . . . . <a href="#page-50">50</a>
     <a href="#section-10.13">10.13</a>. Clickjacking  . . . . . . . . . . . . . . . . . . . . . . <a href="#page-51">51</a>
   <a href="#section-11">11</a>. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-51">51</a>
     <a href="#section-11.1">11.1</a>.  The OAuth Access Token Type Registry  . . . . . . . . . . <a href="#page-51">51</a>
       <a href="#section-11.1.1">11.1.1</a>. Registration Template  . . . . . . . . . . . . . . . . <a href="#page-52">52</a>
     <a href="#section-11.2">11.2</a>.  The OAuth Parameters Registry . . . . . . . . . . . . . . <a href="#page-52">52</a>
       <a href="#section-11.2.1">11.2.1</a>. Registration Template  . . . . . . . . . . . . . . . . <a href="#page-53">53</a>
       <a href="#section-11.2.2">11.2.2</a>. Initial Registry Contents  . . . . . . . . . . . . . . <a href="#page-53">53</a>
     11.3.  The OAuth Authorization Endpoint Response Type
            Registry  . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-55">55</a>
       <a href="#section-11.3.1">11.3.1</a>. Registration Template  . . . . . . . . . . . . . . . . <a href="#page-56">56</a>
       <a href="#section-11.3.2">11.3.2</a>. Initial Registry Contents  . . . . . . . . . . . . . . <a href="#page-56">56</a>
     <a href="#section-11.4">11.4</a>.  The OAuth Extensions Error Registry . . . . . . . . . . . <a href="#page-57">57</a>
       <a href="#section-11.4.1">11.4.1</a>. Registration Template  . . . . . . . . . . . . . . . . <a href="#page-57">57</a>
   <a href="#section-12">12</a>. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-58">58</a>
   <a href="#appendix-A">Appendix A</a>.  Editor's Notes  . . . . . . . . . . . . . . . . . . . <a href="#page-59">59</a>
   <a href="#section-13">13</a>. References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-59">59</a>
     <a href="#section-13.1">13.1</a>.  Normative References  . . . . . . . . . . . . . . . . . . <a href="#page-59">59</a>
     <a href="#section-13.2">13.2</a>.  Informative References  . . . . . . . . . . . . . . . . . <a href="#page-60">60</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-61">61</a>



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   In the traditional client-server authentication model, the client
   accesses a protected resource on the server by authenticating with
   the server using the resource owner's credentials.  In order to
   provide third-party applications access to protected resources, the
   resource owner shares its credentials with the third-party.  This
   creates several problems and limitations:

   o  Third-party applications are required to store the resource
      owner's credentials for future use, typically a password in clear-
      text.
   o  Servers are required to support password authentication, despite
      the security weaknesses created by passwords.
   o  Third-party applications gain overly broad access to the resource
      owner's protected resources, leaving resource owners without any
      ability to restrict duration or access to a limited subset of
      resources.
   o  Resource owners cannot revoke access to an individual third-party
      without revoking access to all third-parties, and must do so by
      changing their password.
   o  Compromise of any third-party application results in compromise of
      the end-user's password and all of the data protected by that
      password.

   OAuth addresses these issues by introducing an authorization layer
   and separating the role of the client from that of the resource
   owner.  In OAuth, the client requests access to resources controlled
   by the resource owner and hosted by the resource server, and is
   issued a different set of credentials than those of the resource
   owner.

   Instead of using the resource owner's credentials to access protected
   resources, the client obtains an access token - a string denoting a
   specific scope, lifetime, and other access attributes.  Access tokens
   are issued to third-party clients by an authorization server with the
   approval of the resource owner.  The client uses the access token to
   access the protected resources hosted by the resource server.

   For example, an end-user (resource owner) can grant a printing
   service (client) access to her protected photos stored at a photo
   sharing service (resource server), without sharing her username and
   password with the printing service.  Instead, she authenticates
   directly with a server trusted by the photo sharing service
   (authorization server) which issues the printing service delegation-
   specific credentials (access token).

   This specification is designed for use with HTTP [<a href="./rfc2616" title="&quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;">RFC2616</a>].  The use



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   of OAuth with any transport protocol other than HTTP is undefined.

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Roles</span>

   OAuth includes four roles working together to grant and provide
   access to protected resources - access restricted resources requiring
   authentication:

   resource owner
      An entity capable of granting access to a protected resource (e.g.
      end-user).
   resource server
      The server hosting the protected resources, capable of accepting
      and responding to protected resource requests using access tokens.
   client
      An application making protected resource requests on behalf of the
      resource owner and with its authorization.
   authorization server
      The server issuing access tokens to the client after successfully
      authenticating the resource owner and obtaining authorization.

   The interaction between the authorization server and resource server
   is beyond the scope of this specification.  The authorization server
   may be the same server as the resource server or a separate entity.
   A single authorization server may issue access tokens accepted by
   multiple resource servers.

<span class="h3"><a class="selflink" name="section-1.2" href="#section-1.2">1.2</a>.  Protocol Flow</span>


     +--------+                               +---------------+
     |        |--(A)- Authorization Request -&gt;|   Resource    |
     |        |                               |     Owner     |
     |        |&lt;-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant --&gt;| Authorization |
     | Client |                               |     Server    |
     |        |&lt;-(D)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------&gt;|    Resource   |
     |        |                               |     Server    |
     |        |&lt;-(F)--- Protected Resource ---|               |
     +--------+                               +---------------+




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


                     Figure 1: Abstract Protocol Flow

   The abstract flow illustrated in Figure 1 describes the interaction
   between the four roles and includes the following steps:

   (A)  The client requests authorization from the resource owner.  The
        authorization request can be made directly to the resource owner
        (as shown), or preferably indirectly via an intermediary such as
        an authorization server.
   (B)  The client receives an authorization grant which represents the
        authorization provided by the resource owner.  The authorization
        grant type depends on the method used by the client and
        supported by the authorization server to obtain it.
   (C)  The client requests an access token by authenticating with the
        authorization server and presenting the authorization grant.
   (D)  The authorization server authenticates the client and validates
        the authorization grant, and if valid issues an access token.
   (E)  The client requests the protected resource from the resource
        server and authenticates by presenting the access token.
   (F)  The resource server validates the access token, and if valid,
        serves the request.

<span class="h3"><a class="selflink" name="section-1.3" href="#section-1.3">1.3</a>.  Access Token</span>

   Access tokens are credentials used to access protected resources.  An
   access token is a string representing an authorization issued to the
   client.  The string is usually opaque to the client.  Tokens
   represent specific scopes and durations of access, granted by the
   resource owner, and enforced by the resource server and authorization
   server.

   The token may denote an identifier used to retrieve the authorization
   information, or self-contain the authorization information in a
   verifiable manner (i.e. a token string consisting of some data and a
   signature).  Additional authentication credentials, which are beyond
   the scope of this specification, may be required in order for the
   client to use a token.

   The access token provides an abstraction layer, replacing different
   authorization constructs (e.g. username and password) with a single
   token understood by the resource server.  This abstraction enables
   issuing access tokens more restrictive than the authorization grant
   used to obtain them, as well as removing the resource server's need
   to understand a wide range of authentication methods.

   Access tokens can have different formats, structures, and methods of
   utilization (e.g. cryptographic properties) based on the resource
   server security requirements.  Access token attributes and the



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   methods used to access protected resources are beyond the scope of
   this specification and are defined by companion specifications.

<span class="h3"><a class="selflink" name="section-1.4" href="#section-1.4">1.4</a>.  Authorization Grant</span>

   An authorization grant is a general term used to describe the
   intermediate credentials representing the resource owner
   authorization (to access its protected resources), and serves as an
   abstraction layer.  An authorization grant is used by the client to
   obtain an access token.

   This specification defines four grant types: authorization code,
   implicit, resource owner password credentials, and client
   credentials, as well as an extensibility mechanism for defining
   additional types.

<span class="h4"><a class="selflink" name="section-1.4.1" href="#section-1.4.1">1.4.1</a>.  Authorization Code</span>

   The authorization code is obtained by using an authorization server
   as an intermediary between the client and resource owner.  Instead of
   requesting authorization directly from the resource owner, the client
   directs the resource owner to an authorization server (via its user-
   agent as defined in [<a href="./rfc2616" title="&quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;">RFC2616</a>]), which in turn directs the resource
   owner back to the client with the authorization code.

   Before directing the resource owner back to the client with the
   authorization code, the authorization server authenticates the
   resource owner and obtains authorization.  Because the resource owner
   only authenticates with the authorization server, the resource
   owner's credentials are never shared with the client.

   The authorization code provides a few important security benefits
   such as the ability to authenticate the client and issuing the access
   token directly to the client without potentially exposing it to
   others, including the resource owner.

<span class="h4"><a class="selflink" name="section-1.4.2" href="#section-1.4.2">1.4.2</a>.  Implicit</span>

   The authorization grant is implicit when an access token is issued to
   the client directly as the result of the resource owner
   authorization, without using intermediate credentials (such as an
   authorization code).

   When issuing an implicit grant, the authorization server does not
   authenticate the client and the client identity is verified via the
   redirection URI used to deliver the access token to the client.  The
   access token may be exposed to the resource owner or other
   applications with access to the resource owner's user-agent.



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   Implicit grants improve the responsiveness and efficiency of some
   clients (such as a client implemented as an in-browser application)
   since it reduces the number of round trips required to obtain an
   access token.  However, this convenience should be weighted against
   the security implications of using implicit grants, especially when
   the authorization code grant type is available.

<span class="h4"><a class="selflink" name="section-1.4.3" href="#section-1.4.3">1.4.3</a>.  Resource Owner Password Credentials</span>

   The resource owner password credentials (e.g. a username and
   password) can be used directly as an authorization grant to obtain an
   access token.  The credentials should only be used when there is a
   high degree of trust between the resource owner and the client (e.g.
   its device operating system or a highly privileged application), and
   when other authorization grant types are not available (such as an
   authorization code).

   Even though this grant type requires direct client access to the
   resource owner credentials, the resource owner credentials are used
   for a single request and are exchanged for an access token.  Unlike
   the HTTP Basic authentication scheme defined in [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>], this grant
   type (when combined with a refresh token) eliminates the need for the
   client to store the resource owner credentials for future use.

<span class="h4"><a class="selflink" name="section-1.4.4" href="#section-1.4.4">1.4.4</a>.  Client Credentials</span>

   The client credentials (or other forms of client authentication) can
   be used as an authorization grant when the authorization scope is
   limited to the protected resources under the control of the client,
   or to protected resources previously arranged with the authorization
   server.  Client credentials are used as an authorization grant
   typically when the client is acting on its own behalf (the client is
   also the resource owner).

<span class="h4"><a class="selflink" name="section-1.4.5" href="#section-1.4.5">1.4.5</a>.  Extensions</span>

   Additional grant types may be defined to provide a bridge between
   OAuth and other protocols.

<span class="h3"><a class="selflink" name="section-1.5" href="#section-1.5">1.5</a>.  Refresh Token</span>

   Refresh tokens are credentials used to obtain access tokens.  Refresh
   tokens are issued to the client by the authorization server and are
   used to obtain a new access token when the current access token
   becomes invalid or expires, or to obtain additional access tokens
   with identical or narrower scope (access tokens may have a shorter
   lifetime and fewer permissions than authorized by the resource
   owner).  Issuing a refresh token is optional and is included when



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   issuing an access token.

   A refresh token is a string representing the authorization granted to
   the client by the resource owner.  The string is usually opaque to
   the client.  The token denotes an identifier used to retrieve the
   authorization information.  Unlike access tokens, refresh tokens are
   intended for use only with authorization servers and are never sent
   to resource servers.


  +--------+                                           +---------------+
  |        |--(A)------- Authorization Grant ---------&gt;|               |
  |        |                                           |               |
  |        |&lt;-(B)----------- Access Token -------------|               |
  |        |               &amp; Refresh Token             |               |
  |        |                                           |               |
  |        |                            +----------+   |               |
  |        |--(C)---- Access Token ----&gt;|          |   |               |
  |        |                            |          |   |               |
  |        |&lt;-(D)- Protected Resource --| Resource |   | Authorization |
  | Client |                            |  Server  |   |     Server    |
  |        |--(E)---- Access Token ----&gt;|          |   |               |
  |        |                            |          |   |               |
  |        |&lt;-(F)- Invalid Token Error -|          |   |               |
  |        |                            +----------+   |               |
  |        |                                           |               |
  |        |--(G)----------- Refresh Token -----------&gt;|               |
  |        |                                           |               |
  |        |&lt;-(H)----------- Access Token -------------|               |
  +--------+           &amp; Optional Refresh Token        +---------------+


               Figure 2: Refreshing an Expired Access Token

   The flow illustrated in Figure 2 includes the following steps:

   (A)  The client requests an access token by authenticating with the
        authorization server, and presenting an authorization grant.
   (B)  The authorization server authenticates the client and validates
        the authorization grant, and if valid issues an access token and
        a refresh token.
   (C)  The client makes a protected resource requests to the resource
        server by presenting the access token.
   (D)  The resource server validates the access token, and if valid,
        serves the request.






<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012                [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   (E)  Steps (C) and (D) repeat until the access token expires.  If the
        client knows the access token expired, it skips to step (G),
        otherwise it makes another protected resource request.
   (F)  Since the access token is invalid, the resource server returns
        an invalid token error.
   (G)  The client requests a new access token by authenticating with
        the authorization server and presenting the refresh token.
   (H)  The authorization server authenticates the client and validates
        the refresh token, and if valid issues a new access token (and
        optionally, a new refresh token).

<span class="h3"><a class="selflink" name="section-1.6" href="#section-1.6">1.6</a>.  Notational Conventions</span>

   The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   specification are to be interpreted as described in [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].

   This specification uses the Augmented Backus-Naur Form (ABNF)
   notation of [<a href="./rfc5234" title="&quot;Augmented BNF for Syntax Specifications: ABNF&quot;">RFC5234</a>].

   Certain security-related terms are to be understood in the sense
   defined in [<a href="./rfc4949" title="&quot;Internet Security Glossary, Version 2&quot;">RFC4949</a>].  These terms include, but are not limited to,
   'attack', 'authentication', 'authorization', 'certificate',
   'confidentiality', 'credential', 'encryption', 'identity', 'sign',
   'signature', 'trust', 'validate', and 'verify'.

   Unless otherwise noted, all the protocol parameter names and values
   are case sensitive.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Client Registration</span>

   [[ Pending Consensus ]]

   Before initiating the protocol, the client registers with the
   authorization server.  The means through which the client registers
   with the authorization server are beyond the scope of this
   specification, but typically involve end-user interaction with an
   HTML registration form.

   Client registration does not require a direct interaction between the
   client and the authorization server.  When supported by the
   authorization server, registration can rely on other means for
   establishing trust and obtaining the required client properties (e.g.
   redirection URI, client type).  For example, registration can be
   accomplished using a self-issued or third-party-issued assertion, or
   by the authorization server performing client discovery using a
   trusted channel.



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h3"><a class="selflink" name="section-2.1" href="#section-2.1">2.1</a>.  Client Types</span>

   OAuth defines two client types, based on their ability to
   authenticate securely with the authorization server (i.e. ability to
   maintain the confidentiality of their client credentials):

   private
      Clients capable of maintaining the confidentiality of their
      credentials (e.g. client implemented on a secure server with
      restricted access to the client credentials), or capable of secure
      client authentication using other means.
   public
      Clients incapable of maintaining the confidentiality of their
      credentials (e.g. clients executing on the resource owner's device
      such as an installed native application or a user-agent-based
      application), and incapable of secure client authentication via
      any other mean.

   The client type designation is based on the authorization server's
   definition of secure authentication and its acceptable exposure
   levels of client credentials.

<span class="h3"><a class="selflink" name="section-2.2" href="#section-2.2">2.2</a>.  Registration Requirements</span>

   When registering a client, the client developer MUST specify:

   o  the client type as described in <a href="#section-2.1">Section 2.1</a>,
   o  the client redirection URIs as described in <a href="#section-3.1.2">Section 3.1.2</a>, and
   o  any other information required by the authorization server (e.g.
      application name, website, description, logo image, the acceptance
      of legal terms).

<span class="h3"><a class="selflink" name="section-2.3" href="#section-2.3">2.3</a>.  Client Identifier</span>

   The authorization server issues the registered client a client
   identifier - a unique string representing the registration
   information provided by the client.  The client identifier is not a
   secret, it is exposed to the resource owner, and cannot not be used
   alone for client authentication.

<span class="h3"><a class="selflink" name="section-2.4" href="#section-2.4">2.4</a>.  Client Authentication</span>

   In addition, the client and authorization server establish a client
   authentication method suitable for the client type and security
   requirements of the authorization server.  The authorization server
   MAY accept any form of client authentication meeting its security
   requirements.




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   Private clients are typically issued (or establish) a set of client
   credentials used for authenticating with the authorization server
   (e.g. password, public/private key pair).

   The authorization server SHOULD NOT make assumptions about the client
   type or accept the type information provided without establishing
   trust with the client or its developer.  The authorization server
   MUST NOT rely on client authentication performed by public clients.

   The client MUST NOT use more than one authentication method in each
   request.

<span class="h4"><a class="selflink" name="section-2.4.1" href="#section-2.4.1">2.4.1</a>.  Client Password</span>

   Clients in possession of a client password MAY use the HTTP Basic
   authentication scheme as defined in [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>] to authenticate with
   the authorization server.  The client identifier is used as the
   username, and the client password is used as the password.

   For example (extra line breaks are for display purposes only):


     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW


   Alternatively, the authorization server MAY allow including the
   client credentials in the request body using the following
   parameters:

   client_id
         REQUIRED.  The client identifier issued to the client during
         the registration process described by <a href="#section-2.3">Section 2.3</a>.
   client_secret
         REQUIRED.  The client secret.

   Including the client credentials in the request body using the two
   parameters is NOT RECOMMENDED, and should be limited to clients
   unable to directly utilize the HTTP Basic authentication scheme (or
   other password-based HTTP authentication schemes).

   For example, requesting to refresh an access token (<a href="#section-6">Section 6</a>) using
   the body parameters (extra line breaks are for display purposes
   only):








<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded;charset=UTF-8

     grant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
     &amp;client_id=s6BhdRkqt3&amp;client_secret=7Fjfp0ZBr1KtDRbnfVdmIw


   The authorization server MUST require the use of a transport-layer
   security mechanism when sending requests to the token endpoint, as
   requests using this authentication method result in the transmission
   of clear-text credentials.

<span class="h4"><a class="selflink" name="section-2.4.2" href="#section-2.4.2">2.4.2</a>.  Other Authentication Methods</span>

   The authorization server MAY support any suitable HTTP authentication
   scheme matching its security requirements.  When using other
   authentication methods, the authorization server MUST define a
   mapping between the client identifier (registration record) and
   authentication scheme.

<span class="h3"><a class="selflink" name="section-2.5" href="#section-2.5">2.5</a>.  Unregistered Clients</span>

   This specification does not exclude the use of unregistered clients.
   However, the use with such clients is beyond the scope of this
   specification, and requires additional security analysis and review
   of its interoperability impact.


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Protocol Endpoints</span>

   The authorization process utilizes two endpoints (HTTP resources):

   o  Authorization endpoint - used to obtain authorization from the
      resource owner via user-agent redirection.
   o  Token endpoint - used to exchange an authorization grant for an
      access token, typically with client authentication.

   Not every authorization grant type utilizes both endpoints.
   Extension grant types MAY define additional endpoints as needed.

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  Authorization Endpoint</span>

   The authorization endpoint is used to interact with the resource
   owner and obtain authorization which is expressed explicitly as an
   authorization code (later exchanged for an access token), or
   implicitly by direct issuance of an access token.




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   The authorization server MUST first verify the identity of the
   resource owner.  The way in which the authorization server
   authenticates the resource owner (e.g. username and password login,
   session cookies) is beyond the scope of this specification.

   The means through which the client obtains the location of the
   authorization endpoint are beyond the scope of this specification but
   the location is typically provided in the service documentation.  The
   endpoint URI MAY include a query component as defined by <a href="./rfc3986#section-3">[RFC3986]
   section&nbsp;3</a>, which MUST be retained when adding additional query
   parameters.  The endpoint URI MUST NOT include a fragment component.

   Since requests to the authorization endpoint result in user
   authentication and the transmission of clear-text credentials (in the
   HTTP response), the authorization server MUST require the use of a
   transport-layer security mechanism when sending requests to the
   authorization endpoint.  The authorization server MUST support TLS
   1.2 as defined in [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>], and MAY support additional transport-
   layer mechanisms meeting its security requirements.

   The authorization server MUST support the use of the HTTP "GET"
   method [<a href="./rfc2616" title="&quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;">RFC2616</a>] for the authorization endpoint, and MAY support the
   use of the "POST" method as well.

   Parameters sent without a value MUST be treated as if they were
   omitted from the request.  The authorization server SHOULD ignore
   unrecognized request parameters.  Request and response parameters
   MUST NOT be included more than once.

<span class="h4"><a class="selflink" name="section-3.1.1" href="#section-3.1.1">3.1.1</a>.  Response Type</span>

   The authorization endpoint is used by the authorization code grant
   type and implicit grant type flows.  The client informs the
   authorization server of the desired grant type using the following
   parameter:

   response_type
         REQUIRED.  The value MUST be one of "code" for requesting an
         authorization code as described by <a href="#section-4.1.1">Section 4.1.1</a>, "token" for
         requesting an access token (implicit grant) as described by
         <a href="#section-4.2.1">Section 4.2.1</a>, or a registered extension value as described by
         <a href="#section-8.4">Section 8.4</a>.

   If an authorization request is missing the "response_type" parameter,
   the authorization server SHOULD return an error response as described
   in <a href="#section-4.1.2.1">Section 4.1.2.1</a>.





<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h4"><a class="selflink" name="section-3.1.2" href="#section-3.1.2">3.1.2</a>.  Redirection URI</span>

   [[ Pending Consensus ]]

   After completing its interaction with the resource owner, the
   authorization server directs the resource owner's user-agent back to
   the client.  The authorization server redirects the user-agent to the
   client's redirection URI previously established with the
   authorization server during the client registration process.

   The redirection URI MUST be an absolute URI as defined by <a href="./rfc3986#section-4.3">[RFC3986]
   section&nbsp;4.3</a>, MAY include a query component which MUST be retained by
   the authorization server when adding additional query parameters, and
   MUST NOT include a fragment component.

<span class="h5"><a class="selflink" name="section-3.1.2.1" href="#section-3.1.2.1">3.1.2.1</a>.  Endpoint Confidentiality</span>

   If a redirection request will result in the transmission of an
   authorization code or access token over an open network (between the
   resource owner's user-agent and the client), the client SHOULD
   require the use of a transport-layer security mechanism.

   Lack of transport-layer security can have a severe impact on the
   security of the client and the protected resources it is authorized
   to access.  The use of transport-layer security is particularly
   critical when the authorization process is used as a form of
   delegated end-user authentication by the client (e.g. third-party
   sign-in service).

<span class="h5"><a class="selflink" name="section-3.1.2.2" href="#section-3.1.2.2">3.1.2.2</a>.  Registration Requirements</span>

   The authorization server MUST require public clients to register
   their redirection URI, MUST require all clients to register their
   redirection URI prior to utilizing the implicit grant type, and
   SHOULD require all clients to register their redirection URI prior to
   utilizing the authorization code grant type.

   The authorization server SHOULD require the client to provide the
   complete redirection URI (the client MAY use the "state" request
   parameter to achieve per-request customization).  The authorization
   server MAY allow the client to register multiple redirection URIs.
   If requiring the registration of the complete redirection URI is not
   possible, the authorization server SHOULD require the registration of
   the URI scheme, authority, and path.







<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h5"><a class="selflink" name="section-3.1.2.3" href="#section-3.1.2.3">3.1.2.3</a>.  Dynamic Configuration</span>

   If multiple redirection URIs have been registered, if only part of
   the redirection URI has been registered, or if no redirection URI has
   been registered, the client MUST include a redirection URI with the
   authorization request using the "redirect_uri" request parameter.

   When a redirection URI is included in an authorization request, the
   authorization server MUST compare and match the value received
   against at least one of the registered redirection URIs (or URI
   components) as defined in <a href="./rfc3986#section-6">[RFC3986] section&nbsp;6</a>, if any redirection
   URIs were registered.

   If the authorization server allows the client to dynamically change
   the query component of the redirection URI, the client MUST ensure
   that manipulation of the query component by an attacker cannot lead
   to an abuse of the redirection endpoint as an open redirector.

<span class="h5"><a class="selflink" name="section-3.1.2.4" href="#section-3.1.2.4">3.1.2.4</a>.  Invalid Endpoint</span>

   If an authorization request fails validation due to a missing,
   invalid, or mismatching redirection URI, the authorization server
   SHOULD inform the resource owner of the error, and MUST NOT
   automatically redirect the user-agent to the invalid redirection URI.

   The authorization server SHOULD NOT redirect the user-agent to
   unregistered or untrusted URIs to prevent the authorization endpoint
   from being used as an open redirector.

<span class="h5"><a class="selflink" name="section-3.1.2.5" href="#section-3.1.2.5">3.1.2.5</a>.  Endpoint Content</span>

   The redirection request to the client's endpoint typically results in
   an HTML document response, processed by the user-agent.  If the HTML
   response is served directly as the result of the redirection request,
   any script included in the HTML document will execute with full
   access to the redirection URI and the credentials it contains.

   The client SHOULD NOT include any third-party scripts in the
   redirection endpoint response.  Instead, it should extract the
   credentials from the URI and redirect the user-agent again to another
   endpoint without the credentials in the URI.

   The client MUST NOT include any untrusted third-party scripts in the
   redirection endpoint response (e.g. third-party analytics, social
   plug-ins, ad networks) without first ensuring that its own scripts
   used to extract and remove the credentials from the URI will execute
   first.




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h3"><a class="selflink" name="section-3.2" href="#section-3.2">3.2</a>.  Token Endpoint</span>

   The token endpoint is used by the client to obtain an access token by
   presenting its authorization grant or refresh token.  The token
   endpoint is used with every authorization grant except for the
   implicit grant type (since an access token is issued directly).

   The means through which the client obtains the location of the token
   endpoint are beyond the scope of this specification but is typically
   provided in the service documentation.  The endpoint URI MAY include
   a query component, which MUST be retained when adding additional
   query parameters.

   Since requests to the token endpoint result in the transmission of
   clear-text credentials (in the HTTP request and response), the
   authorization server MUST require the use of a transport-layer
   security mechanism when sending requests to the token endpoint.  The
   authorization server MUST support TLS 1.2 as defined in [<a href="./rfc5246" title="&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;">RFC5246</a>],
   and MAY support additional transport-layer mechanisms meeting its
   security requirements.

   The client MUST use the HTTP "POST" method when making access token
   requests.

   Parameters sent without a value MUST be treated as if they were
   omitted from the request.  The authorization server SHOULD ignore
   unrecognized request parameters.  Request and response parameters
   MUST NOT be included more than once.

<span class="h4"><a class="selflink" name="section-3.2.1" href="#section-3.2.1">3.2.1</a>.  Client Authentication</span>

   [[ Pending Consensus ]]

   Private clients, clients issued client credentials, or clients
   assigned other authentication requirements, MUST authenticate with
   the authorization server as described in <a href="#section-2.4">Section 2.4</a> when making
   requests to the token endpoint.  Client authentication is used for:

   o  Enforcing the binding of refresh tokens and authorization codes to
      the client they are issued.  Client authentication is critical
      when an authorization code is transmitted to the redirection URI
      endpoint over an insecure channel, or when the redirection URI has
      not been registered in full.
   o  Recovery from a compromised client by disabling the client or
      changing its credentials, by preventing an attacker from abusing
      stolen refresh tokens.  Changing a single set of client
      credentials is significantly faster than revoking an entire set of
      refresh tokens.



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   o  Implementing authentication management best practices which
      require periodic credentials rotation.  Rotation of an entire set
      of refresh tokens can be challenging, while rotation of a single
      set of client credentials is significantly easier.  In addition,
      this specification does not provide a mechanism for refresh token
      rotation.

   The security ramifications of allowing unauthenticated access by
   public clients to the token endpoint MUST be considered, as well as
   the issuance of refresh tokens to public clients, their scope, and
   lifetime.


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Obtaining Authorization</span>

   To request an access token, the client obtains authorization from the
   resource owner.  The authorization is expressed in the form of an
   authorization grant which the client uses to request the access
   token.  OAuth defines four grant types: authorization code, implicit,
   resource owner password credentials, and client credentials.  It also
   provides an extension mechanism for defining additional grant types.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Authorization Code</span>

   The authorization code grant type is used to obtain both access
   tokens and refresh tokens and is optimized for private clients.  As a
   redirection-based flow, the client must be capable of interacting
   with the resource owner's user-agent (typically a web browser) and
   capable of receiving incoming requests (via redirection) from the
   authorization server.





















<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


     +----------+
     | resource |
     |   owner  |
     |          |
     +----------+
          ^
          |
         (B)
     +----|-----+          Client Identifier      +---------------+
     |         -+----(A)-- &amp; Redirection URI ----&gt;|               |
     |  User-   |                                 | Authorization |
     |  Agent  -+----(B)-- User authenticates ---&gt;|     Server    |
     |          |                                 |               |
     |         -+----(C)-- Authorization Code ---&lt;|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (A)  (C)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |&gt;---(D)-- Authorization Code ---------'      |
     |  Client |          &amp; Redirection URI                  |
     |         |                                             |
     |         |&lt;---(E)----- Access Token -------------------'
     +---------+       (w/ Optional Refresh Token)


                     Figure 3: Authorization Code Flow

   The flow illustrated in Figure 3 includes the following steps:

   (A)  The client initiates the flow by directing the resource owner's
        user-agent to the authorization endpoint.  The client includes
        its client identifier, requested scope, local state, and a
        redirection URI to which the authorization server will send the
        user-agent back once access is granted (or denied).
   (B)  The authorization server authenticates the resource owner (via
        the user-agent) and establishes whether the resource owner
        grants or denies the client's access request.
   (C)  Assuming the resource owner grants access, the authorization
        server redirects the user-agent back to the client using the
        redirection URI provided earlier.  The redirection URI includes
        an authorization code and any local state provided by the client
        earlier.







<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   (D)  The client requests an access token from the authorization
        server's token endpoint by including the authorization code
        received in the previous step.  When making the request, the
        client authenticates with the authorization server.  The client
        includes the redirection URI used to obtain the authorization
        code for verification.
   (E)  The authorization server authenticates the client, validates the
        authorization code, and ensures the redirection URI received
        matches the URI used to redirect the client in step (C).  If
        valid, responds back with an access token.

<span class="h4"><a class="selflink" name="section-4.1.1" href="#section-4.1.1">4.1.1</a>.  Authorization Request</span>

   The client constructs the request URI by adding the following
   parameters to the query component of the authorization endpoint URI
   using the "application/x-www-form-urlencoded" format as defined by
   [<a href="#ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>]:

   response_type
         REQUIRED.  Value MUST be set to "code".
   client_id
         REQUIRED.  The client identifier as described in <a href="#section-2.3">Section 2.3</a>.
   redirect_uri
         OPTIONAL, as described in <a href="#section-3.1.2">Section 3.1.2</a>.
   scope
         OPTIONAL.  The scope of the access request expressed as a list
         of space-delimited, case sensitive strings.  The value is
         defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.
   state
         OPTIONAL.  An opaque value used by the client to maintain state
         between the request and callback.  The authorization server
         includes this value when redirecting the user-agent back to the
         client.

   The client directs the resource owner to the constructed URI using an
   HTTP redirection response, or by other means available to it via the
   user-agent.

   For example, the client directs the user-agent to make the following
   HTTP request using transport-layer security (extra line breaks are
   for display purposes only):


    GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz
        &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


    Host: server.example.com


   The authorization server validates the request to ensure all required
   parameters are present and valid.  If the request is valid, the
   authorization server authenticates the resource owner and obtains an
   authorization decision (by asking the resource owner or by
   establishing approval via other means).

   When a decision is established, the authorization server directs the
   user-agent to the provided client redirection URI using an HTTP
   redirection response, or by other means available to it via the user-
   agent.

<span class="h4"><a class="selflink" name="section-4.1.2" href="#section-4.1.2">4.1.2</a>.  Authorization Response</span>

   If the resource owner grants the access request, the authorization
   server issues an authorization code and delivers it to the client by
   adding the following parameters to the query component of the
   redirection URI using the "application/x-www-form-urlencoded" format:

   code
         REQUIRED.  The authorization code generated by the
         authorization server.  The authorization code MUST expire
         shortly after it is issued to mitigate the risk of leaks.  A
         maximum authorization code lifetime of 10 minutes is
         RECOMMENDED.  The client MUST NOT reuse the authorization code.
         If an authorization code is used more than once, the
         authorization server SHOULD attempt to revoke all tokens
         previously issued based on that authorization code.  The
         authorization code is bound to the client identifier and
         redirection URI.
   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set to the exact value received from
         the client.

   For example, the authorization server redirects the user-agent by
   sending the following HTTP response:


     HTTP/1.1 302 Found
     Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
               &amp;state=xyz


   The client SHOULD ignore unrecognized response parameters.  The
   authorization code string size is left undefined by this



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   specification.  The client should avoid making assumptions about code
   value sizes.  The authorization server should document the size of
   any value it issues.

<span class="h5"><a class="selflink" name="section-4.1.2.1" href="#section-4.1.2.1">4.1.2.1</a>.  Error Response</span>

   If the request fails due to a missing, invalid, or mismatching
   redirection URI, or if the client identifier provided is invalid, the
   authorization server SHOULD inform the resource owner of the error,
   and MUST NOT automatically redirect the user-agent to the invalid
   redirection URI.

   If the resource owner denies the access request or if the request
   fails for reasons other than a missing or invalid redirection URI,
   the authorization server informs the client by adding the following
   parameters to the query component of the redirection URI using the
   "application/x-www-form-urlencoded" format:

   error
         REQUIRED.  A single error code from the following:
         invalid_request
               The request is missing a required parameter, includes an
               unsupported parameter or parameter value, or is otherwise
               malformed.
         unauthorized_client
               The client is not authorized to request an authorization
               code using this method.
         access_denied
               The resource owner or authorization server denied the
               request.
         unsupported_response_type
               The authorization server does not support obtaining an
               authorization code using this method.
         invalid_scope
               The requested scope is invalid, unknown, or malformed.
         server_error
               The authorization server encountered an unexpected
               condition which prevented it from fulfilling the request.
         temporarily_unavailable
               The authorization server is currently unable to handle
               the request due to a temporary overloading or maintenance
               of the server.
   error_description
         OPTIONAL.  A human-readable UTF-8 encoded text providing
         additional information, used to assist the client developer in
         understanding the error that occurred.





<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 22]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-23" id="page-23" href="#page-23" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   error_uri
         OPTIONAL.  A URI identifying a human-readable web page with
         information about the error, used to provide the client
         developer with additional information about the error.
   state
         REQUIRED if a valid "state" parameter was present in the client
         authorization request.  Set to the exact value received from
         the client.

   For example, the authorization server redirects the user-agent by
   sending the following HTTP response:


   HTTP/1.1 302 Found
   Location: https://client.example.com/cb?error=access_denied&amp;state=xyz


<span class="h4"><a class="selflink" name="section-4.1.3" href="#section-4.1.3">4.1.3</a>.  Access Token Request</span>

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format in the HTTP request entity-body:

   grant_type
         REQUIRED.  Value MUST be set to "authorization_code".
   code
         REQUIRED.  The authorization code received from the
         authorization server.
   redirect_uri
         REQUIRED, if the "redirect_uri" parameter was included in the
         authorization request described in <a href="#section-4.1.1">Section 4.1.1</a>, and their
         values MUST be identical.

   If the client type is private or was issued client credentials (or
   assigned other authentication requirements), the client MUST
   authenticate with the authorization server as described in
   <a href="#section-3.2.1">Section 3.2.1</a>.

   For example, the client makes the following HTTP using transport-
   layer security (extra line breaks are for display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded;charset=UTF-8

     grant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 23]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-24" id="page-24" href="#page-24" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


     &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb


   The authorization server MUST:

   o  require client authentication for private clients or for any
      client issued client credentials (or with other authentication
      requirements),
   o  authenticate the client if client authentication is included and
      ensure the authorization code was issued to the authenticated
      client,
   o  verify that the authorization code is valid, and
   o  ensure that the "redirect_uri" parameter is present if the
      "redirect_uri" parameter was included in the initial authorization
      request described in <a href="#section-4.1.1">Section 4.1.1</a>, and that their values are
      identical.

<span class="h4"><a class="selflink" name="section-4.1.4" href="#section-4.1.4">4.1.4</a>.  Access Token Response</span>

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in <a href="#section-5.1">Section 5.1</a>.  If the request client
   authentication failed or is invalid, the authorization server returns
   an error response as described in <a href="#section-5.2">Section 5.2</a>.

   An example successful response:


     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"example",
       "expires_in":3600,
       "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
       "example_parameter":"example_value"
     }


<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Implicit Grant</span>

   The implicit grant type is used to obtain access tokens (it does not
   support the issuance of refresh tokens) and is optimized for public
   clients known to operate a particular redirection URI.  These clients
   are typically implemented in a browser using a scripting language



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 24]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-25" id="page-25" href="#page-25" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   such as JavaScript.

   As a redirection-based flow, the client must be capable of
   interacting with the resource owner's user-agent (typically a web
   browser) and capable of receiving incoming requests (via redirection)
   from the authorization server.

   Unlike the authorization code grant type in which the client makes
   separate requests for authorization and access token, the client
   receives the access token as the result of the authorization request.

   The implicit grant type does not include client authentication, and
   relies on the presence of the resource owner and the registration of
   the redirection URI.  Because the access token is encoded into the
   redirection URI, it may be exposed to the resource owner and other
   applications residing on its device.



































<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 25]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-26" id="page-26" href="#page-26" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


     +----------+
     | Resource |
     |  Owner   |
     |          |
     +----------+
          ^
          |
         (B)
     +----|-----+          Client Identifier     +---------------+
     |         -+----(A)-- &amp; Redirection URI ---&gt;|               |
     |  User-   |                                | Authorization |
     |  Agent  -|----(B)-- User authenticates --&gt;|     Server    |
     |          |                                |               |
     |          |&lt;---(C)--- Redirection URI ----&lt;|               |
     |          |          with Access Token     +---------------+
     |          |            in Fragment
     |          |                                +---------------+
     |          |----(D)--- Redirection URI ----&gt;|   Web-Hosted  |
     |          |          without Fragment      |     Client    |
     |          |                                |    Resource   |
     |     (F)  |&lt;---(E)------- Script ---------&lt;|               |
     |          |                                +---------------+
     +-|--------+
       |    |
      (A)  (G) Access Token
       |    |
       ^    v
     +---------+
     |         |
     |  Client |
     |         |
     +---------+


                       Figure 4: Implicit Grant Flow

   The flow illustrated in Figure 4 includes the following steps:

   (A)  The client initiates the flow by directing the resource owner's
        user-agent to the authorization endpoint.  The client includes
        its client identifier, requested scope, local state, and a
        redirection URI to which the authorization server will send the
        user-agent back once access is granted (or denied).
   (B)  The authorization server authenticates the resource owner (via
        the user-agent) and establishes whether the resource owner
        grants or denies the client's access request.





<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 26]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-27" id="page-27" href="#page-27" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   (C)  Assuming the resource owner grants access, the authorization
        server redirects the user-agent back to the client using the
        redirection URI provided earlier.  The redirection URI includes
        the access token in the URI fragment.
   (D)  The user-agent follows the redirection instructions by making a
        request to the web-hosted client resource (which does not
        include the fragment).  The user-agent retains the fragment
        information locally.
   (E)  The web-hosted client resource returns a web page (typically an
        HTML document with an embedded script) capable of accessing the
        full redirection URI including the fragment retained by the
        user-agent, and extracting the access token (and other
        parameters) contained in the fragment.
   (F)  The user-agent executes the script provided by the web-hosted
        client resource locally, which extracts the access token and
        passes it to the client.

<span class="h4"><a class="selflink" name="section-4.2.1" href="#section-4.2.1">4.2.1</a>.  Authorization Request</span>

   The client constructs the request URI by adding the following
   parameters to the query component of the authorization endpoint URI
   using the "application/x-www-form-urlencoded" format:

   response_type
         REQUIRED.  Value MUST be set to "token".
   client_id
         REQUIRED.  The client identifier as described in <a href="#section-2.3">Section 2.3</a>.
   redirect_uri
         OPTIONAL, as described in <a href="#section-3.1.2">Section 3.1.2</a>.
   scope
         OPTIONAL.  The scope of the access request expressed as a list
         of space-delimited, case sensitive strings.  The value is
         defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.
   state
         OPTIONAL.  An opaque value used by the client to maintain state
         between the request and callback.  The authorization server
         includes this value when redirecting the user-agent back to the
         client.

   The client directs the resource owner to the constructed URI using an
   HTTP redirection response, or by other means available to it via the
   user-agent.






<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 27]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-28" id="page-28" href="#page-28" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   For example, the client directs the user-agent to make the following
   HTTP request using transport-layer security (extra line breaks are
   for display purposes only):


    GET /authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;state=xyz
        &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
    Host: server.example.com


   The authorization server validates the request to ensure all required
   parameters are present and valid.  The authorization server MUST
   verify that the redirection URI to which it will redirect the access
   token matches a redirection URI registered by the client as described
   in <a href="#section-3.1.2">Section 3.1.2</a>.

   If the request is valid, the authorization server authenticates the
   resource owner and obtains an authorization decision (by asking the
   resource owner or by establishing approval via other means).

   When a decision is established, the authorization server directs the
   user-agent to the provided client redirection URI using an HTTP
   redirection response, or by other means available to it via the user-
   agent.

<span class="h4"><a class="selflink" name="section-4.2.2" href="#section-4.2.2">4.2.2</a>.  Access Token Response</span>

   If the resource owner grants the access request, the authorization
   server issues an access token and delivers it to the client by adding
   the following parameters to the fragment component of the redirection
   URI using the "application/x-www-form-urlencoded" format:

   access_token
         REQUIRED.  The access token issued by the authorization server.
   token_type
         REQUIRED.  The type of the token issued as described in
         <a href="#section-7.1">Section 7.1</a>.  Value is case insensitive.
   expires_in
         OPTIONAL.  The lifetime in seconds of the access token.  For
         example, the value "3600" denotes that the access token will
         expire in one hour from the time the response was generated.
   scope
         OPTIONAL.  The scope of the access token expressed as a list of
         space-delimited, case sensitive strings.  The value is defined
         by the authorization server.  If the value contains multiple
         space-delimited strings, their order does not matter, and each
         string adds an additional access range to the requested scope.
         The authorization server SHOULD include the parameter if the



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 28]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-29" id="page-29" href="#page-29" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


         access token scope is different from the one requested by the
         client.
   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set to the exact value received from
         the client.

   For example, the authorization server redirects the user-agent by
   sending the following HTTP response (URI extra line breaks are for
   display purposes only):


     HTTP/1.1 302 Found
     Location: http://example.com/rd#access_token=2YotnFZFEjr1zCsicMWpAA
               &amp;state=xyz&amp;token_type=example&amp;expires_in=3600


   Developers should note that some HTTP client implementations do not
   support the inclusion of a fragment component in the HTTP "Location"
   response header field.  Such client will require using other methods
   for redirecting the client than a 3xx redirection response.  For
   example, returning an HTML page which includes a 'continue' button
   with an action linked to the redirection URI.

   The client SHOULD ignore unrecognized response parameters.  The
   access token string size is left undefined by this specification.
   The client should avoid making assumptions about value sizes.  The
   authorization server should document the size of any value it issues.

<span class="h5"><a class="selflink" name="section-4.2.2.1" href="#section-4.2.2.1">4.2.2.1</a>.  Error Response</span>

   If the request fails due to a missing, invalid, or mismatching
   redirection URI, or if the client identifier provided is invalid, the
   authorization server SHOULD inform the resource owner of the error,
   and MUST NOT automatically redirect the user-agent to the invalid
   redirection URI.

   If the resource owner denies the access request or if the request
   fails for reasons other than a missing or invalid redirection URI,
   the authorization server informs the client by adding the following
   parameters to the fragment component of the redirection URI using the
   "application/x-www-form-urlencoded" format:

   error
         REQUIRED.  A single error code from the following:






<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 29]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-30" id="page-30" href="#page-30" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


         invalid_request
               The request is missing a required parameter, includes an
               unsupported parameter or parameter value, or is otherwise
               malformed.
         unauthorized_client
               The client is not authorized to request an access token
               using this method.
         access_denied
               The resource owner or authorization server denied the
               request.
         unsupported_response_type
               The authorization server does not support obtaining an
               access token using this method.
         invalid_scope
               The requested scope is invalid, unknown, or malformed.
         server_error
               The authorization server encountered an unexpected
               condition which prevented it from fulfilling the request.
         temporarily_unavailable
               The authorization server is currently unable to handle
               the request due to a temporary overloading or maintenance
               of the server.
   error_description
         OPTIONAL.  A human-readable UTF-8 encoded text providing
         additional information, used to assist the client developer in
         understanding the error that occurred.
   error_uri
         OPTIONAL.  A URI identifying a human-readable web page with
         information about the error, used to provide the client
         developer with additional information about the error.
   state
         REQUIRED if a valid "state" parameter was present in the client
         authorization request.  Set to the exact value received from
         the client.

   For example, the authorization server redirects the user-agent by
   sending the following HTTP response:


   HTTP/1.1 302 Found
   Location: https://client.example.com/cb#error=access_denied&amp;state=xyz


<span class="h3"><a class="selflink" name="section-4.3" href="#section-4.3">4.3</a>.  Resource Owner Password Credentials</span>

   The resource owner password credentials grant type is suitable in
   cases where the resource owner has a trust relationship with the
   client, such as its device operating system or a highly privileged



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 30]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-31" id="page-31" href="#page-31" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   application.  The authorization server should take special care when
   enabling the grant type, and only when other flows are not viable.

   The grant type is suitable for clients capable of obtaining the
   resource owner credentials (username and password, typically using an
   interactive form).  It is also used to migrate existing clients using
   direct authentication schemes such as HTTP Basic or Digest
   authentication to OAuth by converting the stored credentials to an
   access token.


     +----------+
     | Resource |
     |  Owner   |
     |          |
     +----------+
          v
          |    Resource Owner
         (A) Password Credentials
          |
          v
     +---------+                                  +---------------+
     |         |&gt;--(B)---- Resource Owner -------&gt;|               |
     |         |         Password Credentials     | Authorization |
     | Client  |                                  |     Server    |
     |         |&lt;--(C)---- Access Token ---------&lt;|               |
     |         |    (w/ Optional Refresh Token)   |               |
     +---------+                                  +---------------+


            Figure 5: Resource Owner Password Credentials Flow

   The flow illustrated in Figure 5 includes the following steps:

   (A)  The resource owner provides the client with its username and
        password.
   (B)  The client requests an access token from the authorization
        server's token endpoint by including the credentials received
        from the resource owner.  When making the request, the client
        authenticates with the authorization server.
   (C)  The authorization server authenticates the client and validates
        the resource owner credentials, and if valid issues an access
        token.

<span class="h4"><a class="selflink" name="section-4.3.1" href="#section-4.3.1">4.3.1</a>.  Authorization Request and Response</span>

   The method through which the client obtains the resource owner
   credentials is beyond the scope of this specification.  The client



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 31]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-32" id="page-32" href="#page-32" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   MUST discard the credentials once an access token has been obtained.

<span class="h4"><a class="selflink" name="section-4.3.2" href="#section-4.3.2">4.3.2</a>.  Access Token Request</span>

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format in the HTTP request entity-body:

   grant_type
         REQUIRED.  Value MUST be set to "password".
   username
         REQUIRED.  The resource owner username, encoded as UTF-8.
   password
         REQUIRED.  The resource owner password, encoded as UTF-8.
   scope
         OPTIONAL.  The scope of the access request expressed as a list
         of space-delimited, case sensitive strings.  The value is
         defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.

   If the client type is private or was issued client credentials (or
   assigned other authentication requirements), the client MUST
   authenticate with the authorization server as described in
   <a href="#section-3.2.1">Section 3.2.1</a>.

   For example, the client makes the following HTTP request using
   transport-layer security (extra line breaks are for display purposes
   only):


     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded;charset=UTF-8

     grant_type=password&amp;username=johndoe&amp;password=A3ddj3w


   The authorization server MUST:

   o  require client authentication for private clients or for any
      client issued client credentials (or with other authentication
      requirements),
   o  authenticate the client if client authentication is included, and





<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 32]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-33" id="page-33" href="#page-33" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   o  validate the resource owner password credentials.

   Since this access token request utilizes the resource owner's
   password, the authorization server MUST protect the endpoint against
   brute force attacks.

<span class="h4"><a class="selflink" name="section-4.3.3" href="#section-4.3.3">4.3.3</a>.  Access Token Response</span>

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in <a href="#section-5.1">Section 5.1</a>.  If the request failed client
   authentication or is invalid, the authorization server returns an
   error response as described in <a href="#section-5.2">Section 5.2</a>.

   An example successful response:


     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"example",
       "expires_in":3600,
       "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
       "example_parameter":"example_value"
     }


<span class="h3"><a class="selflink" name="section-4.4" href="#section-4.4">4.4</a>.  Client Credentials</span>

   The client can request an access token using only its client
   credentials (or other supported means of authentication) when the
   client is requesting access to the protected resources under its
   control, or those of another resource owner which has been previously
   arranged with the authorization server (the method of which is beyond
   the scope of this specification).

   The client credentials grant type MUST only be used by private
   clients.









<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 33]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-34" id="page-34" href="#page-34" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


     +---------+                                  +---------------+
     |         |                                  |               |
     |         |&gt;--(A)- Client Authentication ---&gt;| Authorization |
     | Client  |                                  |     Server    |
     |         |&lt;--(B)---- Access Token ---------&lt;|               |
     |         |                                  |               |
     +---------+                                  +---------------+


                     Figure 6: Client Credentials Flow

   The flow illustrated in Figure 6 includes the following steps:

   (A)  The client authenticates with the authorization server and
        requests an access token from the token endpoint.
   (B)  The authorization server authenticates the client, and if valid
        issues an access token.

<span class="h4"><a class="selflink" name="section-4.4.1" href="#section-4.4.1">4.4.1</a>.  Authorization Request and Response</span>

   Since the client authentication is used as the authorization grant,
   no additional authorization request is needed.

<span class="h4"><a class="selflink" name="section-4.4.2" href="#section-4.4.2">4.4.2</a>.  Access Token Request</span>

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format in the HTTP request entity-body:

   grant_type
         REQUIRED.  Value MUST be set to "client_credentials".
   scope
         OPTIONAL.  The scope of the access request expressed as a list
         of space-delimited, case sensitive strings.  The value is
         defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.

   The client MUST authenticate with the authorization server as
   described in <a href="#section-3.2.1">Section 3.2.1</a>.










<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 34]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-35" id="page-35" href="#page-35" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   For example, the client makes the following HTTP request using
   transport-layer security (extra line breaks are for display purposes
   only):


     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded;charset=UTF-8

     grant_type=client_credentials


   The authorization server MUST authenticate the client.

<span class="h4"><a class="selflink" name="section-4.4.3" href="#section-4.4.3">4.4.3</a>.  Access Token Response</span>

   If the access token request is valid and authorized, the
   authorization server issues an access token as described in
   <a href="#section-5.1">Section 5.1</a>.  A refresh token SHOULD NOT be included.  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in <a href="#section-5.2">Section 5.2</a>.

   An example successful response:


     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"example",
       "expires_in":3600,
       "example_parameter":"example_value"
     }


<span class="h3"><a class="selflink" name="section-4.5" href="#section-4.5">4.5</a>.  Extensions</span>

   The client uses an extension grant type by specifying the grant type
   using an absolute URI (defined by the authorization server) as the
   value of the "grant_type" parameter of the token endpoint, and by
   adding any additional parameters necessary.






<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 35]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-36" id="page-36" href="#page-36" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   For example, to request an access token using a SAML 2.0 assertion
   grant type as defined by [<a href="#ref-I-D.ietf-oauth-saml2-bearer">I-D.ietf-oauth-saml2-bearer</a>], the client
   makes the following HTTP request using transport-layer security (line
   breaks are for display purposes only):


     POST /token HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded;charset=UTF-8

     grant_type=http%3A%2F%2Foauth.net%2Fgrant_type%2Fassertion%2F
     saml%2F2.0%2Fbearer&amp;assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ
     [...omitted for brevity...]V0aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-


   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in <a href="#section-5.1">Section 5.1</a>.  If the request failed client
   authentication or is invalid, the authorization server returns an
   error response as described in <a href="#section-5.2">Section 5.2</a>.


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Issuing an Access Token</span>

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in <a href="#section-5.1">Section 5.1</a>.  If the request failed client
   authentication or is invalid, the authorization server returns an
   error response as described in <a href="#section-5.2">Section 5.2</a>.

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  Successful Response</span>

   The authorization server issues an access token and optional refresh
   token, and constructs the response by adding the following parameters
   to the entity body of the HTTP response with a 200 (OK) status code:

   access_token
         REQUIRED.  The access token issued by the authorization server.
   token_type
         REQUIRED.  The type of the token issued as described in
         <a href="#section-7.1">Section 7.1</a>.  Value is case insensitive.
   expires_in
         OPTIONAL.  The lifetime in seconds of the access token.  For
         example, the value "3600" denotes that the access token will
         expire in one hour from the time the response was generated.






<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 36]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-37" id="page-37" href="#page-37" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   refresh_token
         OPTIONAL.  The refresh token which can be used to obtain new
         access tokens using the same authorization grant as described
         in <a href="#section-6">Section 6</a>.
   scope
         OPTIONAL.  The scope of the access token expressed as a list of
         space-delimited, case sensitive strings.  The value is defined
         by the authorization server.  If the value contains multiple
         space-delimited strings, their order does not matter, and each
         string adds an additional access range to the requested scope.
         The authorization server SHOULD include the parameter if the
         access token scope is different from the one requested by the
         client.

   The parameters are included in the entity body of the HTTP response
   using the "application/json" media type as defined by [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>].  The
   parameters are serialized into a JSON structure by adding each
   parameter at the highest structure level.  Parameter names and string
   values are included as JSON strings.  Numerical values are included
   as JSON numbers.

   The authorization server MUST include the HTTP "Cache-Control"
   response header field [<a href="./rfc2616" title="&quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;">RFC2616</a>] with a value of "no-store" in any
   response containing tokens, credentials, or other sensitive
   information, as well as the "Pragma" response header field [<a href="./rfc2616" title="&quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;">RFC2616</a>]
   with a value of "no-cache".

   For example:


     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"example",
       "expires_in":3600,
       "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
       "example_parameter":"example_value"
     }


   The client SHOULD ignore unrecognized response parameters.  The sizes
   of tokens and other values received from the authorization server are
   left undefined.  The client should avoid making assumptions about
   value sizes.  The authorization server should document the size of



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 37]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-38" id="page-38" href="#page-38" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   any value it issues.

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  Error Response</span>

   The authorization server responds with an HTTP 400 (Bad Request)
   status code and includes the following parameters with the response:

   error
         REQUIRED.  A single error code from the following:
         invalid_request
               The request is missing a required parameter, includes an
               unsupported parameter or parameter value, repeats a
               parameter, includes multiple credentials, utilizes more
               than one mechanism for authenticating the client, or is
               otherwise malformed.
         invalid_client
               Client authentication failed (e.g. unknown client, no
               client authentication included, multiple client
               authentications included, or unsupported authentication
               method).  The authorization server MAY return an HTTP 401
               (Unauthorized) status code to indicate which HTTP
               authentication schemes are supported.  If the client
               attempted to authenticate via the "Authorization" request
               header field, the authorization server MUST respond with
               an HTTP 401 (Unauthorized) status code, and include the
               "WWW-Authenticate" response header field matching the
               authentication scheme used by the client.
         invalid_grant
               The provided authorization grant is invalid, expired,
               revoked, does not match the redirection URI used in the
               authorization request, or was issued to another client.
         unauthorized_client
               The authenticated client is not authorized to use this
               authorization grant type.
         unsupported_grant_type
               The authorization grant type is not supported by the
               authorization server.
         invalid_scope
               The requested scope is invalid, unknown, malformed, or
               exceeds the scope granted by the resource owner.
   error_description
         OPTIONAL.  A human-readable UTF-8 encoded text providing
         additional information, used to assist the client developer in
         understanding the error that occurred.







<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 38]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-39" id="page-39" href="#page-39" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   error_uri
         OPTIONAL.  A URI identifying a human-readable web page with
         information about the error, used to provide the client
         developer with additional information about the error.

   The parameters are included in the entity body of the HTTP response
   using the "application/json" media type as defined by [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>].  The
   parameters are serialized into a JSON structure by adding each
   parameter at the highest structure level.  Parameter names and string
   values are included as JSON strings.  Numerical values are included
   as JSON numbers.

   For example:


     HTTP/1.1 400 Bad Request
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "error":"invalid_request"
     }



<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Refreshing an Access Token</span>

   If the authorization server issued a refresh token to the client, the
   client makes a refresh request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format in the HTTP request entity-body:

   grant_type
         REQUIRED.  Value MUST be set to "refresh_token".
   refresh_token
         REQUIRED.  The refresh token issued to the client.
   scope
         OPTIONAL.  The scope of the access request expressed as a list
         of space-delimited, case sensitive strings.  The value is
         defined by the authorization server.  If the value contains
         multiple space-delimited strings, their order does not matter,
         and each string adds an additional access range to the
         requested scope.  The requested scope MUST be equal or lesser
         than the scope originally granted by the resource owner, and if
         omitted is treated as equal to the scope originally granted by
         the resource owner.




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 39]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-40" id="page-40" href="#page-40" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   Because refresh tokens are typically long-lasting credentials used to
   request additional access tokens, the refresh token is bound to the
   client it was issued.  If the client type is private or was issued
   client credentials (or assigned other authentication requirements),
   the client MUST authenticate with the authorization server as
   described in <a href="#section-3.2.1">Section 3.2.1</a>.

   For example, the client makes the following HTTP request using
   transport-layer security (extra line breaks are for display purposes
   only):


     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded;charset=UTF-8

     grant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA


   The authorization server MUST:

   o  require client authentication for private clients or for any
      client issued client credentials (or with other authentication
      requirements),
   o  authenticate the client if client authentication is included and
      ensure the refresh token was issued to the authenticated client,
   o  validate the refresh token, and
   o  verify that the resource owner's authorization is still valid.

   If valid and authorized, the authorization server issues an access
   token as described in <a href="#section-5.1">Section 5.1</a>.  If the request failed
   verification or is invalid, the authorization server returns an error
   response as described in <a href="#section-5.2">Section 5.2</a>.

   The authorization server MAY issue a new refresh token, in which case
   the client MUST discard the old refresh token and replace it with the
   new refresh token.  The authorization server MAY revoke the old
   refresh token after issuing a new refresh token to the client.  If a
   new refresh token is issued, its scope MUST be identical to that of
   the refresh token included in the request.


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Accessing Protected Resources</span>

   The client accesses protected resources by presenting the access
   token to the resource server.  The resource server MUST validate the
   access token and ensure it has not expired and that its scope covers



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 40]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-41" id="page-41" href="#page-41" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   the requested resource.  The methods used by the resource server to
   validate the access token (as well as any error responses) are beyond
   the scope of this specification, but generally involve an interaction
   or coordination between the resource server and the authorization
   server.

   The method in which the client utilized the access token to
   authenticate with the resource server depends on the type of access
   token issued by the authorization server.  Typically, it involves
   using the HTTP "Authorization" request header field [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>] with an
   authentication scheme defined by the access token type specification.

<span class="h3"><a class="selflink" name="section-7.1" href="#section-7.1">7.1</a>.  Access Token Types</span>

   The access token type provides the client with the information
   required to successfully utilize the access token to make a protected
   resource request (along with type-specific attributes).  The client
   MUST NOT use an access token if it does not understand or does not
   trust the token type.

   For example, the "bearer" token type defined in
   [<a href="#ref-I-D.ietf-oauth-v2-bearer">I-D.ietf-oauth-v2-bearer</a>] is utilized by simply including the access
   token string in the request:


     GET /resource/1 HTTP/1.1
     Host: example.com
     Authorization: Bearer 7Fjfp0ZBr1KtDRbnfVdmIw


   while the "mac" token type defined in [<a href="#ref-I-D.ietf-oauth-v2-http-mac">I-D.ietf-oauth-v2-http-mac</a>] is
   utilized by issuing a MAC key together with the access token which is
   used to sign certain components of the HTTP requests:


     GET /resource/1 HTTP/1.1
     Host: example.com
     Authorization: MAC id="h480djs93hd8",
                        nonce="274312:dj83hs9s",
                        mac="kDZvddkndxvhGRXZhvuDjEWhGeE="


   The above examples are provided for illustration purposes only.
   Developers are advised to consult the [<a href="#ref-I-D.ietf-oauth-v2-bearer">I-D.ietf-oauth-v2-bearer</a>] and
   [<a href="#ref-I-D.ietf-oauth-v2-http-mac">I-D.ietf-oauth-v2-http-mac</a>] specifications before use.

   Each access token type definition specifies the additional attributes
   (if any) sent to the client together with the "access_token" response



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 41]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-42" id="page-42" href="#page-42" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   parameter.  It also defines the HTTP authentication method used to
   include the access token when making a protected resource request.


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  Extensibility</span>

<span class="h3"><a class="selflink" name="section-8.1" href="#section-8.1">8.1</a>.  Defining Access Token Types</span>

   Access token types can be defined in one of two ways: registered in
   the access token type registry (following the procedures in
   <a href="#section-11.1">Section 11.1</a>), or use a unique absolute URI as its name.

   Types utilizing a URI name SHOULD be limited to vendor-specific
   implementations that are not commonly applicable, and are specific to
   the implementation details of the resource server where they are
   used.

   All other types MUST be registered.  Type names MUST conform to the
   type-name ABNF.  If the type definition includes a new HTTP
   authentication scheme, the type name SHOULD be identical to the HTTP
   authentication scheme name (as defined by [<a href="./rfc2617" title="&quot;HTTP Authentication: Basic and Digest Access Authentication&quot;">RFC2617</a>]).


     type-name  = 1*name-char
     name-char   = "-" / "." / "_" / DIGIT / ALPHA


<span class="h3"><a class="selflink" name="section-8.2" href="#section-8.2">8.2</a>.  Defining New Endpoint Parameters</span>

   New request or response parameters for use with the authorization
   endpoint or the token endpoint are defined and registered in the
   parameters registry following the procedure in <a href="#section-11.2">Section 11.2</a>.

   Parameter names MUST conform to the param-name ABNF and parameter
   values syntax MUST be well-defined (e.g., using ABNF, or a reference
   to the syntax of an existing parameter).


     param-name  = 1*name-char
     name-char   = "-" / "." / "_" / DIGIT / ALPHA


   Unregistered vendor-specific parameter extensions that are not
   commonly applicable, and are specific to the implementation details
   of the authorization server where they are used SHOULD utilize a
   vendor-specific prefix that is not likely to conflict with other
   registered values (e.g. begin with 'companyname_').




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 42]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-43" id="page-43" href="#page-43" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h3"><a class="selflink" name="section-8.3" href="#section-8.3">8.3</a>.  Defining New Authorization Grant Types</span>

   New authorization grant types can be defined by assigning them a
   unique absolute URI for use with the "grant_type" parameter.  If the
   extension grant type requires additional token endpoint parameters,
   they MUST be registered in the OAuth parameters registry as described
   by <a href="#section-11.2">Section 11.2</a>.

<span class="h3"><a class="selflink" name="section-8.4" href="#section-8.4">8.4</a>.  Defining New Authorization Endpoint Response Types</span>

   [[ Pending consensus ]]

   New response types for use with the authorization endpoint are
   defined and registered in the authorization endpoint response type
   registry following the procedure in <a href="#section-11.3">Section 11.3</a>.  Response type
   names MUST conform to the response-type ABNF.


     response-type  = response-name *( "+" response-name )
     response-name  = 1*response-char
     response-char  = "_" / DIGIT / ALPHA


   The "+" character is reserved for defining composite response types
   made up of two or more existing registered response types.  Only one
   response type of each combination may be registered and used for
   making requests.  Composite response types are treated and compared
   in the same as manner as non-composite response types.  The "+"
   notation is meant only to improve human readability and is not used
   for machine parsing.

   For example, an extension can define and register the "token+code"
   response type.  However, once registered, the same combination cannot
   be registered as "code+token", or used to make an authorization
   request.

<span class="h3"><a class="selflink" name="section-8.5" href="#section-8.5">8.5</a>.  Defining Additional Error Codes</span>

   In cases where protocol extensions (i.e. access token types,
   extension parameters, or extension grant types) require additional
   error codes to be used with the authorization code grant error
   response (<a href="#section-4.1.2.1">Section 4.1.2.1</a>), the implicit grant error response
   (<a href="#section-4.2.2.1">Section 4.2.2.1</a>), or the token error response (<a href="#section-5.2">Section 5.2</a>), such
   error codes MAY be defined.

   Extension error codes MUST be registered (following the procedures in
   <a href="#section-11.4">Section 11.4</a>) if the extension they are used in conjunction with is a
   registered access token type, a registered endpoint parameter, or an



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 43]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-44" id="page-44" href="#page-44" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   extension grant type.  Error codes used with unregistered extensions
   MAY be registered.

   Error codes MUST conform to the error-code ABNF, and SHOULD be
   prefixed by an identifying name when possible.  For example, an error
   identifying an invalid value set to the extension parameter "example"
   should be named "example_invalid".


     error-code   = ALPHA *error-char
     error-char   = "-" / "." / "_" / DIGIT / ALPHA



<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  Native Applications</span>

   Native applications are clients installed and executed on the
   resource owner's device (i.e. desktop application, native mobile
   application).  Native applications may require special consideration
   related to security, platform capabilities, and overall end-user
   experience.

   The authorization endpoint requires interaction between the client
   and the resource owner's user-agent.  Native applications can invoke
   an external user-agent or embed a user-agent within the application.
   For example:

   o  External user-agent - the native application can capture the
      response from the authorization server using a redirection URI
      with an scheme registered with the operating system to invoke the
      client as the handler, manual copy-and-paste of the credentials,
      running a local web server, installing a user-agent extension, or
      by providing a redirection URI identifying a server-hosted
      resource under the client's control, which in turn makes the
      response available to the native application.
   o  Embedded user-agent - the native application obtains the response
      by directly communicating with the embedded user-agent by
      monitoring state changes emitted during the resource load, or
      accessing the user-agent's cookies storage.

   When choosing between an external or embedded user-agent, developers
   should consider:

   o  External user-agents may improve completion rate as the resource
      owner may already have an active session with the authorization
      server removing the need to re-authenticate.  It provides a
      familiar end-user experience and functionality.  The resource
      owner may also rely on user-agent features or extensions to assist



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 44]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-45" id="page-45" href="#page-45" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


      with authentication (e.g. password manager, 2-factor device
      reader).
   o  Embedded user-agents may offer an improved usability, as they
      remove the need to switch context and open new windows.
   o  Embedded user-agents pose a security challenge because resource
      owners are authenticating in an unidentified window without access
      to the visual protections found in most external user-agents.
      Embedded user-agents educate end-user to trust unidentified
      requests for authentication (making phishing attacks easier to
      execute).

   When choosing between the implicit grant type and the authorization
   code grant type, the following should be considered:

   o  Native applications that use the authorization code grant type
      SHOULD do so without using client credentials, due to the native
      application's inability to keep credentials confidential.
   o  When using the implicit grant type flow a refresh token is not
      returned.


<span class="h2"><a class="selflink" name="section-10" href="#section-10">10</a>.  Security Considerations</span>

   As a flexible and extensible framework, OAuth's security
   considerations depend on many factors.  The following sections
   provide implementers with security guidelines focused on three common
   client types:

   Web Application
      A web application is a client running on a web server.  Resource
      owners access the client via an HTML user interface rendered in a
      user-agent on the resource-owner's device.  The client credentials
      as well as any access token issued to the client are stored on the
      web server and are not exposed to or accessible by the resource
      owner.
   User-Agent-based Application
      A user-agent-based application is a client in which the client
      code is downloaded from a web server and executes within a user-
      agent on the resource owner's device.  Protocol data and
      credentials are easily accessible (and often visible) to the
      resource owner.  Since such applications reside within the user-
      agent, they can make seamless use of the user-agent capabilities
      when requesting authorization.
   Native Application
      A native application is a client installed and executed on the
      resource owner's device.  Protocol data and credentials are
      accessible to the resource owner.  It is assumed that any client
      authentication credentials included in the application can be



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 45]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-46" id="page-46" href="#page-46" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


      extracted, and furthermore that rotation of the client
      authentication credentials is impractical.  On the other hand,
      dynamically issued credentials such access tokens or refresh
      tokens, can receive an acceptable level of protection.  At a
      minimum, these credentials are protected from hostile servers
      which the application may interact with.  On some platform these
      credentials might be protected from other applications residing on
      the same device.

   A comprehensive OAuth security model and analysis, as well as
   background for the protocol design is provided by
   [<a href="#ref-I-D.lodderstedt-oauth-security">I-D.lodderstedt-oauth-security</a>].

<span class="h3"><a class="selflink" name="section-10.1" href="#section-10.1">10.1</a>.  Client Authentication</span>

   The authorization server establishes client credentials with web
   application clients for the purpose of client authentication.  The
   authorization server is encouraged to consider stronger client
   authentication means than a client password.  Web application clients
   MUST ensure confidentiality of client passwords and other client
   credentials.

   The authorization server MUST NOT issue client passwords or other
   client credentials to native application or user-agent-based
   application clients for the purpose of client authentication.  The
   authorization server MAY issue a client password or other credentials
   for a specific installation of a native application client on a
   specific device.

<span class="h3"><a class="selflink" name="section-10.2" href="#section-10.2">10.2</a>.  Client Impersonation</span>

   A malicious client can impersonate another client and obtain access
   to protected resources, if the impersonated client fails to, or is
   unable to, keep is client credentials confidential.

   The authorization server MUST authenticate the client whenever
   possible.  If the authorization server cannot authenticate the client
   due to the client nature, the authorization server MUST require the
   registration of any redirection URI used for receiving authorization,
   and SHOULD utilize other means to protect resource owners from such
   malicious clients.  For example, engage the resource owner to assist
   in identifying the client and its origin.

   The authorization server SHOULD enforce explicit resource owner
   authentication and provide the resource owner with information about
   the client and the requested authorization scope and lifetime.  It is
   up to the resource owner to review the information in the context of
   the current client, and authorize the request.



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 46]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-47" id="page-47" href="#page-47" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   The authorization server SHOULD NOT process repeated authorization
   requests automatically (without active resource owner interaction)
   without authenticating the client or relying on other measures to
   ensure the repeated request comes from an authentic client and not an
   impersonator.

<span class="h3"><a class="selflink" name="section-10.3" href="#section-10.3">10.3</a>.  Access Tokens</span>

   Access token (as well as any type-specific attributes) MUST be kept
   confidential in transit and storage, and only shared among the
   authorization server, the resource servers the access token is valid
   for, and the client to whom the access token is issued.

   When using the implicit grant type, the access token is transmitted
   in the URI fragment, which can expose it to unauthorized parties.

   The authorization server MUST ensure that access tokens cannot be
   generated, modified, or guessed to produce valid access tokens.

   The client SHOULD request access tokens with the minimal scope and
   lifetime necessary.  The authorization server SHOULD take the client
   identity into account when choosing how to honor the requested scope
   and lifetime, and MAY issue an access token with a less rights than
   requested.

<span class="h3"><a class="selflink" name="section-10.4" href="#section-10.4">10.4</a>.  Refresh Tokens</span>

   Authorization servers MAY issue refresh tokens to web application
   clients and native application clients.

   Refresh tokens MUST be kept confidential in transit and storage, and
   shared only among the authorization server and the client to whom the
   refresh tokens were issued.  The authorization server MUST maintain
   the binding between a refresh token and the client to whom it was
   issued.

   The authorization server MUST verify the binding between the refresh
   token and client identity whenever the client identity can be
   authenticated.  When client authentication is not possible, the
   authorization server SHOULD deploy other means to detect refresh
   token abuse [[ add example ]].

   The authorization server MUST ensure that refresh tokens cannot be
   generated, modified, or guessed to produce valid refresh tokens.







<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 47]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-48" id="page-48" href="#page-48" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h3"><a class="selflink" name="section-10.5" href="#section-10.5">10.5</a>.  Authorization Codes</span>

   The transmission of authorization codes SHOULD be made over a secure
   channel, and the client SHOULD implement TLS for use with its
   redirection URI if the URI identifies a network resource.  Effort
   should be made to keep authorization codes confidential.  Since
   authorization codes are transmitted via user-agent redirections, they
   could potentially be disclosed through user-agent history and HTTP
   referrer headers.

   Authorization codes operate as plaintext bearer credentials, used to
   verify that the resource owner who granted authorization at the
   authorization server, is the same resource owner returning to the
   client to complete the process.  Therefore, if the client relies on
   the authorization code for its own resource owner authentication, the
   client redirection endpoint MUST require TLS.

   Authorization codes MUST be short lived and single use.  If the
   authorization server observes multiple attempts to exchange an
   authorization code for an access token, the authorization server
   SHOULD attempt to revoke all access tokens already granted based on
   the compromised authorization code.

   If the client can be authenticated, the authorization servers MUST
   authenticate the client and ensure that the authorization code was
   issued to the same client.

<span class="h3"><a class="selflink" name="section-10.6" href="#section-10.6">10.6</a>.  Authorization Code Leakage</span>

   Session fixation attacks leverage the authorization code grant type,
   by tricking a resource owner to authorize access to a legitimate
   client, but using a client account under the control of the attacker.
   The only difference between a valid request and the attack request is
   in how the victim reached the authorization server to grant access.

   Once at the authorization server, the victim is prompted with a
   normal, valid request on behalf of a legitimate and familiar client.
   The attacker then uses the victim's authorization to gain access to
   the information authorized by the victim (via the client).

   In order to prevent such an attack, authorization servers MUST ensure
   that the redirection URI used to obtain the authorization code, is
   the same as the redirection URI provided when exchanging the
   authorization code for an access token.  The authorization server
   SHOULD require the client to register their redirection URI and if
   provided, MUST validate the redirection URI received in the
   authorization request against the registered value.




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 48]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-49" id="page-49" href="#page-49" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


<span class="h3"><a class="selflink" name="section-10.7" href="#section-10.7">10.7</a>.  Resource Owner Password Credentials</span>

   The resource owner password credentials grant type is often used for
   legacy or migration reasons.  It reduces the overall risk of storing
   username and password by the client, but does not eliminate the need
   to expose highly privileged credentials to the client.

   This grant type carries a higher risk than other grant types because
   it maintains the password anti-pattern this protocol seeks to avoid.
   The client could abuse the password or the password could
   unintentionally be disclosed to an attacker (e.g. via log files or
   other records kept by the client).

   Additionally, because the resource owner does not have control over
   the authorization process (the resource owner involvement ends when
   it hands over its credentials to the client), the client can obtain
   access tokens with a broader scope and longer lifetime than desired
   by the resource owner.  The authorization server SHOULD restrict the
   scope and lifetime of access tokens issued via this grant type.

   The authorization server and client SHOULD minimize use of this grant
   type and utilize other grant types whenever possible.

<span class="h3"><a class="selflink" name="section-10.8" href="#section-10.8">10.8</a>.  Request Confidentiality</span>

   Access tokens, refresh tokens, resource owner passwords, and client
   credentials MUST NOT be transmitted in the clear.  Authorization
   codes SHOULD NOT be transmitted in the clear.

<span class="h3"><a class="selflink" name="section-10.9" href="#section-10.9">10.9</a>.  Endpoints Authenticity</span>

   In order to prevent man-in-the-middle and phishing attacks, the
   authorization server MUST implement and require TLS with server
   authentication as defined by [<a href="./rfc2818" title="&quot;HTTP Over TLS&quot;">RFC2818</a>] for any request sent to the
   authorization and token endpoints.  The client MUST validate the
   authorization server's TLS certificate in accordance with its
   requirements for server identity authentication.

<span class="h3"><a class="selflink" name="section-10.10" href="#section-10.10">10.10</a>.  Credentials Guessing Attacks</span>

   The authorization server MUST prevent attackers from guessing access
   tokens, authorization codes, refresh tokens, resource owner
   passwords, and client credentials.

   When generating tokens and other credentials not intended for
   handling by end-users, the authorization server MUST use a reasonable
   level of entropy in order to mitigate the risk of guessing attacks.
   The authorization server MUST utilize other means to protect



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 49]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-50" id="page-50" href="#page-50" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   credentials intended for end-user usage.

<span class="h3"><a class="selflink" name="section-10.11" href="#section-10.11">10.11</a>.  Phishing Attacks</span>

   Wide deployment of this and similar protocols may cause end-users to
   become inured to the practice of being redirected to websites where
   they are asked to enter their passwords.  If end-users are not
   careful to verify the authenticity of these websites before entering
   their credentials, it will be possible for attackers to exploit this
   practice to steal resource owners' passwords.

   Service providers should attempt to educate end-users about the risks
   phishing attacks pose, and should provide mechanisms that make it
   easy for end-users to confirm the authenticity of their sites.
   Client developers should consider the security implications of how
   they interact with the user-agent (e.g., external, embedded), and the
   ability of the end-user to verify the authenticity of the
   authorization server.

   To reduce the risk of phishing attacks, the authorization servers
   MUST utilize TLS on every endpoint used for end-user interaction.

<span class="h3"><a class="selflink" name="section-10.12" href="#section-10.12">10.12</a>.  Cross-Site Request Forgery</span>

   Cross-site request forgery (CSRF) is a web-based attack whereby HTTP
   requests are transmitted from the user-agent of an end-user the
   server trusts or has authenticated.  CSRF attacks on the
   authorization endpoint can allow an attacker to obtain authorization
   without the consent of the resource owner.

   The "state" request parameter SHOULD be used to mitigate against CSRF
   attacks, particularly for login CSRF attacks.  CSRF attacks against
   the client's redirection URI allow an attacker to inject their own
   authorization code or access token, which can result in the client
   using an access token associated with the attacker's account rather
   than the victim's.  Depending on the nature of the client and the
   protected resources, this can have undesirable and damaging effects.

   It is strongly RECOMMENDED that the client includes the "state"
   request parameter with authorization requests to the authorization
   server.  The "state" request parameter MUST contain a non-guessable
   value, and the client MUST keep it in a location accessible only by
   the client or the user-agent (i.e., protected by same-origin policy).

   For example, using a DOM variable (protected by JavaScript or other
   DOM-binding language's enforcement of SOP [[ add reference ]]), HTTP
   cookie, or HTML5 client-side storage.  The authorization server
   includes the value of the "state" parameter when redirecting the



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 50]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-51" id="page-51" href="#page-51" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   user-agent back to the client which MUST then ensure the received
   value matches the stored value.

<span class="h3"><a class="selflink" name="section-10.13" href="#section-10.13">10.13</a>.  Clickjacking</span>

   [[ Rework to use specification terminology ]]

   Clickjacking is the process of tricking end-users into revealing
   confidential information or taking control of their device while
   clicking on seemingly innocuous web pages.  In more detail, a
   malicious site loads the target site in a transparent iframe overlaid
   on top of a set of dummy buttons which are carefully constructed to
   be placed directly under important buttons on the target site.  When
   a user clicks a visible button, they are actually clicking a button
   (such as an "Authorize" button) on the hidden page.

   To prevent clickjacking (and phishing attacks), native applications
   SHOULD use external browsers instead of embedding browsers in an
   iframe when requesting end-user authorization.  For newer browsers,
   avoidance of iframes can be enforced by the authorization server
   using the "x-frame-options" header [[ Add reference ]].  This header
   can have two values, "deny" and "sameorigin", which will block any
   framing or framing by sites with a different origin, respectively.
   For older browsers, javascript framebusting techniques can be used
   but may not be effective in all browsers.


<span class="h2"><a class="selflink" name="section-11" href="#section-11">11</a>.  IANA Considerations</span>

<span class="h3"><a class="selflink" name="section-11.1" href="#section-11.1">11.1</a>.  The OAuth Access Token Type Registry</span>

   This specification establishes the OAuth access token type registry.

   Access token types are registered on the advice of one or more
   Designated Experts (appointed by the IESG or their delegate), with a
   Specification Required (using terminology from [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>]).  However,
   to allow for the allocation of values prior to publication, the
   Designated Expert(s) may approve registration once they are satisfied
   that such a specification will be published.

   Registration requests should be sent to the [TBD]@ietf.org mailing
   list for review and comment, with an appropriate subject (e.g.,
   "Request for access toke type: example"). [[ Note to RFC-EDITOR: The
   name of the mailing list should be determined in consultation with
   the IESG and IANA.  Suggested name: oauth-ext-review. ]]

   Within at most 14 days of the request, the Designated Expert(s) will
   either approve or deny the registration request, communicating this



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 51]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-52" id="page-52" href="#page-52" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   decision to the review list and IANA.  Denials should include an
   explanation and, if applicable, suggestions as to how to make the
   request successful.

   Decisions (or lack thereof) made by the Designated Expert can be
   first appealed to Application Area Directors (contactable using
   app-ads@tools.ietf.org email address or directly by looking up their
   email addresses on <a href="http://www.iesg.org/">http://www.iesg.org/</a> website) and, if the
   appellant is not satisfied with the response, to the full IESG (using
   the iesg@iesg.org mailing list).

   IANA should only accept registry updates from the Designated
   Expert(s), and should direct all requests for registration to the
   review mailing list.

<span class="h4"><a class="selflink" name="section-11.1.1" href="#section-11.1.1">11.1.1</a>.  Registration Template</span>

   Type name:
      The name requested (e.g., "example").
   Additional Token Endpoint Response Parameters:
      Additional response parameters returned together with the
      "access_token" parameter.  New parameters MUST be separately
      registered in the OAuth parameters registry as described by
      <a href="#section-11.2">Section 11.2</a>.
   HTTP Authentication Scheme(s):
      The HTTP authentication scheme name(s), if any, used to
      authenticate protected resources requests using access token of
      this type.
   Change controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.
   Specification document(s):
      Reference to document that specifies the parameter, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.

<span class="h3"><a class="selflink" name="section-11.2" href="#section-11.2">11.2</a>.  The OAuth Parameters Registry</span>

   This specification establishes the OAuth parameters registry.

   Additional parameters for inclusion in the authorization endpoint
   request, the authorization endpoint response, the token endpoint
   request, or the token endpoint response, are registered on the advice
   of one or more Designated Experts (appointed by the IESG or their
   delegate), with a Specification Required (using terminology from
   [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>]).  However, to allow for the allocation of values prior to



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 52]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-53" id="page-53" href="#page-53" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   publication, the Designated Expert(s) may approve registration once
   they are satisfied that such a specification will be published.

   Registration requests should be sent to the [TBD]@ietf.org mailing
   list for review and comment, with an appropriate subject (e.g.,
   "Request for parameter: example"). [[ Note to RFC-EDITOR: The name of
   the mailing list should be determined in consultation with the IESG
   and IANA.  Suggested name: oauth-ext-review. ]]

   Within at most 14 days of the request, the Designated Expert(s) will
   either approve or deny the registration request, communicating this
   decision to the review list and IANA.  Denials should include an
   explanation and, if applicable, suggestions as to how to make the
   request successful.

   Decisions (or lack thereof) made by the Designated Expert can be
   first appealed to Application Area Directors (contactable using
   app-ads@tools.ietf.org email address or directly by looking up their
   email addresses on <a href="http://www.iesg.org/">http://www.iesg.org/</a> website) and, if the
   appellant is not satisfied with the response, to the full IESG (using
   the iesg@iesg.org mailing list).

   IANA should only accept registry updates from the Designated
   Expert(s), and should direct all requests for registration to the
   review mailing list.

<span class="h4"><a class="selflink" name="section-11.2.1" href="#section-11.2.1">11.2.1</a>.  Registration Template</span>

   Parameter name:
      The name requested (e.g., "example").
   Parameter usage location:
      The location(s) where parameter can be used.  The possible
      locations are: authorization request, authorization response,
      token request, or token response.
   Change controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.
   Specification document(s):
      Reference to document that specifies the parameter, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.

<span class="h4"><a class="selflink" name="section-11.2.2" href="#section-11.2.2">11.2.2</a>.  Initial Registry Contents</span>

   The OAuth Parameters Registry's initial contents are:




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 53]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-54" id="page-54" href="#page-54" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   o  Parameter name: client_id
   o  Parameter usage location: authorization request, token request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: client_secret
   o  Parameter usage location: token request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: response_type
   o  Parameter usage location: authorization request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: redirect_uri
   o  Parameter usage location: authorization request, token request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: scope
   o  Parameter usage location: authorization request, authorization
      response, token request, token response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: state
   o  Parameter usage location: authorization request, authorization
      response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: code
   o  Parameter usage location: authorization response, token request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: error_description
   o  Parameter usage location: authorization response, token response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: error_uri
   o  Parameter usage location: authorization response, token response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]





<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 54]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-55" id="page-55" href="#page-55" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   o  Parameter name: grant_type
   o  Parameter usage location: token request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: access_token
   o  Parameter usage location: authorization response, token response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: token_type
   o  Parameter usage location: authorization response, token response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: expires_in
   o  Parameter usage location: authorization response, token response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: username
   o  Parameter usage location: token request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: password
   o  Parameter usage location: token request
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

   o  Parameter name: refresh_token
   o  Parameter usage location: token request, token response
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

<span class="h3"><a class="selflink" name="section-11.3" href="#section-11.3">11.3</a>.  The OAuth Authorization Endpoint Response Type Registry</span>

   This specification establishes the OAuth authorization endpoint
   response type registry.

   Additional response type for use with the authorization endpoint are
   registered on the advice of one or more Designated Experts (appointed
   by the IESG or their delegate), with a Specification Required (using
   terminology from [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>]).  However, to allow for the allocation of
   values prior to publication, the Designated Expert(s) may approve
   registration once they are satisfied that such a specification will
   be published.




<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 55]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-56" id="page-56" href="#page-56" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   Registration requests should be sent to the [TBD]@ietf.org mailing
   list for review and comment, with an appropriate subject (e.g.,
   "Request for response type: example"). [[ Note to RFC-EDITOR: The
   name of the mailing list should be determined in consultation with
   the IESG and IANA.  Suggested name: oauth-ext-review. ]]

   Within at most 14 days of the request, the Designated Expert(s) will
   either approve or deny the registration request, communicating this
   decision to the review list and IANA.  Denials should include an
   explanation and, if applicable, suggestions as to how to make the
   request successful.

   Decisions (or lack thereof) made by the Designated Expert can be
   first appealed to Application Area Directors (contactable using
   app-ads@tools.ietf.org email address or directly by looking up their
   email addresses on <a href="http://www.iesg.org/">http://www.iesg.org/</a> website) and, if the
   appellant is not satisfied with the response, to the full IESG (using
   the iesg@iesg.org mailing list).

   IANA should only accept registry updates from the Designated
   Expert(s), and should direct all requests for registration to the
   review mailing list.

<span class="h4"><a class="selflink" name="section-11.3.1" href="#section-11.3.1">11.3.1</a>.  Registration Template</span>

   Response type name:
      The name requested (e.g., "example").
   Change controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.
   Specification document(s):
      Reference to document that specifies the type, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.

<span class="h4"><a class="selflink" name="section-11.3.2" href="#section-11.3.2">11.3.2</a>.  Initial Registry Contents</span>

   The OAuth Authorization Endpoint Response Type Registry's initial
   contents are:

   o  Response type name: code
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]






<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 56]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-57" id="page-57" href="#page-57" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   o  Response type name: token
   o  Change controller: IETF
   o  Specification document(s): [[ this document ]]

<span class="h3"><a class="selflink" name="section-11.4" href="#section-11.4">11.4</a>.  The OAuth Extensions Error Registry</span>

   This specification establishes the OAuth extensions error registry.

   Additional error codes used together with other protocol extensions
   (i.e. extension grant types, access token types, or extension
   parameters) are registered on the advice of one or more Designated
   Experts (appointed by the IESG or their delegate), with a
   Specification Required (using terminology from [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>]).  However,
   to allow for the allocation of values prior to publication, the
   Designated Expert(s) may approve registration once they are satisfied
   that such a specification will be published.

   Registration requests should be sent to the [TBD]@ietf.org mailing
   list for review and comment, with an appropriate subject (e.g.,
   "Request for error code: example"). [[ Note to RFC-EDITOR: The name
   of the mailing list should be determined in consultation with the
   IESG and IANA.  Suggested name: oauth-ext-review. ]]

   Within at most 14 days of the request, the Designated Expert(s) will
   either approve or deny the registration request, communicating this
   decision to the review list and IANA.  Denials should include an
   explanation and, if applicable, suggestions as to how to make the
   request successful.

   Decisions (or lack thereof) made by the Designated Expert can be
   first appealed to Application Area Directors (contactable using
   app-ads@tools.ietf.org email address or directly by looking up their
   email addresses on <a href="http://www.iesg.org/">http://www.iesg.org/</a> website) and, if the
   appellant is not satisfied with the response, to the full IESG (using
   the iesg@iesg.org mailing list).

   IANA should only accept registry updates from the Designated
   Expert(s), and should direct all requests for registration to the
   review mailing list.

<span class="h4"><a class="selflink" name="section-11.4.1" href="#section-11.4.1">11.4.1</a>.  Registration Template</span>

   Error name:
      The name requested (e.g., "example").







<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 57]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-58" id="page-58" href="#page-58" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   Error usage location:
      The location(s) where the error can be used.  The possible
      locations are: authorization code grant error response
      (<a href="#section-4.1.2.1">Section 4.1.2.1</a>), implicit grant error response
      (<a href="#section-4.2.2.1">Section 4.2.2.1</a>), or token error response (<a href="#section-5.2">Section 5.2</a>).
   Related protocol extension:
      The name of the extension grant type, access token type, or
      extension parameter, the error code is used in conjunction with.
   Change controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.
   Specification document(s):
      Reference to document that specifies the error code, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.


<span class="h2"><a class="selflink" name="section-12" href="#section-12">12</a>.  Acknowledgements</span>

   The initial OAuth 2.0 protocol specification was edited by David
   Recordon, based on two previous publications: the OAuth 1.0 community
   specification [<a href="./rfc5849" title="&quot;The OAuth 1.0 Protocol&quot;">RFC5849</a>], and OAuth WRAP (OAuth Web Resource
   Authorization Profiles) [I-D.<a href="./draft-hardt-oauth-01">draft-hardt-oauth-01</a>].  The Security
   Considerations section was drafted by Torsten Lodderstedt, Mark
   McGloin, Phil Hunt, and Anthony Nadalin.

   The OAuth 1.0 community specification was edited by Eran Hammer-Lahav
   and authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
   Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
   Kellan Elliott-McCrea, Larry Halff, Eran Hammer-Lahav, Ben Laurie,
   Chris Messina, John Panzer, Sam Quigley, David Recordon, Eran
   Sandler, Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy
   Smith.

   The OAuth WRAP specification was edited by Dick Hardt and authored by
   Brian Eaton, Yaron Goland, Dick Hardt, and Allen Tom.

   This specification is the work of the OAuth Working Group which
   includes dozens of active and dedicated participants.  In particular,
   the following individuals contributed ideas, feedback, and wording
   which shaped and formed the final specification:

   Michael Adams, Andrew Arnott, Dirk Balfanz, Scott Cantor, Blaine
   Cook, Brian Campbell, Brian Eaton, Leah Culver, Bill de hOra, Brian
   Eaton, Brian Ellin, Igor Faynberg, George Fletcher, Tim Freeman, Evan
   Gilbert, Yaron Goland, Brent Goldman, Kristoffer Gronowski, Justin



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 58]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-59" id="page-59" href="#page-59" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   Hart, Dick Hardt, Craig Heath, Phil Hunt, Michael B. Jones, John
   Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara, Rasmus Lerdorf,
   Torsten Lodderstedt, Hui-Lan Lu, Paul Madsen, Alastair Mair, Eve
   Maler, James Manger, Mark McGloin, Laurence Miao, Chuck Mortimore,
   Anthony Nadalin, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob
   Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
   Justin Smith, Jeremy Suriel, Christian Stuebner, Paul Tarjan, Allen
   Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar Woodward.


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Editor's Notes</span>

   While many people contributed to this specification throughout its
   long journey, the editor would like to acknowledge and thank a few
   individuals for their outstanding and invaluable efforts leading up
   to the publication of this specification.  It is these individuals
   without whom this work would not have existed or reached its
   successful conclusion.

   David Recordon for continuously being one of OAuth's most valuable
   assets, bringing pragmatism and urgency to the work, and helping
   shape it from its very beginning, as well as being one of the best
   collaborators I had the pleasure of working with.

   Mark Nottingham for introducing OAuth to the IETF and setting the
   community on this course.  Lisa Dusseault for her support and
   guidance as the Application area director.  Blaine Cook, Peter Saint-
   Andre, and Hannes Tschofenig for their work as working group chairs.

   James Manger for his creative ideas and always insightful feedback.
   Brian Campbell, Torsten Lodderstedt, Chuck Mortimore, Justin Richer,
   Marius Scurtescu, and Luke Shepard for their continued participation
   and valuable feedback.

   Special thanks goes to Mike Curtis and Yahoo! for their unconditional
   support of this work for over three years.


<span class="h2"><a class="selflink" name="section-13" href="#section-13">13</a>.  References</span>

<span class="h3"><a class="selflink" name="section-13.1" href="#section-13.1">13.1</a>.  Normative References</span>

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

   [<a name="ref-RFC2616" id="ref-RFC2616">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", <a href="./rfc2616">RFC 2616</a>, June 1999.



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 59]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-60" id="page-60" href="#page-60" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


   [<a name="ref-RFC2617" id="ref-RFC2617">RFC2617</a>]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              <a href="./rfc2617">RFC 2617</a>, June 1999.

   [<a name="ref-RFC2818" id="ref-RFC2818">RFC2818</a>]  Rescorla, E., "HTTP Over TLS", <a href="./rfc2818">RFC 2818</a>, May 2000.

   [<a name="ref-RFC3986" id="ref-RFC3986">RFC3986</a>]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              <a href="./rfc3986">RFC 3986</a>, January 2005.

   [<a name="ref-RFC4627" id="ref-RFC4627">RFC4627</a>]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", <a href="./rfc4627">RFC 4627</a>, July 2006.

   [<a name="ref-RFC4949" id="ref-RFC4949">RFC4949</a>]  Shirey, R., "Internet Security Glossary, Version 2",
              <a href="./rfc4949">RFC 4949</a>, August 2007.

   [<a name="ref-RFC5226" id="ref-RFC5226">RFC5226</a>]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", <a href="./bcp26">BCP 26</a>, <a href="./rfc5226">RFC 5226</a>,
              May 2008.

   [<a name="ref-RFC5234" id="ref-RFC5234">RFC5234</a>]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, <a href="./rfc5234">RFC 5234</a>, January 2008.

   [<a name="ref-RFC5246" id="ref-RFC5246">RFC5246</a>]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", <a href="./rfc5246">RFC 5246</a>, August 2008.

   [<a name="ref-W3C.REC-html401-19991224" id="ref-W3C.REC-html401-19991224">W3C.REC-html401-19991224</a>]
              Jacobs, I., Hors, A., and D. Raggett, "HTML 4.01
              Specification", World Wide Web Consortium
              Recommendation REC-html401-19991224, December 1999,
              &lt;<a href="http://www.w3.org/TR/1999/REC-html401-19991224">http://www.w3.org/TR/1999/REC-html401-19991224</a>&gt;.

<span class="h3"><a class="selflink" name="section-13.2" href="#section-13.2">13.2</a>.  Informative References</span>

   [I-D.<a href="./draft-hardt-oauth-01">draft-hardt-oauth-01</a>]
              Hardt, D., Ed., Tom, A., Eaton, B., and Y. Goland, "OAuth
              Web Resource Authorization Profiles", January 2010.

   [<a name="ref-I-D.ietf-oauth-saml2-bearer" id="ref-I-D.ietf-oauth-saml2-bearer">I-D.ietf-oauth-saml2-bearer</a>]
              Campbell, B. and C. Mortimore, "SAML 2.0 Bearer Assertion
              Grant Type Profile for OAuth 2.0",
              <a href="./draft-ietf-oauth-saml2-bearer-03">draft-ietf-oauth-saml2-bearer-03</a> (work in progress),
              February 2011.

   [<a name="ref-I-D.ietf-oauth-v2-bearer" id="ref-I-D.ietf-oauth-v2-bearer">I-D.ietf-oauth-v2-bearer</a>]
              Jones, M., Hardt, D., and D. Recordon, "The OAuth 2.0
              Protocol: Bearer Tokens", <a href="./draft-ietf-oauth-v2-bearer-04">draft-ietf-oauth-v2-bearer-04</a>



<span class="grey">Hammer-Lahav, et al.     Expires January 9, 2012               [Page 60]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-61" id="page-61" href="#page-61" class="invisible"> </a>
<span class="grey">Internet-Draft                  OAuth 2.0                      July 2011</span>


              (work in progress), March 2011.

   [<a name="ref-I-D.ietf-oauth-v2-http-mac" id="ref-I-D.ietf-oauth-v2-http-mac">I-D.ietf-oauth-v2-http-mac</a>]
              Hammer-Lahav, E., Barth, A., and B. Adida, "HTTP
              Authentication: MAC Access Authentication",
              <a href="./draft-ietf-oauth-v2-http-mac-00">draft-ietf-oauth-v2-http-mac-00</a> (work in progress),
              May 2011.

   [<a name="ref-I-D.lodderstedt-oauth-security" id="ref-I-D.lodderstedt-oauth-security">I-D.lodderstedt-oauth-security</a>]
              Lodderstedt, T., McGloin, M., and P. Hunt, "OAuth 2.0
              Threat Model and Security Considerations",
              <a href="./draft-lodderstedt-oauth-security-01">draft-lodderstedt-oauth-security-01</a> (work in progress),
              March 2011.

   [<a name="ref-OASIS.saml-core-2.0-os" id="ref-OASIS.saml-core-2.0-os">OASIS.saml-core-2.0-os</a>]
              Cantor, S., Kemp, J., Philpott, R., and E. Maler,
              "Assertions and Protocol for the OASIS Security Assertion
              Markup Language (SAML) V2.0", OASIS Standard saml-core-
              2.0-os, March 2005.

   [<a name="ref-RFC5849" id="ref-RFC5849">RFC5849</a>]  Hammer-Lahav, E., "The OAuth 1.0 Protocol", <a href="./rfc5849">RFC 5849</a>,
              April 2010.


Authors' Addresses

   Eran Hammer-Lahav (editor)
   Yahoo!

   Email: eran@hueniverse.com
   URI:   <a href="http://hueniverse.com">http://hueniverse.com</a>


   David Recordon
   Facebook

   Email: dr@fb.com
   URI:   <a href="http://www.davidrecordon.com/">http://www.davidrecordon.com/</a>


   Dick Hardt
   Microsoft

   Email: dick.hardt@gmail.com
   URI:   <a href="http://dickhardt.org/">http://dickhardt.org/</a>






Hammer-Lahav, et al.     Expires January 9, 2012               [Page 61]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
