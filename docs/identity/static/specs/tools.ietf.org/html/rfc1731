<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:rfc:1731" />
<meta name="DC.Description.Abstract" content="The Internet Message Access Protocol, Version 4 [IMAP4] contains the\nAUTHENTICATE command, for identifying and authenticating a user to an\nIMAP4 server and for optionally negotiating a protection mechanism for\nsubsequent protocol interactions. This document describes several\nauthentication mechanisms for use by the IMAP4 AUTHENTICATE command.\n[STANDARDS-TRACK]" />
<meta name="DC.Creator" content="John G. Myers &lt;jgm+@cmu.edu&gt;" />
<meta name="DC.Date.Issued" content="December, 1994" />
<meta name="DC.Title" content="IMAP4 Authentication Mechanisms" />

    <link rel="icon" href="/images/rfc.png" type="image/png" />
    <link rel="shortcut icon" href="/images/rfc.png" type="image/png" />
    <title>RFC 1731 - IMAP4 Authentication Mechanisms</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgblue"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="/rfc/rfc1731.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/rfc1731" title="PDF version of this document">pdf</a>] [<a href="./draft-ietf-imap-auth" title="draft-ietf-imap-auth">draft-ietf-imap-auth</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=rfc1731" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=rfc1731" title="Side-by-side diff">Diff2</a>]                 </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">                                                       PROPOSED STANDARD</span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Network Working Group                                           J. Myers
Request for Comments: 1731                               Carnegie Mellon
Category: Standards Track                                  December 1994


                    <span class="h1">IMAP4 Authentication Mechanisms</span>

Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>. Introduction</span>

   The Internet Message Access Protocol, Version 4 [<a href="#ref-IMAP4" title="&quot;Internet Message Access Protocol - Version 4&quot;">IMAP4</a>] contains the
   AUTHENTICATE command, for identifying and authenticating a user to an
   IMAP4 server and for optionally negotiating a protection mechanism
   for subsequent protocol interactions.  This document describes
   several authentication mechanisms for use by the IMAP4 AUTHENTICATE
   command.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>. Kerberos version 4 authentication mechanism</span>

   The authentication type associated with Kerberos version 4 is
   "KERBEROS_V4".

   The data encoded in the first ready response contains a random 32-bit
   number in network byte order.  The client should respond with a
   Kerberos ticket and an authenticator for the principal
   "imap.hostname@realm", where "hostname" is the first component of the
   host name of the server with all letters in lower case and where
   "realm" is the Kerberos realm of the server.  The encrypted checksum
   field included within the Kerberos authenticator should contain the
   server provided 32-bit number in network byte order.

   Upon decrypting and verifying the ticket and authenticator, the
   server should verify that the contained checksum field equals the
   original server provided random 32-bit number.  Should the
   verification be successful, the server must add one to the checksum
   and construct 8 octets of data, with the first four octets containing
   the incremented checksum in network byte order, the fifth octet
   containing a bit-mask specifying the protection mechanisms supported
   by the server, and the sixth through eighth octets containing, in



<span class="grey">Myers                                                           [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey"><a href="./rfc1731">RFC 1731</a>            IMAP4 Authentication Mechanisms        December 1994</span>


   network byte order, the maximum cipher-text buffer size the server is
   able to receive.  The server must encrypt the 8 octets of data in the
   session key and issue that encrypted data in a second ready response.
   The client should consider the server authenticated if the first four
   octets the un-encrypted data is equal to one plus the checksum it
   previously sent.

   The client must construct data with the first four octets containing
   the original server-issued checksum in network byte order, the fifth
   octet containing the bit-mask specifying the selected protection
   mechanism, the sixth through eighth octets containing in network byte
   order the maximum cipher-text buffer size the client is able to
   receive, and the following octets containing a user name string.  The
   client must then append from one to eight octets so that the length
   of the data is a multiple of eight octets. The client must then PCBC
   encrypt the data with the session key and respond to the second ready
   response with the encrypted data.  The server decrypts the data and
   verifies the contained checksum.  The username field identifies the
   user for whom subsequent IMAP operations are to be performed; the
   server must verify that the principal identified in the Kerberos
   ticket is authorized to connect as that user.  After these
   verifications, the authentication process is complete.

   The protection mechanisms and their corresponding bit-masks are as
   follows:

      1 No protection mechanism
      2 Integrity (krb_mk_safe) protection
      4 Privacy (krb_mk_priv) protection


   EXAMPLE: The following are two Kerberos version 4 login scenarios
   (note that the line breaks in the sample authenticators are for
   editorial clarity and are not in real authenticators)

      S: * OK IMAP4 Server
      C: A001 AUTHENTICATE KERBEROS_V4
      S: + AmFYig==
      C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT
         +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd
         WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh
      S: + or//EoAADZI=
      C: DiAF5A4gA+oOIALuBkAAmw==
      S: A001 OK Kerberos V4 authentication successful







<span class="grey">Myers                                                           [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey"><a href="./rfc1731">RFC 1731</a>            IMAP4 Authentication Mechanisms        December 1994</span>


      S: * OK IMAP4 Server
      C: A001 AUTHENTICATE KERBEROS_V4
      S: + gcfgCA==
      C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT
         +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd
         WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh
      S: A001 NO Kerberos V4 authentication failed


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>. GSSAPI authentication mechanism</span>

   The authentication type associated with all mechanisms employing the
   GSSAPI [<a href="./rfc1508" title="&quot;Generic Security Service Application Program Interface&quot;">RFC1508</a>] is "GSSAPI".

   The first ready response issued by the server contains no data.  The
   client should call GSS_Init_sec_context, passing in 0 for
   input_context_handle (initially) and a targ_name equal to output_name
   from GSS_Import_Name called with input_name_type of NULL and
   input_name_string of "SERVICE:imap@hostname" where "hostname" is the
   fully qualified host name of the server with all letters in lower
   case.  The client must then respond with the resulting output_token.
   If GSS_Init_sec_context returns GSS_CONTINUE_NEEDED, then the client
   should expect the server to issue a token in a subsequent ready
   response.  The client must pass the token to another call to
   GSS_Init_sec_context.

   If GSS_Init_sec_context returns GSS_COMPLETE, then the client should
   respond with any resulting output_token.  If there is no
   output_token, the client should respond with no data.  The client
   should then expect the server to issue a token in a subsequent ready
   response.  The client should pass this token to GSS_Unseal and
   interpret the first octet of resulting cleartext as a bit-mask
   specifying the protection mechanisms supported by the server and the
   second through fourth octets as the maximum size output_message to
   send to the server.  The client should construct data, with the first
   octet containing the bit-mask specifying the selected protection
   mechanism, the second through fourth octets containing in network
   byte order the maximum size output_message the client is able to
   receive, and the remaining octets containing a user name string.  The
   client must pass the data to GSS_Seal with conf_flag set to FALSE,
   and respond with the generated output_message.  The client can then
   consider the server authenticated.

   The server must issue a ready response with no data and pass the
   resulting client supplied token to GSS_Accept_sec_context as
   input_token, setting acceptor_cred_handle to NULL (for "use default
   credentials"), and 0 for input_context_handle (initially).  If
   GSS_Accept_sec_context returns GSS_CONTINUE_NEEDED, the server should



<span class="grey">Myers                                                           [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey"><a href="./rfc1731">RFC 1731</a>            IMAP4 Authentication Mechanisms        December 1994</span>


   return the generated output_token to the client in a ready response
   and pass the resulting client supplied token to another call to
   GSS_Accept_sec_context.

   If GSS_Accept_sec_context returns GSS_COMPLETE, then if an
   output_token is returned, the server should return it to the client
   in a ready response and expect a reply from the client with no data.
   Whether or not an output_token was returned, the server then should
   then construct 4 octets of data, with the first octet containing a
   bit-mask specifying the protection mechanisms supported by the server
   and the second through fourth octets containing in network byte order
   the maximum size output_token the server is able to receive.  The
   server must then pass the plaintext to GSS_Seal with conf_flag set to
   FALSE and issue the generated output_message to the client in a ready
   response.  The server must then pass the resulting client supplied
   token to GSS_Unseal and interpret the first octet of resulting
   cleartext as the bit-mask for the selected protection mechanism, the
   second through fourth octets as the maximum size output_message to
   send to the client, and the remaining octets as the user name.  Upon
   verifying the src_name is authorized to authenticate as the user
   name, The server should then consider the client authenticated.

   The protection mechanisms and their corresponding bit-masks are as
   follows:

      1 No protection mechanism
      2 Integrity protection.
        Sender calls GSS_Seal with conf_flag set to FALSE
      4 Privacy protection.
        Sender calls GSS_Seal with conf_flag set to TRUE


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>. S/Key authentication mechanism</span>

   The authentication type associated with S/Key [<a href="#ref-SKEY" title="&quot;The S/Key One-Time Password System&quot;">SKEY</a>] is "SKEY".

   The first ready response issued by the server contains no data.  The
   client responds with the user name string.

   The data encoded in the second ready response contains the decimal
   sequence number followed by a single space and the seed string for
   the indicated user.  The client responds with the one-time-password,
   as either a 64-bit value in network byte order or encoded in the "six
   English words" format.

   Upon successful verification of the one-time-password, the server
   should consider the client authenticated.




<span class="grey">Myers                                                           [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey"><a href="./rfc1731">RFC 1731</a>            IMAP4 Authentication Mechanisms        December 1994</span>


   S/Key authentication does not provide for any protection mechanisms.


   EXAMPLE: The following are two S/Key login scenarios.

      S: * OK IMAP4 Server
      C: A001 AUTHENTICATE SKEY
      S: +
      C: bW9yZ2Fu
      S: + OTUgUWE1ODMwOA==
      C: Rk9VUiBNQU5OIFNPT04gRklSIFZBUlkgTUFTSA==
      S: A001 OK S/Key authentication successful


      S: * OK IMAP4 Server
      C: A001 AUTHENTICATE SKEY
      S: +
      C: c21pdGg=
      S: + OTUgUWE1ODMwOA==
      C: BsAY3g4gBNo=
      S: A001 NO S/Key authentication failed


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>. References</span>

   [<a name="ref-IMAP4" id="ref-IMAP4">IMAP4</a>] Crispin, M., "Internet Message Access Protocol - Version 4",
   <a href="./rfc1730">RFC 1730</a>, University of Washington, December 1994.

   [<a name="ref-RFC1508" id="ref-RFC1508">RFC1508</a>] Linn, J., "Generic Security Service Application Program
   Interface", <a href="./rfc1508">RFC 1508</a>, Geer Zolot Associates, September 1993.

   [<a name="ref-SKEY" id="ref-SKEY">SKEY</a>] Haller, Neil M. "The S/Key One-Time Password System",
   Bellcore, Morristown, New Jersey, October 1993,
   thumper.bellcore.com:pub/nmh/docs/ISOC.symp.ps

















<span class="grey">Myers                                                           [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey"><a href="./rfc1731">RFC 1731</a>            IMAP4 Authentication Mechanisms        December 1994</span>


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>. Security Considerations</span>

   Security issues are discussed throughout this memo.


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>. Author's Address</span>

   John G. Myers
   Carnegie-Mellon University
   5000 Forbes Ave.
   Pittsburgh PA, 15213-3890

   EMail: jgm+@cmu.edu






































Myers                                                           [Page 6]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
