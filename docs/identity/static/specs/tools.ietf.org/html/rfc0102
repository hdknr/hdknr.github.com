<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:rfc:102" />
<meta name="DC.Creator" content="S.D. Crocker" />
<meta name="DC.Date.Issued" content="February, 1971" />
<meta name="DC.Title" content="Output of the Host-Host Protocol glitch cleaning committee" />

    <link rel="icon" href="/images/rfc.png" type="image/png" />
    <link rel="shortcut icon" href="/images/rfc.png" type="image/png" />
    <title>RFC 102 - Output of the Host-Host Protocol glitch cleaning committee</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgwhite"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="/rfc/rfc102.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/rfc102" title="PDF version of this document">pdf</a>]                                                        </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Updated by: <a href="./rfc107">107</a>                                                        </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Network Working Group                            Steve Crocker, Chairman
Request for Comments: 102                              at BBN, Cambridge
NIC#5763                                            22, 23 February 1971


                    <span class="h1">OUTPUT OF THE HOST/HOST PROTOCOL</span>
                       <span class="h1">GLITCH CLEANING COMMITTEE</span>

   At the NWG meeting in Urbana on 17-19 February 1971, a
   committee was established to look at the Host/Host protocol
   and see what changes were immediately desirable or necessary.

   The committee is chaired by Steve Crocker, and has eight
   other members:

             Ray Tomlinson                 BBN (Tenex)

             Jim White                     UCSB

             Gary Grossman                 Illinois

             Tom Barkalow                  Lincoln (TX2)

             Will Crowther                 BBN (IMPs)

             Bob Bressler                  MIT (Dynamic Modeling

             Doug McKay                    IBM (Yorktown)

             Dan Murphy                    BBN (Tenex)


   A number of topics were discussed.  On some of these topics, a
   consensus was reached on whether or not to recommend a change, and if
   so, what the change should be.  On the remaining topics, specific
   alternatives were proposed but no consensus was reached.

   The committee will immediately canvas the network community and
   gather reaction to its recommendations and the proposed alternatives.
   The committee will then reconvene at UCLA on 8 March 1971 and decide
   on final recommendations.  Steve Crocker will then write Document #2.
   This sequence is in lieu of the change procedure outlined in NWG/RFC
   53.








<span class="grey">Crocker                                                         [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey"><a href="./rfc102">RFC 102</a>       HOST/HOST PROTOCOL GLITCH CLEANING COMMITTEE February 1971</span>


   Specific Recommendations

   1. The ECO and ERP command should each be 8 bits long.

   2. The ERR command should be 96 bits long.

   3. Message Data Types should be eliminated.  Third-level protocol
      people may reinstate such a mechanism.

   4. The Cease mechanism should be discontinued.

   5. A new pair of one byte commands RST (reset) and RRP (reset reply)
      should be added.  The RST should be interpreted as a signal to
      purge the NCP tables of any existing entries which arose from the
      sending Host.  The RRP command should be returned to acknowledge
      receipt of the RST.  The Host sending the RST may proceed after
      receiving either a RST or a RRP in return.  A RST may be returned
      if the second Host comes up after the first Host.

   6. Although it was suggested at the Urbana meeting that connections
      should be full-duplex, the committee recommends against this
      change.

   7. Messages should be an integral number of bytes, and the number of
      bytes and the byte size should be specified in each message.  The
      marking convention should be abandoned and the padding ignored.

      The number of bytes in the message should be a 16-bit number
      following the leader.  The byte size should be in the next 8-bit
      field.  Two suggestions were generated for the starting point of
      the text, and these are explained in the next session.

      For flow control purposes, the number of bits in a message is the
      product of the number of bytes and the byte size.  The leader and
      other fixed format fields are not counted.

   8. The problem of synchronizing the interrupt signal in a console
      input stream was considered.  We consider the console input
      scanner as a process and note two reasonable implementations: it
      may either read characters as fast as it can, looking for the
      interrupt character and throwing away characters if there is no
      room in the user process' input queue; it may read characters only
      as fast as the user process can receive them, (or at least has
      room for them).

   The first implementation guarantees that the interrupt character
   (e.g., control - C on the PDP-10 10/50) will always be acted on, but
   requires that the using process interpret the output stream to detect



<span class="grey">Crocker                                                         [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey"><a href="./rfc102">RFC 102</a>       HOST/HOST PROTOCOL GLITCH CLEANING COMMITTEE February 1971</span>


   when it is sending too fast.  The second implementation avoids
   overrun but may not allow for sending an interrupt code.  Note that
   in the first case, allocation is alway renewed as soon as possible by
   the console input interpreter; whereas in the second case, allocation
   is renewed only as the result of acceptance of data by the user
   process.

   We decided that this is really a third-level protocol matter, viz,
   use the INS to mean that a special code has been inserted into the
   input stream.  In conjunction with this, create the special code to
   be put into the input sequence.

   This special code would be network-wide and independent of the
   particular interrupt character peculiar to the serving system.  The
   scheme for interrupting a serving process is that the using process
   inserts the serving Host's interrupt sequence, followed by the
   network special code, and also issue the INS.

UNRESOLVED ALTERNATIVES

   1. Length of Control Messages

   In accordance with other specifications, control messages should be
   an integral number of 8-bit bytes, the length should be specified in
   the byte count field, and control commands should not be split across
   messages.

   Unresolved was whether to specially limit the length of control
   messages.  The two choices are.

      a) no special limit ( ~ 1000 bytes)

      b) 120 bytes

   2. Message Format

   It was agreed to abandon marking and include the text length in the
   form of a byte count and byte size.  Unresolved was where to begin
   the first byte of data.  The two choices are:

      a) have the first data byte begin after 72 bits of leader, byte
      count, byte size and spacing.  The message format would then be as
      in the diagram:








<span class="grey">Crocker                                                         [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey"><a href="./rfc102">RFC 102</a>       HOST/HOST PROTOCOL GLITCH CLEANING COMMITTEE February 1971</span>


                 &lt;------------16------------&gt;
                  __________________________
                 |                          |
                 |_ _ _ _  LEADER   _ _ _ _ |
                 |                          |
                 |__________________________|
                 |                          |
                 |        BYTE COUNT        |
                 |__________________________|
                 |            |             |
   BYTE SIZE-----|----&gt;       |             |
                 |____________|_____________|
                 |            |             |
                 |            |&lt;------------|--Beginning of first
                 |____________|_____________|       data byte
                 |                          |
                 |                          |

      b) use the double physical transmission scheme presented in
      NWG/RFC 67.  When sending a regular message, the Host would send a
      leader, byte count and byte size and terminate transmission.  The
      second transmission would be the data.

      At the receiving end, the IMP would transmit 64 bits of leader,
      byte count, byte size and spacing, and stop transmission.  The
      next transmission would be only the data.

<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>. Allocation</span>

   With respect to the allocation mechanism embodied in the ALL, GVB and
   RET commands, two alternatives were proposed:

      a) make no change.

      b) The flow control algorithm should be changed to keep track of
      two quantities: messages and bits.  The ALL, GVB, and RET commands
      each have two data fields.  The ALL command allocates a message
      limit and a bit limit.  The GVB command contains two fractions,
      and the RET command returns both messages and bits.  When sending
      a message, the sending NCP decrements its message counter by 1 and
      its bit counter by the text length of the message.  The sending
      NCP may not cause either of its counters to go negative.  The
      message counter would be 16 bits long.


         [ This RFC was put into machine readable form for entry ]
         [ into the online RFC archives by Gottfried Janik 02/98 ]




Crocker                                                         [Page 4]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
