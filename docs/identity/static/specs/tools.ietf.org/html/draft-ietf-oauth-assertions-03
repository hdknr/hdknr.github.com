<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Relation.Replaces" content="draft-mortimore-oauth-assertions" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-assertions" />
<meta name="DC.Date.Issued" content="2012-07-02" />
<meta name="DC.Creator" content="Goland, Yaron" />
<meta name="DC.Creator" content="Campbell, Brian" />
<meta name="DC.Creator" content="Jones, Michael" />
<meta name="DC.Creator" content="Mortimore, Chuck" />
<meta name="DC.Description.Abstract" content="This specification provides a framework for the use of assertions" />
<meta name="DC.Title" content="Assertion Framework for OAuth 2.0" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-assertions-03 - Assertion Framework for OAuth 2.0</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-assertions-03.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-assertions-03.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-assertions-03.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-assertions-03.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-assertions' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-assertions@tools.ietf.org?subject=draft-ietf-oauth-assertions%20" title="Send email to the document authors">Email</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=draft-ietf-oauth-assertions-03.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=draft-ietf-oauth-assertions-03.txt" title="Side-by-side diff">Diff2</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-assertions-03.txt" title="Run an idnits check of this document">Nits</a>] </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: (<a href="./draft-mortimore-oauth-assertions" title="Precursor">draft-mortimore-oauth-assertions</a>)                            
          <a href="./draft-ietf-oauth-assertions-00">00</a> <a href="./draft-ietf-oauth-assertions-01">01</a> <a href="./draft-ietf-oauth-assertions-02">02</a> <a href="./draft-ietf-oauth-assertions-03">03</a> <a href="./draft-ietf-oauth-assertions-04">04</a>                                                </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
                                                       C. Mortimore, Ed.
Internet-Draft                                                Salesforce
Intended status: Standards Track                                M. Jones
Expires: November 3, 2012                                      Microsoft
                                                             B. Campbell
                                                                    Ping
                                                               Y. Goland
                                                               Microsoft
                                                             May 2, 2012


                      <span class="h1">OAuth 2.0 Assertion Profile</span>
                     <span class="h1">draft-ietf-oauth-assertions-03</span>

Abstract

   This specification provides a general framework for the use of
   assertions as client credentials and/or authorization grants with
   OAuth 2.0.  It includes a generic mechanism for transporting
   assertions during interactions with a token endpoint, as wells as
   rules for the content and processing of those assertions.  The intent
   is to provide an enhanced security profile by using derived values
   such as signatures or HMACs, as well as facilitate the use of OAuth
   2.0 in client-server integration scenarios where the end-user may not
   be present.

   This specification only defines abstract message flow and assertion
   content.  Actual use requires implementation of a companion protocol
   binding specification.  Additional profile documents provide standard
   representations in formats such as SAML and JWT.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 3, 2012.




<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   <a href="#section-1">1</a>.  Requirements Notation and Conventions  . . . . . . . . . . . .  <a href="#page-3">3</a>
   <a href="#section-2">2</a>.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-3">3</a>
   <a href="#section-3">3</a>.  Authentication vs. Authorization . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
   <a href="#section-4">4</a>.  Transporting Assertions  . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-4.1">4.1</a>.  Using Assertions for Client Authentication . . . . . . . .  <a href="#page-4">4</a>
       <a href="#section-4.1.1">4.1.1</a>.  Error Responses  . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-4.2">4.2</a>.  Using Assertions as Authorization Grants . . . . . . . . .  <a href="#page-6">6</a>
       <a href="#section-4.2.1">4.2.1</a>.  Error Responses  . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
   <a href="#section-5">5</a>.  Assertion Content and Processing . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
     <a href="#section-5.1">5.1</a>.  Assertion Metamodel  . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-5.2">5.2</a>.  General Assertion Format and Processing Rules  . . . . . .  <a href="#page-8">8</a>
   <a href="#section-6">6</a>.  Specific Assertion Format and Processing Rules . . . . . . . .  <a href="#page-9">9</a>
     <a href="#section-6.1">6.1</a>.  Client Authentication  . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
     <a href="#section-6.2">6.2</a>.  Client Acting on Behalf of Itself  . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-6.3">6.3</a>.  Client Acting on Behalf of a User  . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-6.4">6.4</a>.  Client Acting on Behalf of an Anonymous User . . . . . . . <a href="#page-12">12</a>
   <a href="#section-7">7</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
   <a href="#section-8">8</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-8.1">8.1</a>.  assertion Parameter Registration . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-8.2">8.2</a>.  client_assertion Parameter Registration  . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-8.3">8.3</a>.  client_assertion_type Parameter Registration . . . . . . . <a href="#page-14">14</a>
   <a href="#section-9">9</a>.  Normative References . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
   <a href="#appendix-A">Appendix A</a>.  Acknowledgements  . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
   <a href="#appendix-B">Appendix B</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>








<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Requirements Notation and Conventions</span>

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>] .

   Throughout this document, values are quoted to indicate that they are
   to be taken literally.  When using these values in protocol messages,
   the quotes MUST NOT be used as part of the value.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Overview</span>

   The OAuth 2.0 Authorization Protocol [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] provides a
   method for making authenticated HTTP requests to a resource using an
   access token.  Access tokens are issued to clients by an
   authorization server with the (sometimes implicit) approval of the
   resource owner.  These access tokens are typically obtained by
   exchanging an authorization grant representing authorization by the
   resource owner or privileged administrator.  Several authorization
   grant types are defined to support a wide range of client types and
   user experiences.  OAuth also allows for the definition of new
   extension grant types to support additional clients or to provide a
   bridge between OAuth and other trust frameworks.  Finally, OAuth
   allows the definition of additional authentication mechanisms to be
   used by clients when interacting with the authorization server.

   In scenarios where security is at a premium one wants to avoid
   sending secrets across the Internet, even on encrypted connections.
   Instead one wants to send values derived from the secret that prove
   to the receiver that the sender is in possession of the secret
   without actually sending the secret.  Typically the way derived
   values are created is by generating an assertion that is then either
   HMAC'ed or digitally signed using an agreed upon secret.  By
   validating the HMAC or digital signature on the assertion, the
   receiver can prove to themselves that the entity that generated the
   assertion was in possession of the secret without actually
   communicating the secret directly.

   This specification provides a general framework for the use of
   assertions as client credentials and/or authorization grants with
   OAuth 2.0.  It includes a generic mechanism for transporting
   assertions during interactions with a token endpoint, as wells as
   rules for the content and processing of those assertions.  The intent
   is to provide an enhanced security profile by using derived values
   such as signatures or HMACs, as well as facilitate the use of OAuth
   2.0 in client-server integration scenarios where the end-user may not
   be present.



<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   This specification only defines abstract message flow and assertion
   content.  Actual use requires implementation of a companion protocol
   binding specification.  Additional profile documents provide standard
   representations in formats such as SAML and JWT.


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Authentication vs. Authorization</span>

   This specification provides a model for using assertions for
   authentication of an OAuth client during interactions with an
   Authorization Server, as well as the use of assertions as
   authorization grants.  It is important to note that the use of
   assertions for client authentication is orthogonal and separable from
   using assertions as an authorization grant and can be used either in
   combination or in isolation.  In addition, in scenarios when
   assertion based authentication and authorization are used in
   combination, the assertion format and processing may be redundant;
   under such circumstances, the protocol may be optimized to present a
   single assertion.


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Transporting Assertions</span>

   This section defines generic HTTP parameters for transporting
   assertions during interactions with a token endpoint.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Using Assertions for Client Authentication</span>

   In scenarios where one wants to avoid sending secrets, one wants to
   send values derived from the secret that prove to the receiver that
   the sender is in possession of the secret without actually sending
   the secret.

   For example, a client can establish a secret using an out-of-band
   mechanism with a resource server.  As part of this out-of-band
   communication the client and resource server agree that the client
   will authenticate itself using an assertion with agreed upon
   parameters that will be signed by the provisioned secret.  Later on,
   the client might send an access token request to the token endpoint
   for the resource server that includes an authorization code, as well
   as a "client_assertion" that is signed with the previously agreed key
   and parameters.  The "client_assertion" proves to the token endpoint
   the identity of the client and the authorization code provides the
   link to the end-user authorization.

   The following section defines the use of assertions as client
   credentials as an extension of <a href="#section-2.3">Section 2.3</a> of OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  When using assertions as client credentials,



<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   the client includes the assertion and related information using the
   following HTTP request parameters:

   client_id  OPTIONAL.  The client identifier as described in <a href="#section-2.2">Section</a>
      <a href="#section-2.2">2.2</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  When present, the
      "client_id" MUST identify the client to the authorization server.

   client_assertion_type  REQUIRED.  The format of the assertion as
      defined by the authorization server.  The value MUST be an
      absolute URI.

   client_assertion  REQUIRED.  The assertion being used to authenticate
      the client.  Specific serialization of the assertion is defined by
      profile documents.  The serialization MUST be encoded for
      transport within HTTP forms.  It is RECOMMENDED that base64url be
      used.

   The following non-normative example demonstrates a client
   authenticating using an assertion during an Authorization Code Access
   Token Request as defined in <a href="#section-4.1.3">Section 4.1.3</a> of OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] (with line breaks for display purposes only):
   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   grant_type=authorization_code&amp;
   code=i1WsRn1uB1&amp;
   client_id=s6BhdRkqt3&amp;
   client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
   %3Aclient-assertion-type%3Asaml2-bearer&amp;
   client_assertion=PHNhbW...[omitted for brevity]...ZT

   Token endpoints can differentiate between assertion based credentials
   and other client credential types by looking for the presence of the
   "client_assertion" and "client_assertion_type" parameters, which will
   only be present when using assertions for client authentication.

<span class="h4"><a class="selflink" name="section-4.1.1" href="#section-4.1.1">4.1.1</a>.  Error Responses</span>

   If an assertion is invalid for any reason or if more than one client
   authentication mechanism is used, the Authorization Server MUST
   construct an error response as defined in OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  The value of the "error" parameter MUST be the
   "invalid_client" error code.  The authorization server MAY include
   additional information regarding the reasons the client assertion was
   considered invalid using the "error_description" or "error_uri"
   parameters.




<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   For example:
   HTTP/1.1 400 Bad Request
   Content-Type: application/json
   Cache-Control: no-store

   {
     "error":"invalid_client"
     "error_description":"Multiple Credentials Not Allowed"
   }

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Using Assertions as Authorization Grants</span>

   An assertion can be used to request an access token when a client
   wishes to utilize an existing trust relationship.  This may be done
   through the semantics of (and a digital signature/HMAC calculated
   over) the assertion, and expressed to the authorization server
   through an extension authorization grant type.  The processes by
   which authorization is previously granted, and by which the client
   obtains the assertion prior to exchanging it with the authorization
   server, are out of scope.

   The following defines the use of assertions as authorization grants
   as an extension of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], Section 4.5.  When
   using assertions as authorization grants, the client includes the
   assertion and related information using the following HTTP request
   parameters:

   grant_type  REQUIRED.  The format of the assertion as defined by the
      authorization server.  The value MUST be an absolute URI.

   assertion  REQUIRED.  The assertion being used as an authorization
      grant.  Specific serialization of the assertion is defined by
      profile documents.  The serialization MUST be encoded for
      transport within HTTP forms.  It is RECOMMENDED that base64url be
      used.

   scope  OPTIONAL.  The requested scope as described in <a href="#section-3.3">Section 3.3</a> of
      OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  When exchanging assertions for
      access tokens, the authorization for the token has been previously
      granted through some other mechanism.  As such, the requested
      scope SHOULD be equal or lesser than the scope originally granted
      to the authorized accessor.  If the scope parameter and/or value
      is omitted, the scope SHOULD be treated as equal to the scope
      originally granted to the authorized accessor.  The Authorization
      Server SHOULD limit the scope of the issued access token to be
      equal or lesser than the scope originally granted to the
      authorized accessor.




<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   The following non-normative example demonstrates an assertion being
   used as an authorization grant (with line breaks for display purposes
   only):
   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   client_id=s6BhdRkqt3&amp;
   grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&amp;
   assertion=PHNhbWxwOl...[omitted for brevity]...ZT4

   An assertion used in this context is generally a short lived
   representation of the authorization grant and authorization servers
   SHOULD NOT issue tokens that exceed that lifetime by a significant
   period.  In practice, that will usually mean that refresh tokens are
   not issued in response to assertion grant requests and access tokens
   will be issued with a reasonably limited lifetime.  Clients can
   refresh an expired access token by requesting a new one using the
   same assertion, if it is still valid, or with a new assertion.

<span class="h4"><a class="selflink" name="section-4.2.1" href="#section-4.2.1">4.2.1</a>.  Error Responses</span>

   If an assertion is not valid or has expired, the Authorization Server
   MUST construct an error response as defined in OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  The value of the "error" parameter MUST be the
   "invalid_grant" error code.  The authorization server MAY include
   additional information regarding the reasons the assertion was
   considered invalid using the "error_description" or "error_uri"
   parameters.

   For example:
   HTTP/1.1 400 Bad Request
   Content-Type: application/json
   Cache-Control: no-store

   {
     "error":"invalid_grant",
     "error_description":"Audience validation failed"
   }


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Assertion Content and Processing</span>

   This section provides a general content and processing model for the
   use of assertions in OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].






<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  Assertion Metamodel</span>

   The following are entities and metadata involved in the issuance,
   exchange and processing of assertions in OAuth 2.0.  These are
   general terms, abstract from any particular assertion format.
   Mappings of these terms into specific representations are provided by
   profiles of this specification.

   Issuer  The unique identifier for the entity that issued the
      assertion.  Generally this is the entity that holds the keying
      material used to generate the assertion.  In some use cases
      Issuers may be either OAuth Clients (when assertions are self-
      asserted) or a Security Token Service (STS) (an entity capable of
      issuing, renewing, transforming and validating of security
      tokens).

   Principal  A unique identifier for the subject of the assertion.
      When using assertions for client authentication, the Principal
      SHOULD be the "client_id" of the OAuth client.  When using
      assertions as an authorization grant, the Principal MUST identify
      an authorized accessor for whom the access token is being
      requested (typically the resource owner, or an authorized
      delegate).

   Audience  A URI that identifies the party intended to process the
      assertion.  The audience SHOULD be the URL of the Token Endpoint
      as defined in <a href="#section-3.2">Section 3.2</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].

   Issued At   The time at which the assertion was issued.  While the
      serialization may differ by assertion format, this is always
      expressed in UTC with no time zone component.

   Expires At   The time at which the assertion expires.  While the
      serialization may differ by assertion format, this is always
      expressed in UTC with no time zone component.

   Assertion ID  A nonce or unique identifier for the assertion.  The
      Assertion ID may be used by implementations requiring message de-
      duplication for one-time use assertions.  Any entity that assigns
      an identifier MUST ensure that there is negligible probability
      that that entity or any other entity will accidentally assign the
      same identifier to a different data object.

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  General Assertion Format and Processing Rules</span>

   The following are general format and processing rules for the use of
   assertions in OAuth:




<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   o  The assertion MUST contain an Issuer.  The Issuer MUST identify
      the entity that issued the assertion as recognized by the
      Authorization Server.  If an assertion is self-asserted, the
      Issuer SHOULD be the "client_id".

   o  The assertion SHOULD contain a Principal.  The Principal MUST
      identify an authorized accessor for whom the access token is being
      requested (typically the resource owner, or an authorized
      delegate).  When the client is acting on behalf of itself, the
      Principal SHOULD be the "client_id".

   o  The assertion MUST contain an Audience that identifies the
      Authorization Server as the intended audience.  The Authorization
      Server MUST verify that it is an intended audience for the
      assertion.  The Audience SHOULD be the URL of the Authorization
      Server's Token Endpoint.

   o  The assertion MUST contain an Expires At entity that limits the
      time window during which the assertion can be used.  The
      authorization server MUST verify that the expiration time has not
      passed, subject to allowable clock skew between systems.  The
      authorization server SHOULD reject assertions with an Expires At
      attribute value that is unreasonably far in the future.

   o  The assertion MAY contain an Issued At entity containing the UTC
      time at which the assertion was issued.

   o  The assertion MAY contain an Assertion ID.  An Authorization
      Server MAY dictate that Assertion ID is mandatory.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.  The algorithm
      used to validate the assertion, and the mechanism for designating
      the secret used to generate the assertion, are beyond the scope of
      this specification.


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Specific Assertion Format and Processing Rules</span>

   The following clarifies the format and processing rules defined in
   <a href="#section-4">Section 4</a> and <a href="#section-5">Section 5</a> for a number of common use cases:

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  Client Authentication</span>

   When a client authenticates to a token service using an assertion, it
   SHOULD do so according to <a href="#section-4.1">Section 4.1</a>.  The following format and
   processing rules apply.




<span class="grey">Mortimore, et al.       Expires November 3, 2012                [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   o  The "client_assertion_type" HTTP parameter MUST identify the
      assertion format being used for authentication.

   o  The "client_assertion" HTTP parameter MUST contain the serialized
      assertion in a format indicated by the "client_assertion_type"
      parameter.

   o  The Principal SHOULD be the "client_id".

   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-asserted, the Issuer SHOULD be the "client_id".

   o  The Audience of the assertion MUST identify the Authorization
      Server and SHOULD be the URL of the Token Endpoint.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.

   The following non-normative example demonstrates the use of a client
   authentication using an assertion during an Authorization Code Access
   Token Request as defined in <a href="#section-4.1.3">Section 4.1.3</a> of OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] (with line breaks for display purposes only):
   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   grant_type=authorization_code&amp;
   code=i1WsRn1uB1&amp;
   client_id=s6BhdRkqt3&amp;
   client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
   %3Aclient-assertion-type%3Asaml2-bearer&amp;
   client_assertion=PHNhb...[omitted for brevity]...ZT4

<span class="h3"><a class="selflink" name="section-6.2" href="#section-6.2">6.2</a>.  Client Acting on Behalf of Itself</span>

   When a client is accessing resources on behalf of itself, it SHOULD
   do so in a manner analogous to the Client Credentials flow defined in
   <a href="#section-4.4">Section 4.4</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  This is a special case
   that combines both the authentication and authorization grant usage
   patterns.  In this case, the interactions with the authorization
   server SHOULD be treated as using an assertion for Client
   Authentication according to <a href="#section-4.1">Section 4.1</a>, with the addition of a
   grant_type parameter.  The following format and processing rules
   apply.

   o  The grant_type HTTP request parameter MUST be
      "client_credentials".



<span class="grey">Mortimore, et al.       Expires November 3, 2012               [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   o  The "client_assertion_type" HTTP parameter MUST identify the
      assertion format.

   o  The "client_assertion" HTTP parameter MUST contain the serialized
      assertion as in a format indicated by the "client_assertion_type"
      parameter.

   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-asserted, the Issuer SHOULD be the "client_id".
      If the assertion was issued by a Security Token Service (STS), the
      Issuer SHOULD identify the STS as recognized by the Authorization
      Server.

   o  The Principal SHOULD be the "client_id".

   o  The Audience of the assertion MUST identify the Authorization
      Server and SHOULD be the URL of the Token Endpoint.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.

   The following non-normative example demonstrates the use of a sample
   assertion being used for a Client Credentials Access Token Request as
   defined in <a href="#section-4.4.2">Section 4.4.2</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] (with line
   breaks for display purposes only):
   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   client_id=s6BhdRkqt3&amp;
   grant_type=client_credentials&amp;
   client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
   %3Aclient-assertion-type%3Asaml2-bearer&amp;
   client_assertion=PHNhbW...[omitted for brevity]...ZT

<span class="h3"><a class="selflink" name="section-6.3" href="#section-6.3">6.3</a>.  Client Acting on Behalf of a User</span>

   When a client is accessing resources on behalf of a user, it SHOULD
   be treated as using an assertion as an Authorization Grant according
   to <a href="#section-4.2">Section 4.2</a>.  The following format and processing rules apply.

   o  The grant_type HTTP request parameter MUST indicate the assertion
      format.

   o  The assertion HTTP parameter MUST contain the serialized assertion
      as in a format indicated by the grant_type parameter.




<span class="grey">Mortimore, et al.       Expires November 3, 2012               [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-asserted, the Issuer SHOULD be the "client_id".
      If the assertion was issued by a Security Token Service (STS), the
      Issuer SHOULD identify the STS as recognized by the Authorization
      Server.

   o  The Principal MUST identify an authorized accessor for whom the
      access token is being requested (typically the resource owner, or
      an authorized delegate).

   o  The Audience of the assertion MUST identify the Authorization
      Server and MAY be the URL of the Token Endpoint.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.

   The following non-normative example demonstrates the use of a client
   authenticating using an assertion during an Authorization Code Access
   Token Request as defined in <a href="#section-4.1.3">Section 4.1.3</a> of OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] (with line breaks for display purposes only):
   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   client_id=s6BhdRkqt3&amp;
   grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&amp;
   assertion=PHNhbWxwOl...[omitted for brevity]...ZT

<span class="h3"><a class="selflink" name="section-6.4" href="#section-6.4">6.4</a>.  Client Acting on Behalf of an Anonymous User</span>

   When a client is accessing resources on behalf of an anonymous user,
   the following format and processing rules apply.

   o  The grant_type HTTP request parameter MUST indicate the assertion
      format.

   o  The assertion HTTP parameter MUST contain the serialized assertion
      as in a format indicated by the grant_type parameter.

   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-asserted, the Issuer SHOULD be the "client_id".
      If the assertion was issued by a Security Token Service (STS), the
      Issuer SHOULD identify the STS as recognized by the Authorization
      Server.





<span class="grey">Mortimore, et al.       Expires November 3, 2012               [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   o  The Principal SHOULD indicate to the Authorization Server that the
      client is acting on-behalf of an anonymous user as defined by the
      Authorization Server.  It is implied that authorization is based
      upon additional criteria, such as additional attributes or claims
      provided in the assertion.  For example, a client may present an
      assertion from a trusted issuer asserting that the bearer is over
      18 via an included claim.  In this case, no additional information
      about the user's identity is included yet all the data needed to
      issue an access token is present.

   o  The Audience of the assertion MUST identify the Authorization
      Server and MAY be the URL of the Token Endpoint.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Security Considerations</span>

   Authorization Providers concerned with preventing replay attacks may
   choose to implement using replay detection using a combination of the
   Assertion ID and Issued At/Expires At attributes.  Previously
   processed assertions MAY be de-duped and rejected based on the
   Assertion ID.  The addition of the validity window relieves the
   authorization server from maintaining an infinite state table of
   processed assertion IDs.

   Authorization Servers SHOULD consider the amount of information
   exposed in error responses, and the risk associated with exposing
   details of specific processing errors.  In addition, Authorization
   Servers SHOULD prevent timing attacks related to cryptographic
   processing of the assertion.

   There are no additional security considerations beyond those
   described within OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], Section 11.


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  IANA Considerations</span>

<span class="h3"><a class="selflink" name="section-8.1" href="#section-8.1">8.1</a>.  assertion Parameter Registration</span>

   The following is the parameter registration request, as defined in
   The OAuth Parameters Registry of The OAuth 2.0 Authorization Protocol
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], for the "assertion" parameter:

   o  Parameter name: assertion





<span class="grey">Mortimore, et al.       Expires November 3, 2012               [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   o  Parameter usage location: client authentication, token request

   o  Change controller: IETF

   o  Specification document(s): [[this document]]

<span class="h3"><a class="selflink" name="section-8.2" href="#section-8.2">8.2</a>.  client_assertion Parameter Registration</span>

   The following is the parameter registration request, as defined in
   The OAuth Parameters Registry of The OAuth 2.0 Authorization Protocol
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], for the "client_assertion" parameter:

   o  Parameter name: "client_assertion"

   o  Parameter usage location: client authentication, token request

   o  Change controller: IETF

   o  Specification document(s): [[this document]]

<span class="h3"><a class="selflink" name="section-8.3" href="#section-8.3">8.3</a>.  client_assertion_type Parameter Registration</span>

   The following is the parameter registration request, as defined in
   The OAuth Parameters Registry of The OAuth 2.0 Authorization Protocol
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], for the "client_assertion_type" parameter:

   o  Parameter name: "client_assertion_type"

   o  Parameter usage location: client authentication, token request

   o  Change controller: IETF

   o  Specification document(s): [[this document]]


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-oauth-v2" id="ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]
              Hammer-Lahav, E., Recordon, D., and D. Hardt, "The OAuth
              2.0 Authorization Framework", <a href="./draft-ietf-oauth-v2-26">draft-ietf-oauth-v2-26</a> (work
              in progress), May 2012.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.







<span class="grey">Mortimore, et al.       Expires November 3, 2012               [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Acknowledgements</span>

   The authors wish to thank the following people that have influenced
   or contributed this specification: Paul Madsen, Eric Sachs, Jian Cai,
   Tony Nadalin, the authors of OAuth WRAP, and those in the OAuth
   working group.


<span class="h2"><a class="selflink" name="appendix-B" href="#appendix-B">Appendix B</a>.  Document History</span>

   [[ to be removed by RFC editor before publication as an RFC ]]

   <a href="./draft-ietf-oauth-assertions-03">draft-ietf-oauth-assertions-03</a>

   o  updated reference to <a href="./draft-ietf-oauth-v2">draft-ietf-oauth-v2</a> from -25 to -26

   <a href="./draft-ietf-oauth-assertions-02">draft-ietf-oauth-assertions-02</a>

   o  Added text about limited lifetime ATs and RTs per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08298.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08298.html</a>.

   o  Changed the line breaks in some examples to avoid awkward
      rendering to text format.  Also removed encoded '=' padding from a
      few examples because both known derivative specs, SAML and JWT,
      omit the padding char in serialization/encoding.

   o  Remove <a href="#section-7">section 7</a> on error responses and move that (somewhat
      modified) content into subsections of <a href="#section-4">section 4</a> broken up by
      authn/authz per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08735.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08735.html</a>.

   o  Rework the text about "MUST validate ... in order to establish a
      mapping between ..." per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08872.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08872.html</a>
      and
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08749.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08749.html</a>.

   o  Change "The Principal MUST identify an authorized accessor.  If
      the assertion is self-issued, the Principal SHOULD be the
      client_id" in 6.1 per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08873.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08873.html</a>.

   o  Update reference in 4.1 to point to 2.3 (rather than 3.2) of
      oauth-v2 (rather than self)
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08874.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08874.html</a>.

   o  Move the "<a href="#section-3">Section 3</a> of" out of the xref to hopefully fix the link
      in 4.1 and remove the client_id bullet from 4.2 per



<span class="grey">Mortimore, et al.       Expires November 3, 2012               [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08875.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08875.html</a>.

   o  Add ref to <a href="#section-3.3">Section 3.3</a> of oauth-v2 for scope definition and remove
      some then redundant text per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08890.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08890.html</a>.

   o  Change "The following format and processing rules SHOULD be
      applied" to "The following format and processing rules apply" in
      sections <a href="#section-6">6</a>.x to remove conflicting normative qualification of
      other normative statements per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08892.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08892.html</a>.

   o  Add text the client_id must id the client to 4.1 and remove
      similar text from other places per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08893.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08893.html</a>.

   o  Remove the MUST from the text prior to the HTTP parameter
      definitions per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08920.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08920.html</a>.

   o  Updated examples to use grant_type and client_assertion_type
      values from the OAuth SAML Assertion Profiles spec.


Authors' Addresses

   Chuck Mortimore (editor)
   Salesforce.com

   Email: cmortimore@salesforce.com


   Michael B. Jones
   Microsoft

   Email: mbj@microsoft.com


   Brian Campbell
   Ping Identity Corp.

   Email: brian.d.campbell@gmail.com









<span class="grey">Mortimore, et al.       Expires November 3, 2012               [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft         OAuth 2.0 Assertion Profile              May 2012</span>


   Yaron Y. Goland
   Microsoft

   Email: yarong@microsoft.com















































Mortimore, et al.       Expires November 3, 2012               [Page 17]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
