<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Relation.Replaces" content="draft-mortimore-oauth-assertions" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-assertions" />
<meta name="DC.Date.Issued" content="2012-07-02" />
<meta name="DC.Creator" content="Goland, Yaron" />
<meta name="DC.Creator" content="Campbell, Brian" />
<meta name="DC.Creator" content="Jones, Michael" />
<meta name="DC.Creator" content="Mortimore, Chuck" />
<meta name="DC.Description.Abstract" content="This specification provides a framework for the use of assertions" />
<meta name="DC.Title" content="Assertion Framework for OAuth 2.0" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-assertions-04 - Assertion Framework for OAuth 2.0</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-assertions-04.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-assertions-04.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-assertions-04.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-assertions-04.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-assertions' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-assertions@tools.ietf.org?subject=draft-ietf-oauth-assertions%20" title="Send email to the document authors">Email</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=draft-ietf-oauth-assertions-04.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=draft-ietf-oauth-assertions-04.txt" title="Side-by-side diff">Diff2</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-assertions-04.txt" title="Run an idnits check of this document">Nits</a>] </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: (<a href="./draft-mortimore-oauth-assertions" title="Precursor">draft-mortimore-oauth-assertions</a>)                            
          <a href="./draft-ietf-oauth-assertions-00">00</a> <a href="./draft-ietf-oauth-assertions-01">01</a> <a href="./draft-ietf-oauth-assertions-02">02</a> <a href="./draft-ietf-oauth-assertions-03">03</a> <a href="./draft-ietf-oauth-assertions-04">04</a>                                                </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
OAuth Working Group                                          B. Campbell
Internet-Draft                                                      Ping
Intended status: Standards Track                            C. Mortimore
Expires: January 3, 2013                                      Salesforce
                                                                M. Jones
                                                               Y. Goland
                                                               Microsoft
                                                            July 2, 2012


                   <span class="h1">Assertion Framework for OAuth 2.0</span>
                     <span class="h1">draft-ietf-oauth-assertions-04</span>

Abstract

   This specification provides a framework for the use of assertions
   with OAuth 2.0 in the form of new client authentication mechanism and
   a new authorization grant type.  Mechanisms are specifies for
   transporting assertions during interactions with a token endpoint, as
   well as general processing rules.

   The intent of this specification is to provide a common framework for
   OAuth 2.0 to interwork with other identity systems using assertions,
   and to provide alternative client authentication mechanisms.

   Note that this specification only defines abstract message flows and
   processing rules and that, in order to be implementable, companion
   specifications are necessary to provide the corresponding
   instantiation.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 3, 2013.

Copyright Notice



<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-3">3</a>
   <a href="#section-2">2</a>.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-3">3</a>
   <a href="#section-3">3</a>.  Framework  . . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
   <a href="#section-4">4</a>.  Transporting Assertions  . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
     <a href="#section-4.1">4.1</a>.  Using Assertions as Authorization Grants . . . . . . . . .  <a href="#page-7">7</a>
       <a href="#section-4.1.1">4.1.1</a>.  Error Responses  . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-4.2">4.2</a>.  Using Assertions for Client Authentication . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-4.2.1">4.2.1</a>.  Error Responses  . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
   <a href="#section-5">5</a>.  Assertion Content and Processing . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-5.1">5.1</a>.  Assertion Metamodel  . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-5.2">5.2</a>.  General Assertion Format and Processing Rules  . . . . . . <a href="#page-11">11</a>
   <a href="#section-6">6</a>.  Specific Assertion Format and Processing Rules . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-6.1">6.1</a>.  Client Authentication  . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-6.2">6.2</a>.  Client Acting on Behalf of Itself  . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-6.3">6.3</a>.  Client Acting on Behalf of a User  . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-6.4">6.4</a>.  Client Acting on Behalf of an Anonymous User . . . . . . . <a href="#page-15">15</a>
   <a href="#section-7">7</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-7.1">7.1</a>.  Forged Assertion . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
     <a href="#section-7.2">7.2</a>.  Stolen Assertion . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
     <a href="#section-7.3">7.3</a>.  Unauthorized Disclosure of Personal Information  . . . . . <a href="#page-17">17</a>
   <a href="#section-8">8</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-8.1">8.1</a>.  assertion Parameter Registration . . . . . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-8.2">8.2</a>.  client_assertion Parameter Registration  . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-8.3">8.3</a>.  client_assertion_type Parameter Registration . . . . . . . <a href="#page-18">18</a>
   <a href="#section-9">9</a>.  References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-9.1">9.1</a>.  Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-9.2">9.2</a>.  Informative References . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
   <a href="#appendix-A">Appendix A</a>.  Acknowledgements  . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
   <a href="#appendix-B">Appendix B</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-21">21</a>





<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] is an authorization framework that
   enables a third-party application to obtain limited access to a
   protected HTTP resource.  In OAuth those third-party application are
   called clients and they access protected resources by presenting an
   access token to the HTTP resource.  Access tokens are issued to
   clients by an authorization server with the (sometimes implicit)
   approval of the resource owner.  These access tokens are typically
   obtained by exchanging an authorization grant which represents the
   authorization granted by the resource owner (or by a privileged
   administrator).  Several authorization grant types are defined to
   support a wide range of client types and user experiences.  OAuth
   also provides an extensibility mechanism for defining additional
   grant types which can serve as a bridge between OAuth and other trust
   frameworks.

   This specification provides a general framework for the use of
   assertions as authorization grants with OAuth 2.0.  It also provides
   a framework for assertions to be used for client authentication.  It
   provides generic mechanisms for transporting assertions during
   interactions with an authorization server's token endpoint, as well
   as general rules for the content and processing of those assertions.
   The intent is to provide an alternative client authentication
   mechanism (one that doesn't send client secrets over HTTP), as well
   as facilitate the use of OAuth 2.0 in client-server integration
   scenarios where the end-user may not be present.

   This specification only defines abstract message flows and processing
   rules and that, in order to be implementable, companion
   specifications are necessary to provide the corresponding
   instantiation.

   Note: The use of assertions for client authentication is orthogonal
   and separable from using assertions as an authorization grant and can
   be used either in combination or in isolation.


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Terminology</span>

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>] .

   Throughout this document, values are quoted to indicate that they are
   to be taken literally.  When using these values in protocol messages,
   the quotes must not be used as part of the value.




<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Framework</span>

   An assertion is a package of information that allows identity and
   security information to be shared across security domains.  An
   assertion typically contains information about a subject or
   principal, information about who issued the assertion and when was it
   issued, as well as conditions under which the assertion is to be
   considered valid like when and where it can be used.

   The entity that creates and signs the assertion is typically known as
   the 'Issuer' and the entity that consumes the assertion and relies on
   its information is known as the 'Relying Party.'  In the context of
   this document, the authorization server acts as a relying party.

   Assertions used in the protocol exchanges defined by this
   specification MUST always be protected against tampering using a
   digital signature or a keyed message digest applied by the issuer.
   An assertion MAY additionally be encrypted to prevent unauthorized
   parties from inspecting the content.

   Although this document does not define the processes by which the
   client obtains the assertion (prior to sending it to the
   authorization server), there are two common patterns that are worth
   mentioning.

   In the first pattern, depicted in Figure 1, the client obtains an
   assertion from a third party entity capable of issuing, renewing,
   transforming and validating security tokens.  Typically such an
   entity is known as a 'Security Token Service' or just 'Token Service'
   and a trust relationship (usually manifested in the exchange of some
   kind of keying material) exists between the token service and the
   relying party.  The token service is the assertion issuer and its
   role is to fulfill requests from clients, who present various
   credentials, and mint assertions as requested, fill them with
   verified information, and sign them.  WS-Trust [<a href="#ref-OASIS.WT-Trust">OASIS.WT-Trust</a>] is
   one available standard for requesting security tokens (assertions).















<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


     Relying
     Party                     Client                   Token Service
       |                          |                         |
       |                          |  1) Request Assertion   |
       |                          |------------------------&gt;|
       |                          |                         |
       |                          |  2) Assertion           |
       |                          |&lt;------------------------|
       |    3) Assertion          |                         |
       |&lt;-------------------------|                         |
       |                          |                         |
       |    4) OK or Failure      |                         |
       |-------------------------&gt;|                         |
       |                          |                         |
       |                          |                         |

                  Figure 1: Third Party created Assertion

   In Figure 2 the second pattern is depicted where the client creates
   assertions locally.  In order to sign the assertions it has to obtain
   keying material, either a symmetric key or an asymmetric key pair,
   out-of-band or though some other process.

   Although assertions are usually used to convey identity and security
   information, self-created assertions can also serve a different
   purpose.  They can be used to demonstrate knowledge of some secret,
   such as a client secret, without actually communicating the secret
   directly in the transaction.  In that case, additional information
   included in the assertion by the client itself will be of limited
   value to the relying party and, for this reason, only a bare minimum
   is included in such an assertion, such as issuing and conditions
   information.



















<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


     Relying
     Party                     Client
       |                          |
       |                          | 1) Create
       |                          |    Assertion
       |                          |--------------+
       |                          |              |
       |                          | 2) Assertion |
       |                          |&lt;-------------+
       |    3) Assertion          |
       |&lt;-------------------------|
       |                          |
       |    4) OK or Failure      |
       |-------------------------&gt;|
       |                          |
       |                          |

                     Figure 2: Self-Created Assertion

   Deployments need to determine the best possible variant based on the
   required level of security, trust relationship between the entities,
   and other factors.

   From the perspective of what must be done by the entity presenting
   the assertion, there are two general types of assertions:

   1.  Bearer assertions.  Any entity in possession of a bearer
       assertion (e.g. the bearer) can use it to get access to the
       associated resources (without demonstrating possession of a
       cryptographic key).  To prevent misuse, bearer assertions need to
       be protected from disclosure in storage and in transport.  A
       secure communication channel is required between all entities to
       avoid leaking the assertion to unauthorized parties.

   2.  Holder-of-key assertions.  In order to access to the associated
       resources, the entity presenting the assertion must somehow
       demonstrate possession of additional cryptographic material.  The
       token service thereby binds a key identifier to the assertion and
       the client has to demonstrate to the relying party that it knows
       the key corresponding to that identifier when presenting the
       assertion.  This mechanism provides additional security
       properties.

   The protocol parameters and processing rules defined in this document
   are intended to support a client presenting a bearer assertion to an
   authorization server.  The use of holder-of-key assertions are not
   precluded by this document but additional protocol details would need
   to be specified.



<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Transporting Assertions</span>

   This section defines HTTP parameters for transporting assertions
   during interactions with a token endpoint of an OAuth authorization
   server.  Because requests to the token endpoint result in the
   transmission of clear-text credentials (in both the HTTP request and
   response), all requests to the token endpoint MUST require the use of
   TLS as mandated in <a href="#section-3.2">Section 3.2</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Using Assertions as Authorization Grants</span>

   This section defines the use of assertions as authorization grants
   based on the definition provided in <a href="#section-4.5">Section 4.5</a> of OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  When using assertions as authorization grants,
   the client includes the assertion and related information using the
   following HTTP request parameters:

   grant_type  REQUIRED.  The format of the assertion as defined by the
      authorization server.  The value MUST be an absolute URI.

   assertion  REQUIRED.  The assertion being used as an authorization
      grant.  Specific serialization of the assertion is defined by
      profile documents.  The serialization MUST be encoded for
      transport within HTTP forms.  It is RECOMMENDED that base64url be
      used.

   scope  OPTIONAL.  The requested scope as described in <a href="#section-3.3">Section 3.3</a> of
      OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  When exchanging assertions for
      access tokens, the authorization for the token has been previously
      granted through some out-of-band mechanism.  As such, the
      requested scope MUST be equal or lesser than the scope originally
      granted to the authorized accessor.  If the scope parameter and/or
      value is omitted, the scope MUST be treated as equal to the scope
      originally granted to the authorized accessor.  The Authorization
      Server MUST limit the scope of the issued access token to be equal
      or lesser than the scope originally granted to the authorized
      accessor.

   The following non-normative example demonstrates an assertion being
   used as an authorization grant (with line breaks for display purposes
   only):
   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   client_id=s6BhdRkqt3&amp;
   grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&amp;
   assertion=PHNhbWxwOl...[omitted for brevity]...ZT4



<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   An assertion used in this context is generally a short lived
   representation of the authorization grant and authorization servers
   SHOULD NOT issue access tokens with a lifetime that exceeds the
   validity period of the assertion by a significant period.  In
   practice, that will usually mean that refresh tokens are not issued
   in response to assertion grant requests and access tokens will be
   issued with a reasonably short lifetime.  Clients can refresh an
   expired access token by requesting a new one using the same
   assertion, if it is still valid, or with a new assertion.

   An IEFT URN for use as the "grant_type" value can be requested using
   the template in An IETF URN Sub-Namespace for OAuth
   [<a href="#ref-I-D.ietf-oauth-urn-sub-ns">I-D.ietf-oauth-urn-sub-ns</a>].  A URN of the from
   urn:ietf:params:oauth:grant_type:* is suggested.

<span class="h4"><a class="selflink" name="section-4.1.1" href="#section-4.1.1">4.1.1</a>.  Error Responses</span>

   If an assertion is not valid or has expired, the Authorization Server
   MUST construct an error response as defined in OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  The value of the "error" parameter MUST be the
   "invalid_grant" error code.  The authorization server MAY include
   additional information regarding the reasons the assertion was
   considered invalid using the "error_description" or "error_uri"
   parameters.

   For example:
   HTTP/1.1 400 Bad Request
   Content-Type: application/json
   Cache-Control: no-store

   {
     "error":"invalid_grant",
     "error_description":"Audience validation failed"
   }

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Using Assertions for Client Authentication</span>

   The following section defines the use of assertions as client
   credentials as an extension of <a href="#section-2.3">Section 2.3</a> of OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  When using assertions as client credentials,
   the client includes the assertion and related information using the
   following HTTP request parameters:

   client_id  OPTIONAL.  The client identifier as described in <a href="#section-2.2">Section</a>
      <a href="#section-2.2">2.2</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  When present, the
      "client_id" MUST identify the client to the authorization server.





<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   client_assertion_type  REQUIRED.  The format of the assertion as
      defined by the authorization server.  The value MUST be an
      absolute URI.

   client_assertion  REQUIRED.  The assertion being used to authenticate
      the client.  Specific serialization of the assertion is defined by
      profile documents.  The serialization MUST be encoded for
      transport within HTTP forms.  It is RECOMMENDED that base64url be
      used.

   The following non-normative example demonstrates a client
   authenticating using an assertion during an Authorization Token
   Request as defined in <a href="#section-4.1.3">Section 4.1.3</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]
   (with line breaks for display purposes only):

   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   grant_type=authorization_code&amp;
   code=i1WsRn1uB1&amp;
   client_id=s6BhdRkqt3&amp;
   client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
   %3Aclient-assertion-type%3Asaml2-bearer&amp;
   client_assertion=PHNhbW...[omitted for brevity]...ZT

   Token endpoints can differentiate between assertion based credentials
   and other client credential types by looking for the presence of the
   "client_assertion" and "client_assertion_type" parameters, which will
   only be present when using assertions for client authentication.

   An IEFT URN for use as the "client_assertion_type" value may be
   requested using the template in An IETF URN Sub-Namespace for OAuth
   [<a href="#ref-I-D.ietf-oauth-urn-sub-ns">I-D.ietf-oauth-urn-sub-ns</a>].  A URN of the from
   urn:ietf:params:oauth:client-assertion-type:* is suggested.

<span class="h4"><a class="selflink" name="section-4.2.1" href="#section-4.2.1">4.2.1</a>.  Error Responses</span>

   If an assertion is invalid for any reason or if more than one client
   authentication mechanism is used, the Authorization Server MUST
   construct an error response as defined in OAuth 2.0
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  The value of the "error" parameter MUST be the
   "invalid_client" error code.  The authorization server MAY include
   additional information regarding the reasons the client assertion was
   considered invalid using the "error_description" or "error_uri"
   parameters.

   For example:



<span class="grey">Campbell, et al.         Expires January 3, 2013                [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   HTTP/1.1 400 Bad Request
   Content-Type: application/json
   Cache-Control: no-store

   {
     "error":"invalid_client"
     "error_description":"assertion has expired"
   }


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Assertion Content and Processing</span>

   This section provides a general content and processing model for the
   use of assertions in OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  Assertion Metamodel</span>

   The following are entities and metadata involved in the issuance,
   exchange and processing of assertions in OAuth 2.0.  These are
   general terms, abstract from any particular assertion format.
   Mappings of these terms into specific representations are provided by
   profiles of this specification.

   Issuer  The unique identifier for the entity that issued the
      assertion.  Generally this is the entity that holds the keying
      material used to generate the assertion.  The issuer may be either
      an OAuth client (when assertions are self-created) or a third
      party token service.

   Principal  A unique identifier for the subject of the assertion.
      When using assertions for client authentication, the Principal
      SHOULD be the "client_id" of the OAuth client.  When using
      assertions as an authorization grant, the Principal MUST identify
      an authorized accessor for whom the access token is being
      requested (typically the resource owner, or an authorized
      delegate).

   Audience  A URI that identifies the party intended to process the
      assertion.  The audience SHOULD be the URL of the Token Endpoint
      as defined in <a href="#section-3.2">Section 3.2</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].

   Issued At   The time at which the assertion was issued.  While the
      serialization may differ by assertion format, this is always
      expressed in UTC with no time zone component.







<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   Expires At   The time at which the assertion expires.  While the
      serialization may differ by assertion format, this is always
      expressed in UTC with no time zone component.

   Assertion ID  A nonce or unique identifier for the assertion.  The
      Assertion ID may be used by implementations requiring message de-
      duplication for one-time use assertions.  Any entity that assigns
      an identifier MUST ensure that there is negligible probability
      that that entity or any other entity will accidentally assign the
      same identifier to a different data object.

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  General Assertion Format and Processing Rules</span>

   The following are general format and processing rules for the use of
   assertions in OAuth:

   o  The assertion MUST contain an Issuer.  The Issuer MUST identify
      the entity that issued the assertion as recognized by the
      Authorization Server.  If an assertion is self-asserted, the
      Issuer SHOULD be the "client_id".

   o  The assertion SHOULD contain a Principal.  The Principal MUST
      identify an authorized accessor for whom the access token is being
      requested (typically the resource owner, or an authorized
      delegate).  When the client is acting on behalf of itself, the
      Principal SHOULD be the "client_id".

   o  The assertion MUST contain an Audience that identifies the
      Authorization Server as the intended audience.  The Authorization
      Server MUST verify that it is an intended audience for the
      assertion.  The Audience SHOULD be the URL of the Authorization
      Server's Token Endpoint.

   o  The assertion MUST contain an Expires At entity that limits the
      time window during which the assertion can be used.  The
      authorization server MUST verify that the expiration time has not
      passed, subject to allowable clock skew between systems.  The
      authorization server SHOULD reject assertions with an Expires At
      attribute value that is unreasonably far in the future.

   o  The assertion MAY contain an Issued At entity containing the UTC
      time at which the assertion was issued.

   o  The assertion MAY contain an Assertion ID.  An Authorization
      Server MAY dictate that Assertion ID is mandatory.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.  The algorithm



<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


      used to validate the assertion, and the mechanism for designating
      the secret used to generate the assertion, are beyond the scope of
      this specification.


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Specific Assertion Format and Processing Rules</span>

   The following clarifies the format and processing rules defined in
   <a href="#section-4">Section 4</a> and <a href="#section-5">Section 5</a> for a number of common use cases:

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  Client Authentication</span>

   When a client uses an assertion for authentication it SHOULD do so
   according to <a href="#section-4.2">Section 4.2</a>.  The following format and processing rules
   apply.

   o  The "client_assertion_type" HTTP parameter MUST identify the
      assertion format being used for authentication.

   o  The "client_assertion" HTTP parameter MUST contain the serialized
      assertion in a format indicated by the "client_assertion_type"
      parameter.

   o  The Principal SHOULD be the "client_id".

   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-created, the Issuer SHOULD be the "client_id".

   o  The Audience of the assertion MUST identify the Authorization
      Server and SHOULD be the URL of the Token Endpoint.

   o  The Authorization Server MUST verify the assertion's signature or
      keyed message digest in order to determine the validity of the
      issuer and the content of the assertion.

   The following non-normative example demonstrates the use of a client
   authentication using an assertion during an Access Token Request as
   defined in <a href="#section-4.1.3">Section 4.1.3</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] (with line
   breaks for display purposes only):











<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   grant_type=authorization_code&amp;
   code=i1WsRn1uB1&amp;
   client_id=s6BhdRkqt3&amp;
   client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
   %3Aclient-assertion-type%3Asaml2-bearer&amp;
   client_assertion=PHNhb...[omitted for brevity]...ZT4

<span class="h3"><a class="selflink" name="section-6.2" href="#section-6.2">6.2</a>.  Client Acting on Behalf of Itself</span>

   When a client is accessing resources on behalf of itself, it SHOULD
   do so in a manner analogous to the Client Credentials flow defined in
   <a href="#section-4.4">Section 4.4</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>].  This is a special case
   that combines both the authentication and authorization grant usage
   patterns.  In this case, the interactions with the authorization
   server SHOULD be treated as using an assertion for Client
   Authentication according to <a href="#section-4.2">Section 4.2</a>, with the addition of a
   grant_type parameter.  The following format and processing rules
   apply.

   o  The grant_type HTTP request parameter MUST be
      "client_credentials".

   o  The "client_assertion_type" HTTP parameter MUST identify the
      assertion format.

   o  The "client_assertion" HTTP parameter MUST contain the serialized
      assertion as in a format indicated by the "client_assertion_type"
      parameter.

   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-created, the Issuer SHOULD be the "client_id".
      If the assertion was issued by a Security Token Service (STS), the
      Issuer SHOULD identify the STS as recognized by the Authorization
      Server.

   o  The Principal SHOULD be the "client_id".

   o  The Audience of the assertion MUST identify the Authorization
      Server and SHOULD be the URL of the Token Endpoint.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.




<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   The following non-normative example demonstrates the use of a an
   assertion being used for a Client Credentials Access Token Request as
   defined in <a href="#section-4.4.2">Section 4.4.2</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>] (with line
   breaks for display purposes only):
   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   client_id=s6BhdRkqt3&amp;
   grant_type=client_credentials&amp;
   client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
   %3Aclient-assertion-type%3Asaml2-bearer&amp;
   client_assertion=PHNhbW...[omitted for brevity]...ZT

<span class="h3"><a class="selflink" name="section-6.3" href="#section-6.3">6.3</a>.  Client Acting on Behalf of a User</span>

   When a client is accessing resources on behalf of a user, it SHOULD
   be treated as using an assertion as an Authorization Grant according
   to <a href="#section-4.1">Section 4.1</a>.  The following format and processing rules apply.

   o  The grant_type HTTP request parameter MUST indicate the assertion
      format.

   o  The assertion HTTP parameter MUST contain the serialized assertion
      as in a format indicated by the grant_type parameter.

   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-issued, the Issuer SHOULD be the "client_id".
      If the assertion was issued by a Security Token Service (STS), the
      Issuer SHOULD identify the STS as recognized by the Authorization
      Server.

   o  The Principal MUST identify an authorized accessor for whom the
      access token is being requested (typically the resource owner, or
      an authorized delegate).

   o  The Audience of the assertion MUST identify the Authorization
      Server and MAY be the URL of the Token Endpoint.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.

   The following non-normative example demonstrates a client presenting
   as assertion during an Authorization Grant during an Access Token
   Request as defined in <a href="#section-4.1.3">Section 4.1.3</a> of OAuth 2.0 [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]
   (with line breaks for display purposes only):




<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   POST /token HTTP/1.1
   Host: server.example.com
   Content-Type: application/x-www-form-urlencoded

   client_id=s6BhdRkqt3&amp;
   grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&amp;
   assertion=PHNhbWxwOl...[omitted for brevity]...ZT

<span class="h3"><a class="selflink" name="section-6.4" href="#section-6.4">6.4</a>.  Client Acting on Behalf of an Anonymous User</span>

   When a client is accessing resources on behalf of an anonymous user,
   the following format and processing rules apply.

   o  The grant_type HTTP request parameter MUST indicate the assertion
      format.

   o  The assertion HTTP parameter MUST contain the serialized assertion
      as in a format indicated by the grant_type parameter.

   o  The Issuer of the assertion MUST identify the entity that issued
      the assertion as recognized by the Authorization Server.  If the
      assertion is self-asserted, the Issuer SHOULD be the "client_id".
      If the assertion was issued by a Security Token Service (STS), the
      Issuer SHOULD identify the STS as recognized by the Authorization
      Server.

   o  The Principal SHOULD indicate to the Authorization Server that the
      client is acting on-behalf of an anonymous user as defined by the
      Authorization Server.  It is implied that authorization is based
      upon additional criteria, such as additional attributes or claims
      provided in the assertion.  For example, a client may present an
      assertion from a trusted issuer asserting that the bearer is over
      18 via an included claim.  In this case, no additional information
      about the user's identity is included yet all the data needed to
      issue an access token is present.

   o  The Audience of the assertion MUST identify the Authorization
      Server and MAY be the URL of the Token Endpoint.

   o  The Authorization Server MUST validate the assertion's signature
      in order to verify the Issuer of the assertion.


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Security Considerations</span>

   This section discusses security considerations that apply when using
   assertions with OAuth 2.0 as proposed in this document.  As described
   in <a href="#section-3">Section 3</a> there are two different ways to obtain assertions,



<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   either as self-created or obtained from a third party token service.
   While the actual interactions for obtaining an assertion are outside
   the scope of this document, the details are important from a security
   perspective.  <a href="#section-3">Section 3</a> discusses the high level architectural
   aspects and many of the security considerations discussed in this
   section are applicable to both the OAuth exchange as well as the
   client obtaining the assertion.

   The remainder of this section focuses on the exchanges that concerns
   presenting an assertion for client authentication and for the
   authorization grant.

<span class="h3"><a class="selflink" name="section-7.1" href="#section-7.1">7.1</a>.  Forged Assertion</span>

   Threat:

      An adversary could forge or alter an assertion in order to obtain
      an access token (in case of the authorization grant) or to
      impersonate a client (in case of the client authentication
      mechanism).

   Countermeasures:

      To avoid this kind of attack, the entities must assure that proper
      mechanisms for protecting the integrity of the assertion are
      employed.  This includes digitally signing the assertion by the
      issuer or computing a keyed message digest over the assertion.

<span class="h3"><a class="selflink" name="section-7.2" href="#section-7.2">7.2</a>.  Stolen Assertion</span>

   Threat:

      An adversary may be able obtain an assertion (e.g., by
      eavesdropping) and to then re-use it (replay it) at a later point
      in time.

   Countermeasures:

      The primary mitigation for this threat is the use of a secure
      communication channel with server authentication for all network
      exchanges.

      An assertion may also contain several elements to prevent replay
      attacks.  There is, however, a clear tradeoff between re-using an
      assertion for multiple exchanges and obtaining and creating new
      fresh assertions.

      Authorization Servers and Resource Servers may use a combination



<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


      of the Assertion ID and Issued At/Expires At attributes for replay
      protection.  Previously processed assertions may be rejected based
      on the Assertion ID.  The addition of the validity window relieves
      the authorization server from maintaining an infinite state table
      of processed assertion IDs.

<span class="h3"><a class="selflink" name="section-7.3" href="#section-7.3">7.3</a>.  Unauthorized Disclosure of Personal Information</span>

   Threat:

      The ability for other entities to obtain additional information
      about an individual, such as authentication information, role in
      an organization or other authorization relevant information raises
      privacy concerns.

   Countermeasures:

      To address the threats two cases need to be differentiated.

      First, a third party that did not participate in any of the
      exchange is prevented from eavesdropping on the content of the
      assertion by employing confidentiality protection of the HTTP
      signaling exchange using TLS.  This ensures that an eavesdropper
      on the wire is unable to obtain information.  However, this does
      not prevent legitimate protocol entities from obtaining
      information from an assertion they may not have been allowed to
      obtain.  Some assertion formats allow for the assertion to be
      encrypted to prevent unauthorized parties from inspecting the
      content.

      Second, an Authorization Server may obtain an assertion that was
      created by a third party token service and that token service may
      have placed attributes into the assertion.  To mitigate potential
      privacy problems prior consent from the resource owner has to be
      obtained and OAuth itself provides such capabilities but this
      consent approval may be obtained using other identity management
      protocols or in an out-of-band fashion.

      For the cases where a third party token service creates assertions
      for usage with client authentication privacy concerns are
      typically lower since many of these clients are Web servers rather
      than individual devices operated by humans.  If the assertions are
      used for client authentication of devices or software that can be
      closely linked to end users then privacy protection safeguards
      need to be taken into consideration.

      Further guidance on privacy friendly protocol design can be found
      in [<a href="#ref-I-D.iab-privacy-considerations">I-D.iab-privacy-considerations</a>].



<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  IANA Considerations</span>

<span class="h3"><a class="selflink" name="section-8.1" href="#section-8.1">8.1</a>.  assertion Parameter Registration</span>

   The following is the parameter registration request, as defined in
   The OAuth Parameters Registry of The OAuth 2.0 Authorization Protocol
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], for the "assertion" parameter:

   o  Parameter name: assertion

   o  Parameter usage location: token request

   o  Change controller: IETF

   o  Specification document(s): [[this document]]

<span class="h3"><a class="selflink" name="section-8.2" href="#section-8.2">8.2</a>.  client_assertion Parameter Registration</span>

   The following is the parameter registration request, as defined in
   The OAuth Parameters Registry of The OAuth 2.0 Authorization Protocol
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], for the "client_assertion" parameter:

   o  Parameter name: "client_assertion"

   o  Parameter usage location: token request

   o  Change controller: IETF

   o  Specification document(s): [[this document]]

<span class="h3"><a class="selflink" name="section-8.3" href="#section-8.3">8.3</a>.  client_assertion_type Parameter Registration</span>

   The following is the parameter registration request, as defined in
   The OAuth Parameters Registry of The OAuth 2.0 Authorization Protocol
   [<a href="#ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>], for the "client_assertion_type" parameter:

   o  Parameter name: "client_assertion_type"

   o  Parameter usage location: token request

   o  Change controller: IETF

   o  Specification document(s): [[this document]]


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  References</span>





<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


<span class="h3"><a class="selflink" name="section-9.1" href="#section-9.1">9.1</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-oauth-v2" id="ref-I-D.ietf-oauth-v2">I-D.ietf-oauth-v2</a>]
              Hammer-Lahav, E., Recordon, D., and D. Hardt, "The OAuth
              2.0 Authorization Framework", <a href="./draft-ietf-oauth-v2-28">draft-ietf-oauth-v2-28</a> (work
              in progress), June 2012.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

<span class="h3"><a class="selflink" name="section-9.2" href="#section-9.2">9.2</a>.  Informative References</span>

   [<a name="ref-I-D.iab-privacy-considerations" id="ref-I-D.iab-privacy-considerations">I-D.iab-privacy-considerations</a>]
              Cooper, A., Tschofenig, H., Aboba, B., Peterson, J., and
              J. Morris, "Privacy Considerations for Internet
              Protocols", <a href="./draft-iab-privacy-considerations-02">draft-iab-privacy-considerations-02</a> (work in
              progress), March 2012.

   [<a name="ref-I-D.ietf-oauth-urn-sub-ns" id="ref-I-D.ietf-oauth-urn-sub-ns">I-D.ietf-oauth-urn-sub-ns</a>]
              Campbell, B. and H. Tschofenig, "An IETF URN Sub-Namespace
              for OAuth", <a href="./draft-ietf-oauth-urn-sub-ns-05">draft-ietf-oauth-urn-sub-ns-05</a> (work in
              progress), June 2012.

   [<a name="ref-OASIS.WT-Trust" id="ref-OASIS.WT-Trust">OASIS.WT-Trust</a>]
              Nadalin, A., Ed., Goodner, M., Ed., Gudgin, M., Ed.,
              Barbir, A., Ed., and H. Granqvist, Ed., "WS-Trust",
              Feb 2009.


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Acknowledgements</span>

   The authors wish to thank the following people that have influenced
   or contributed this specification: Paul Madsen, Eric Sachs, Jian Cai,
   Tony Nadalin, Hannes Tschofenig the authors of OAuth WRAP, and those
   in the OAuth working group.


<span class="h2"><a class="selflink" name="appendix-B" href="#appendix-B">Appendix B</a>.  Document History</span>

   [[ to be removed by RFC editor before publication as an RFC ]]

   <a href="./draft-ietf-oauth-assertions-04">draft-ietf-oauth-assertions-04</a>

   o  Updated document to incorporate the review comments from the
      shepherd - thread and alternative draft at
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg09437.html">http://www.ietf.org/mail-archive/web/oauth/current/msg09437.html</a>





<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


   o  Added reference to <a href="./draft-ietf-oauth-urn-sub-ns">draft-ietf-oauth-urn-sub-ns</a> and include
      suggestions on
      urn:ietf:params:oauth:[grant-type|client-assertion-type]:* URNs

   <a href="./draft-ietf-oauth-assertions-03">draft-ietf-oauth-assertions-03</a>

   o  updated reference to <a href="./draft-ietf-oauth-v2">draft-ietf-oauth-v2</a> from -25 to -26

   <a href="./draft-ietf-oauth-assertions-02">draft-ietf-oauth-assertions-02</a>

   o  Added text about limited lifetime ATs and RTs per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08298.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08298.html</a>.

   o  Changed the line breaks in some examples to avoid awkward
      rendering to text format.  Also removed encoded '=' padding from a
      few examples because both known derivative specs, SAML and JWT,
      omit the padding char in serialization/encoding.

   o  Remove <a href="#section-7">section 7</a> on error responses and move that (somewhat
      modified) content into subsections of <a href="#section-4">section 4</a> broken up by
      authn/authz per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08735.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08735.html</a>.

   o  Rework the text about "MUST validate ... in order to establish a
      mapping between ..." per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08872.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08872.html</a>
      and
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08749.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08749.html</a>.

   o  Change "The Principal MUST identify an authorized accessor.  If
      the assertion is self-issued, the Principal SHOULD be the
      client_id" in 6.1 per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08873.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08873.html</a>.

   o  Update reference in 4.1 to point to 2.3 (rather than 3.2) of
      oauth-v2 (rather than self)
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08874.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08874.html</a>.

   o  Move the "<a href="#section-3">Section 3</a> of" out of the xref to hopefully fix the link
      in 4.1 and remove the client_id bullet from 4.2 per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08875.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08875.html</a>.

   o  Add ref to <a href="#section-3.3">Section 3.3</a> of oauth-v2 for scope definition and remove
      some then redundant text per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08890.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08890.html</a>.

   o  Change "The following format and processing rules SHOULD be
      applied" to "The following format and processing rules apply" in



<span class="grey">Campbell, et al.         Expires January 3, 2013               [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft      Assertion Framework for OAuth 2.0          July 2012</span>


      sections <a href="#section-6">6</a>.x to remove conflicting normative qualification of
      other normative statements per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08892.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08892.html</a>.

   o  Add text the client_id must id the client to 4.1 and remove
      similar text from other places per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08893.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08893.html</a>.

   o  Remove the MUST from the text prior to the HTTP parameter
      definitions per
      <a href="http://www.ietf.org/mail-archive/web/oauth/current/msg08920.html">http://www.ietf.org/mail-archive/web/oauth/current/msg08920.html</a>.

   o  Updated examples to use grant_type and client_assertion_type
      values from the OAuth SAML Assertion Profiles spec.


Authors' Addresses

   Brian Campbell
   Ping Identity Corp.

   Email: brian.d.campbell@gmail.com


   Chuck Mortimore
   Salesforce.com

   Email: cmortimore@salesforce.com


   Michael B. Jones
   Microsoft

   Email: mbj@microsoft.com


   Yaron Y. Goland
   Microsoft

   Email: yarong@microsoft.com











Campbell, et al.         Expires January 3, 2013               [Page 21]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
