<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-jose-json-web-algorithms" />
<meta name="DC.Description.Abstract" content="The JSON Web Algorithms (JWA) specification enumerates cryptographic\nalgorithms and identifiers to be used with the JSON Web Signature\n(JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK)\nspecifications." />
<meta name="DC.Creator" content="Michael B. Jones &lt;mbj@microsoft.com&gt;" />
<meta name="DC.Date.Issued" content="2012-07-30" />
<meta name="DC.Title" content="JSON Web Algorithms (JWA)" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-jose-json-web-algorithms-04 - JSON Web Algorithms (JWA)</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-jose-json-web-algorithms-04.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-jose-json-web-algorithms-04.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-jose-json-web-algorithms-04.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-jose-json-web-algorithms-04.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-jose-json-web-algorithms' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/jose" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-jose-json-web-algorithms@tools.ietf.org?subject=draft-ietf-jose-json-web-algorithms%20" title="Send email to the document authors">Email</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=draft-ietf-jose-json-web-algorithms-04.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=draft-ietf-jose-json-web-algorithms-04.txt" title="Side-by-side diff">Diff2</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-jose-json-web-algorithms-04.txt" title="Run an idnits check of this document">Nits</a>] </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-ietf-jose-json-web-algorithms-00">00</a> <a href="./draft-ietf-jose-json-web-algorithms-01">01</a> <a href="./draft-ietf-jose-json-web-algorithms-02">02</a> <a href="./draft-ietf-jose-json-web-algorithms-03">03</a> <a href="./draft-ietf-jose-json-web-algorithms-04">04</a> <a href="./draft-ietf-jose-json-web-algorithms-05">05</a>                                             </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
JOSE Working Group                                              M. Jones
Internet-Draft                                                 Microsoft
Intended status: Standards Track                           July 16, 2012
Expires: January 17, 2013


                       <span class="h1">JSON Web Algorithms (JWA)</span>
                 <span class="h1">draft-ietf-jose-json-web-algorithms-04</span>

Abstract

   The JSON Web Algorithms (JWA) specification enumerates cryptographic
   algorithms and identifiers to be used with the JSON Web Signature
   (JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK)
   specifications.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 17, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




<span class="grey">Jones                   Expires January 17, 2013                [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-1.1">1.1</a>.  Notational Conventions . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
   <a href="#section-2">2</a>.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-2.1">2.1</a>.  Terms Incorporated from the JWS Specification  . . . . . .  <a href="#page-4">4</a>
     <a href="#section-2.2">2.2</a>.  Terms Incorporated from the JWE Specification  . . . . . .  <a href="#page-5">5</a>
     <a href="#section-2.3">2.3</a>.  Terms Incorporated from the JWK Specification  . . . . . .  <a href="#page-6">6</a>
     <a href="#section-2.4">2.4</a>.  Defined Terms  . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
   <a href="#section-3">3</a>.  Cryptographic Algorithms for JWS . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
     <a href="#section-3.1">3.1</a>.  "alg" (Algorithm) Header Parameter Values for JWS  . . . .  <a href="#page-7">7</a>
     <a href="#section-3.2">3.2</a>.  MAC with HMAC SHA-256, HMAC SHA-384, or HMAC SHA-512 . . .  <a href="#page-8">8</a>
     3.3.  Digital Signature with RSA SHA-256, RSA SHA-384, or
           RSA SHA-512  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
     3.4.  Digital Signature with ECDSA P-256 SHA-256, ECDSA
           P-384 SHA-384, or ECDSA P-521 SHA-512  . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-3.5">3.5</a>.  Using the Algorithm "none" . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     3.6.  Additional Digital Signature/MAC Algorithms and
           Parameters . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
   <a href="#section-4">4</a>.  Cryptographic Algorithms for JWE . . . . . . . . . . . . . . . <a href="#page-12">12</a>
     <a href="#section-4.1">4.1</a>.  "alg" (Algorithm) Header Parameter Values for JWE  . . . . <a href="#page-12">12</a>
     4.2.  "enc" (Encryption Method) Header Parameter Values for
           JWE  . . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     4.3.  "int" (Integrity Algorithm) Header Parameter Values
           for JWE  . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     4.4.  "kdf" (Key Derivation Function) Header Parameter
           Values for JWE . . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
     <a href="#section-4.5">4.5</a>.  Key Encryption with RSAES-PKCS1-V1_5 . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-4.6">4.6</a>.  Key Encryption with RSAES OAEP . . . . . . . . . . . . . . <a href="#page-15">15</a>
     4.7.  Key Agreement with Elliptic Curve Diffie-Hellman
           Ephemeral Static (ECDH-ES) . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-4.8">4.8</a>.  Key Encryption with AES Key Wrap . . . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-4.9">4.9</a>.  Plaintext Encryption with AES CBC Mode . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-4.10">4.10</a>. Plaintext Encryption with AES GCM  . . . . . . . . . . . . <a href="#page-16">16</a>
     4.11. Integrity Calculation with HMAC SHA-256, HMAC SHA-384,
           or HMAC SHA-512  . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
     4.12. Key Derivation with Concat KDF and SHA-256, SHA-384,
           or SHA-512 . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-16">16</a>
     <a href="#section-4.13">4.13</a>. Additional Encryption Algorithms and Parameters  . . . . . <a href="#page-17">17</a>
   <a href="#section-5">5</a>.  Cryptographic Algorithms for JWK . . . . . . . . . . . . . . . <a href="#page-18">18</a>
     <a href="#section-5.1">5.1</a>.  "alg" (Algorithm Family) Parameter Values for JWK  . . . . <a href="#page-18">18</a>
     <a href="#section-5.2">5.2</a>.  JWK Parameters for Elliptic Curve Keys . . . . . . . . . . <a href="#page-18">18</a>
       <a href="#section-5.2.1">5.2.1</a>.  "crv" (Curve) Parameter  . . . . . . . . . . . . . . . <a href="#page-18">18</a>
       <a href="#section-5.2.2">5.2.2</a>.  "x" (X Coordinate) Parameter . . . . . . . . . . . . . <a href="#page-19">19</a>
       <a href="#section-5.2.3">5.2.3</a>.  "y" (Y Coordinate) Parameter . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-5.3">5.3</a>.  JWK Parameters for RSA Keys  . . . . . . . . . . . . . . . <a href="#page-19">19</a>
       <a href="#section-5.3.1">5.3.1</a>.  "mod" (Modulus) Parameter  . . . . . . . . . . . . . . <a href="#page-19">19</a>
       <a href="#section-5.3.2">5.3.2</a>.  "exp" (Exponent) Parameter . . . . . . . . . . . . . . <a href="#page-20">20</a>



<span class="grey">Jones                   Expires January 17, 2013                [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


     <a href="#section-5.4">5.4</a>.  Additional Key Algorithm Families and Parameters . . . . . <a href="#page-20">20</a>
   <a href="#section-6">6</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
     <a href="#section-6.1">6.1</a>.  JSON Web Signature and Encryption Algorithms Registry  . . <a href="#page-21">21</a>
       <a href="#section-6.1.1">6.1.1</a>.  Registration Template  . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
       <a href="#section-6.1.2">6.1.2</a>.  Initial Registry Contents  . . . . . . . . . . . . . . <a href="#page-22">22</a>
     <a href="#section-6.2">6.2</a>.  JSON Web Key Algorithm Families Registry . . . . . . . . . <a href="#page-26">26</a>
       <a href="#section-6.2.1">6.2.1</a>.  Registration Template  . . . . . . . . . . . . . . . . <a href="#page-27">27</a>
       <a href="#section-6.2.2">6.2.2</a>.  Initial Registry Contents  . . . . . . . . . . . . . . <a href="#page-27">27</a>
     <a href="#section-6.3">6.3</a>.  JSON Web Key Parameters Registration . . . . . . . . . . . <a href="#page-28">28</a>
       <a href="#section-6.3.1">6.3.1</a>.  Registry Contents  . . . . . . . . . . . . . . . . . . <a href="#page-28">28</a>
   <a href="#section-7">7</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-28">28</a>
   <a href="#section-8">8</a>.  Open Issues  . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-29">29</a>
   <a href="#section-9">9</a>.  References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-30">30</a>
     <a href="#section-9.1">9.1</a>.  Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-30">30</a>
     <a href="#section-9.2">9.2</a>.  Informative References . . . . . . . . . . . . . . . . . . <a href="#page-32">32</a>
   <a href="#appendix-A">Appendix A</a>.  Digital Signature/MAC Algorithm Identifier
                Cross-Reference . . . . . . . . . . . . . . . . . . . <a href="#page-33">33</a>
   <a href="#appendix-B">Appendix B</a>.  Encryption Algorithm Identifier Cross-Reference . . . <a href="#page-35">35</a>
   <a href="#appendix-C">Appendix C</a>.  Acknowledgements  . . . . . . . . . . . . . . . . . . <a href="#page-37">37</a>
   <a href="#appendix-D">Appendix D</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-38">38</a>
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-40">40</a>






























<span class="grey">Jones                   Expires January 17, 2013                [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   The JSON Web Algorithms (JWA) specification enumerates cryptographic
   algorithms and identifiers to be used with the JSON Web Signature
   (JWS) [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>], JSON Web Encryption (JWE) [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>], and JSON Web Key (JWK)
   [<a href="#ref-JWK" title="&quot;JSON Web Key (JWK)&quot;">JWK</a>] specifications.  All these specifications utilize JavaScript
   Object Notation (JSON) [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>] based data structures.  This
   specification also describes the semantics and operations that are
   specific to these algorithms and algorithm families.

   Enumerating the algorithms and identifiers for them in this
   specification, rather than in the JWS, JWE, and JWK specifications,
   is intended to allow them to remain unchanged in the face of changes
   in the set of required, recommended, optional, and deprecated
   algorithms over time.

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Notational Conventions</span>

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in Key words for use in
   RFCs to Indicate Requirement Levels [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Terminology</span>

<span class="h3"><a class="selflink" name="section-2.1" href="#section-2.1">2.1</a>.  Terms Incorporated from the JWS Specification</span>

   These terms defined by the JSON Web Signature (JWS) [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>]
   specification are incorporated into this specification:

   JSON Web Signature (JWS)  A data structure cryptographically securing
      a JWS Header and a JWS Payload with a JWS Signature value.

   JWS Header  A string representing a JavaScript Object Notation (JSON)
      [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>] object that describes the digital signature or MAC
      operation applied to create the JWS Signature value.

   JWS Payload  The bytes to be secured - a.k.a., the message.  The
      payload can contain an arbitrary sequence of bytes.

   JWS Signature  A byte array containing the cryptographic material
      that secures the contents of the JWS Header and the JWS Payload.

   Base64url Encoding  The URL- and filename-safe Base64 encoding
      described in <a href="./rfc4648">RFC 4648</a> <a href="./rfc4648#section-5">[RFC4648], Section&nbsp;5</a>, with the (non URL-
      safe) '=' padding characters omitted, as permitted by <a href="#section-3.2">Section 3.2</a>.
      (See <a href="#appendix-C">Appendix C</a> of [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>] for notes on implementing base64url



<span class="grey">Jones                   Expires January 17, 2013                [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


      encoding without padding.)

   Encoded JWS Header  Base64url encoding of the bytes of the UTF-8
      [<a href="./rfc3629" title="&quot;UTF-8, a transformation format of ISO 10646&quot;">RFC3629</a>] representation of the JWS Header.

   Encoded JWS Payload  Base64url encoding of the JWS Payload.

   Encoded JWS Signature  Base64url encoding of the JWS Signature.

   JWS Secured Input  The concatenation of the Encoded JWS Header, a
      period ('.') character, and the Encoded JWS Payload.

   Collision Resistant Namespace  A namespace that allows names to be
      allocated in a manner such that they are highly unlikely to
      collide with other names.  For instance, collision resistance can
      be achieved through administrative delegation of portions of the
      namespace or through use of collision-resistant name allocation
      functions.  Examples of Collision Resistant Namespaces include:
      Domain Names, Object Identifiers (OIDs) as defined in the ITU-T
      X.660 and X.670 Recommendation series, and Universally Unique
      IDentifiers (UUIDs) [<a href="./rfc4122" title="&quot;A Universally Unique IDentifier (UUID) URN Namespace&quot;">RFC4122</a>].  When using an administratively
      delegated namespace, the definer of a name needs to take
      reasonable precautions to ensure they are in control of the
      portion of the namespace they use to define the name.

<span class="h3"><a class="selflink" name="section-2.2" href="#section-2.2">2.2</a>.  Terms Incorporated from the JWE Specification</span>

   These terms defined by the JSON Web Encryption (JWE) [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>]
   specification are incorporated into this specification:

   JSON Web Encryption (JWE)  A data structure representing an encrypted
      version of a Plaintext.  The structure consists of four parts: the
      JWE Header, the JWE Encrypted Key, the JWE Ciphertext, and the JWE
      Integrity Value.

   Plaintext  The bytes to be encrypted - a.k.a., the message.  The
      plaintext can contain an arbitrary sequence of bytes.

   Ciphertext  The encrypted version of the Plaintext.

   Content Encryption Key (CEK)  A symmetric key used to encrypt the
      Plaintext for the recipient to produce the Ciphertext.

   Content Integrity Key (CIK)  A key used with a MAC function to ensure
      the integrity of the Ciphertext and the parameters used to create
      it.





<span class="grey">Jones                   Expires January 17, 2013                [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   Content Master Key (CMK)  A key from which the CEK and CIK are
      derived.  When key wrapping or key encryption are employed, the
      CMK is randomly generated and encrypted to the recipient as the
      JWE Encrypted Key. When key agreement is employed, the CMK is the
      result of the key agreement algorithm.

   JWE Header  A string representing a JSON object that describes the
      encryption operations applied to create the JWE Encrypted Key, the
      JWE Ciphertext, and the JWE Integrity Value.

   JWE Encrypted Key  When key wrapping or key encryption are employed,
      the Content Master Key (CMK) is encrypted with the intended
      recipient's key and the resulting encrypted content is recorded as
      a byte array, which is referred to as the JWE Encrypted Key.
      Otherwise, when key agreement is employed, the JWE Encrypted Key
      is the empty byte array.

   JWE Ciphertext  A byte array containing the Ciphertext.

   JWE Integrity Value  A byte array containing a MAC value that ensures
      the integrity of the Ciphertext and the parameters used to create
      it.

   Encoded JWE Header  Base64url encoding of the bytes of the UTF-8
      [<a href="./rfc3629" title="&quot;UTF-8, a transformation format of ISO 10646&quot;">RFC3629</a>] representation of the JWE Header.

   Encoded JWE Encrypted Key  Base64url encoding of the JWE Encrypted
      Key.

   Encoded JWE Ciphertext  Base64url encoding of the JWE Ciphertext.

   Encoded JWE Integrity Value  Base64url encoding of the JWE Integrity
      Value.

   AEAD Algorithm  An Authenticated Encryption with Associated Data
      (AEAD) [<a href="./rfc5116" title="&quot;An Interface and Algorithms for Authenticated Encryption&quot;">RFC5116</a>] encryption algorithm is one that provides an
      integrated content integrity check.  AES Galois/Counter Mode (GCM)
      is one such algorithm.

<span class="h3"><a class="selflink" name="section-2.3" href="#section-2.3">2.3</a>.  Terms Incorporated from the JWK Specification</span>

   These terms defined by the JSON Web Key (JWK) [<a href="#ref-JWK" title="&quot;JSON Web Key (JWK)&quot;">JWK</a>] specification are
   incorporated into this specification:








<span class="grey">Jones                   Expires January 17, 2013                [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   JSON Web Key (JWK)  A JSON data structure that represents a public
      key.

   JSON Web Key Set (JWK Set)  A JSON object that contains an array of
      JWKs as a member.

<span class="h3"><a class="selflink" name="section-2.4" href="#section-2.4">2.4</a>.  Defined Terms</span>

   These terms are defined for use by this specification:

   Header Parameter Name  The name of a member of the JSON object
      representing a JWS Header or JWE Header.

   Header Parameter Value  The value of a member of the JSON object
      representing a JWS Header or JWE Header.


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Cryptographic Algorithms for JWS</span>

   JWS uses cryptographic algorithms to digitally sign or create a
   Message Authentication Codes (MAC) of the contents of the JWS Header
   and the JWS Payload.  The use of the following algorithms for
   producing JWSs is defined in this section.

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  "alg" (Algorithm) Header Parameter Values for JWS</span>

   The table below is the set of "alg" (algorithm) header parameter
   values defined by this specification for use with JWS, each of which
   is explained in more detail in the following sections:

   +--------------+--------------------------------+-------------------+
   | alg          | Digital Signature or MAC       | Implementation    |
   | Parameter    | Algorithm                      | Requirements      |
   | Value        |                                |                   |
   +--------------+--------------------------------+-------------------+
   | HS256        | HMAC using SHA-256 hash        | REQUIRED          |
   |              | algorithm                      |                   |
   | HS384        | HMAC using SHA-384 hash        | OPTIONAL          |
   |              | algorithm                      |                   |
   | HS512        | HMAC using SHA-512 hash        | OPTIONAL          |
   |              | algorithm                      |                   |
   | RS256        | RSASSA using SHA-256 hash      | RECOMMENDED       |
   |              | algorithm                      |                   |
   | RS384        | RSASSA using SHA-384 hash      | OPTIONAL          |
   |              | algorithm                      |                   |
   | RS512        | RSASSA using SHA-512 hash      | OPTIONAL          |
   |              | algorithm                      |                   |




<span class="grey">Jones                   Expires January 17, 2013                [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   | ES256        | ECDSA using P-256 curve and    | RECOMMENDED+      |
   |              | SHA-256 hash algorithm         |                   |
   | ES384        | ECDSA using P-384 curve and    | OPTIONAL          |
   |              | SHA-384 hash algorithm         |                   |
   | ES512        | ECDSA using P-521 curve and    | OPTIONAL          |
   |              | SHA-512 hash algorithm         |                   |
   | none         | No digital signature or MAC    | REQUIRED          |
   |              | value included                 |                   |
   +--------------+--------------------------------+-------------------+

   All the names are short because a core goal of JWS is for the
   representations to be compact.  However, there is no a priori length
   restriction on "alg" values.

   The use of "+" in the Implementation Requirements indicates that the
   requirement strength is likely to be increased in a future version of
   the specification.

   See <a href="#appendix-A">Appendix A</a> for a table cross-referencing the digital signature
   and MAC "alg" (algorithm) values used in this specification with the
   equivalent identifiers used by other standards and software packages.

<span class="h3"><a class="selflink" name="section-3.2" href="#section-3.2">3.2</a>.  MAC with HMAC SHA-256, HMAC SHA-384, or HMAC SHA-512</span>

   Hash-based Message Authentication Codes (HMACs) enable one to use a
   secret plus a cryptographic hash function to generate a Message
   Authentication Code (MAC).  This can be used to demonstrate that the
   MAC matches the hashed content, in this case the JWS Secured Input,
   which therefore demonstrates that whoever generated the MAC was in
   possession of the secret.  The means of exchanging the shared key is
   outside the scope of this specification.

   The algorithm for implementing and validating HMACs is provided in
   <a href="./rfc2104">RFC 2104</a> [<a href="./rfc2104" title="&quot;HMAC: Keyed- Hashing for Message Authentication&quot;">RFC2104</a>].  This section defines the use of the HMAC SHA-
   256, HMAC SHA-384, and HMAC SHA-512 functions [<a href="#ref-SHS" title="&quot;Secure Hash Standard (SHS)&quot;">SHS</a>].  The "alg"
   (algorithm) header parameter values "HS256", "HS384", and "HS512" are
   used in the JWS Header to indicate that the Encoded JWS Signature
   contains a base64url encoded HMAC value using the respective hash
   function.

   A key of the same size as the hash output (for instance, 256 bits for
   "HS256") or larger MUST be used with this algorithm.

   The HMAC SHA-256 MAC is generated per <a href="./rfc2104">RFC 2104</a>, using SHA-256 as the
   hash algorithm "H", using the bytes of the ASCII [<a href="#ref-USASCII" title="&quot;Coded Character Set -- 7-bit American Standard Code for Information Interchange&quot;">USASCII</a>]
   representation of the JWS Secured Input as the "text" value, and
   using the shared key.  The HMAC output value is the JWS Signature.
   The JWS signature is base64url encoded to produce the Encoded JWS



<span class="grey">Jones                   Expires January 17, 2013                [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   Signature.

   The HMAC SHA-256 MAC for a JWS is validated by computing an HMAC
   value per <a href="./rfc2104">RFC 2104</a>, using SHA-256 as the hash algorithm "H", using
   the bytes of the ASCII representation of the received JWS Secured
   input as the "text" value, and using the shared key.  This computed
   HMAC value is then compared to the result of base64url decoding the
   received Encoded JWS signature.  Alternatively, the computed HMAC
   value can be base64url encoded and compared to the received Encoded
   JWS Signature, as this comparison produces the same result as
   comparing the unencoded values.  In either case, if the values match,
   the HMAC has been validated.  If the validation fails, the JWS MUST
   be rejected.

   Securing content with the HMAC SHA-384 and HMAC SHA-512 algorithms is
   performed identically to the procedure for HMAC SHA-256 - just using
   the corresponding hash algorithm with correspondingly larger minimum
   key sizes and result values: 384 bits each for HMAC SHA-384 and 512
   bits each for HMAC SHA-512.

<span class="h3"><a class="selflink" name="section-3.3" href="#section-3.3">3.3</a>.  Digital Signature with RSA SHA-256, RSA SHA-384, or RSA SHA-512</span>

   This section defines the use of the RSASSA-PKCS1-V1_5 digital
   signature algorithm as defined in <a href="./rfc3447#section-8.2">Section&nbsp;8.2 of RFC 3447</a> [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>],
   (commonly known as PKCS #1), using SHA-256, SHA-384, or SHA-512 [<a href="#ref-SHS" title="&quot;Secure Hash Standard (SHS)&quot;">SHS</a>]
   as the hash functions.  The "alg" (algorithm) header parameter values
   "RS256", "RS384", and "RS512" are used in the JWS Header to indicate
   that the Encoded JWS Signature contains a base64url encoded RSA
   digital signature using the respective hash function.

   A key of size 2048 bits or larger MUST be used with these algorithms.

   The RSA SHA-256 digital signature is generated as follows:

   1.  Generate a digital signature of the bytes of the ASCII
       representation of the JWS Secured Input using RSASSA-PKCS1-V1_5-
       SIGN and the SHA-256 hash function with the desired private key.
       The output will be a byte array.

   2.  Base64url encode the resulting byte array.

   The output is the Encoded JWS Signature for that JWS.

   The RSA SHA-256 digital signature for a JWS is validated as follows:

   1.  Take the Encoded JWS Signature and base64url decode it into a
       byte array.  If decoding fails, the JWS MUST be rejected.




<span class="grey">Jones                   Expires January 17, 2013                [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   2.  Submit the bytes of the ASCII representation of the JWS Secured
       Input and the public key corresponding to the private key used by
       the signer to the RSASSA-PKCS1-V1_5-VERIFY algorithm using SHA-
       256 as the hash function.

   3.  If the validation fails, the JWS MUST be rejected.

   Signing with the RSA SHA-384 and RSA SHA-512 algorithms is performed
   identically to the procedure for RSA SHA-256 - just using the
   corresponding hash algorithm with correspondingly larger result
   values: 384 bits for RSA SHA-384 and 512 bits for RSA SHA-512.

<span class="h3"><a class="selflink" name="section-3.4" href="#section-3.4">3.4</a>.  Digital Signature with ECDSA P-256 SHA-256, ECDSA P-384 SHA-384,</span>
      or ECDSA P-521 SHA-512

   The Elliptic Curve Digital Signature Algorithm (ECDSA) [<a href="#ref-DSS" title="&quot;Digital Signature Standard (DSS)&quot;">DSS</a>] provides
   for the use of Elliptic Curve cryptography, which is able to provide
   equivalent security to RSA cryptography but using shorter key sizes
   and with greater processing speed.  This means that ECDSA digital
   signatures will be substantially smaller in terms of length than
   equivalently strong RSA digital signatures.

   This specification defines the use of ECDSA with the P-256 curve and
   the SHA-256 cryptographic hash function, ECDSA with the P-384 curve
   and the SHA-384 hash function, and ECDSA with the P-521 curve and the
   SHA-512 hash function.  The P-256, P-384, and P-521 curves are
   defined in [<a href="#ref-DSS" title="&quot;Digital Signature Standard (DSS)&quot;">DSS</a>].  The "alg" (algorithm) header parameter values
   "ES256", "ES384", and "ES512" are used in the JWS Header to indicate
   that the Encoded JWS Signature contains a base64url encoded ECDSA
   P-256 SHA-256, ECDSA P-384 SHA-384, or ECDSA P-521 SHA-512 digital
   signature, respectively.

   The ECDSA P-256 SHA-256 digital signature is generated as follows:

   1.  Generate a digital signature of the bytes of the ASCII
       representation of the JWS Secured Input using ECDSA P-256 SHA-256
       with the desired private key.  The output will be the pair (R,
       S), where R and S are 256 bit unsigned integers.

   2.  Turn R and S into byte arrays in big endian order, with each
       array being be 32 bytes long.  The array representations MUST not
       be shortened to omit any leading zero bytes contained in the
       values.

   3.  Concatenate the two byte arrays in the order R and then S. (Note
       that many ECDSA implementations will directly produce this
       concatenation as their output.)




<span class="grey">Jones                   Expires January 17, 2013               [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   4.  Base64url encode the resulting 64 byte array.

   The output is the Encoded JWS Signature for the JWS.

   The ECDSA P-256 SHA-256 digital signature for a JWS is validated as
   follows:

   1.  Take the Encoded JWS Signature and base64url decode it into a
       byte array.  If decoding fails, the JWS MUST be rejected.

   2.  The output of the base64url decoding MUST be a 64 byte array.  If
       decoding does not result in a 64 byte array, the JWS MUST be
       rejected.

   3.  Split the 64 byte array into two 32 byte arrays.  The first array
       will be R and the second S (with both being in big endian byte
       order).

   4.  Submit the bytes of the ASCII representation of the JWS Secured
       Input R, S and the public key (x, y) to the ECDSA P-256 SHA-256
       validator.

   5.  If the validation fails, the JWS MUST be rejected.

   Note that ECDSA digital signature contains a value referred to as K,
   which is a random number generated for each digital signature
   instance.  This means that two ECDSA digital signatures using exactly
   the same input parameters will output different signature values
   because their K values will be different.  A consequence of this is
   that one cannot validate an ECDSA signature by recomputing the
   signature and comparing the results.

   Signing with the ECDSA P-384 SHA-384 and ECDSA P-521 SHA-512
   algorithms is performed identically to the procedure for ECDSA P-256
   SHA-256 - just using the corresponding hash algorithm with
   correspondingly larger result values.  For ECDSA P-384 SHA-384, R and
   S will be 384 bits each, resulting in a 96 byte array.  For ECDSA
   P-521 SHA-512, R and S will be 521 bits each, resulting in a 132 byte
   array.

<span class="h3"><a class="selflink" name="section-3.5" href="#section-3.5">3.5</a>.  Using the Algorithm "none"</span>

   JWSs MAY also be created that do not provide integrity protection.
   Such a JWS is called a "Plaintext JWS".  Plaintext JWSs MUST use the
   "alg" value "none", and are formatted identically to other JWSs, but
   with an empty JWS Signature value.





<span class="grey">Jones                   Expires January 17, 2013               [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


<span class="h3"><a class="selflink" name="section-3.6" href="#section-3.6">3.6</a>.  Additional Digital Signature/MAC Algorithms and Parameters</span>

   Additional algorithms MAY be used to protect JWSs with corresponding
   "alg" (algorithm) header parameter values being defined to refer to
   them.  New "alg" header parameter values SHOULD either be registered
   in the IANA JSON Web Signature and Encryption Algorithms registry
   <a href="#section-6.1">Section 6.1</a> or be a URI that contains a Collision Resistant
   Namespace.  In particular, it is permissible to use the algorithm
   identifiers defined in XML DSIG [<a href="./rfc3275" title="&quot;(Extensible Markup Language) XML-Signature Syntax and Processing&quot;">RFC3275</a>], XML DSIG 2.0
   [<a href="#ref-W3C.CR-xmldsig-core2-20120124">W3C.CR-xmldsig-core2-20120124</a>], and related specifications as "alg"
   values.

   As indicated by the common registry, JWSs and JWEs share a common
   "alg" value space.  The values used by the two specifications MUST be
   distinct, as the "alg" value MAY be used to determine whether the
   object is a JWS or JWE.

   Likewise, additional reserved header parameter names MAY be defined
   via the IANA JSON Web Signature and Encryption Header Parameters
   registry [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>].  As indicated by the common registry, JWSs and JWEs
   share a common header parameter space; when a parameter is used by
   both specifications, its usage must be compatible between the
   specifications.


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Cryptographic Algorithms for JWE</span>

   JWE uses cryptographic algorithms to encrypt the Content Master Key
   (CMK) and the Plaintext.  This section specifies a set of specific
   algorithms for these purposes.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  "alg" (Algorithm) Header Parameter Values for JWE</span>

   The table below is the set of "alg" (algorithm) header parameter
   values that are defined by this specification for use with JWE.
   These algorithms are used to encrypt the CMK, producing the JWE
   Encrypted Key, or to use key agreement to agree upon the CMK.

   +-----------+--------------------------------------+----------------+
   | alg       | Key Encryption or Agreement          | Implementation |
   | Parameter | Algorithm                            | Requirements   |
   | Value     |                                      |                |
   +-----------+--------------------------------------+----------------+
   | RSA1_5    | RSAES-PKCS1-V1_5 [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>]           | REQUIRED       |







<span class="grey">Jones                   Expires January 17, 2013               [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   | RSA-OAEP  | RSAES using Optimal Asymmetric       | OPTIONAL       |
   |           | Encryption Padding (OAEP) [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>], |                |
   |           | with the default parameters          |                |
   |           | specified by <a href="./rfc3447">RFC 3447</a> in Section     |                |
   |           | A.2.1                                |                |
   | ECDH-ES   | Elliptic Curve Diffie-Hellman        | RECOMMENDED+   |
   |           | Ephemeral Static [<a href="./rfc6090" title="&quot;Fundamental Elliptic Curve Cryptography Algorithms&quot;">RFC6090</a>], and      |                |
   |           | using the Concat KDF, as defined in  |                |
   |           | Section 5.8.1 of [<a href="#ref-NIST.800-56A">NIST.800-56A</a>],     |                |
   |           | where the Digest Method is SHA-256   |                |
   |           | and all OtherInfo parameters are the |                |
   |           | empty bit string                     |                |
   | A128KW    | Advanced Encryption Standard (AES)   | RECOMMENDED    |
   |           | Key Wrap Algorithm [<a href="./rfc3394" title="&quot;Advanced Encryption Standard (AES) Key Wrap Algorithm&quot;">RFC3394</a>] using   |                |
   |           | 128 bit keys                         |                |
   | A256KW    | AES Key Wrap Algorithm using 256 bit | RECOMMENDED    |
   |           | keys                                 |                |
   +-----------+--------------------------------------+----------------+

   The use of "+" in the Implementation Requirements indicates that the
   requirement strength is likely to be increased in a future version of
   the specification.

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  "enc" (Encryption Method) Header Parameter Values for JWE</span>

   The table below is the set of "enc" (encryption method) header
   parameter values that are defined by this specification for use with
   JWE.  These algorithms are used to encrypt the Plaintext, which
   produces the Ciphertext.

   +-----------+--------------------------------------+----------------+
   | enc       | Block Encryption Algorithm           | Implementation |
   | Parameter |                                      | Requirements   |
   | Value     |                                      |                |
   +-----------+--------------------------------------+----------------+
   | A128CBC   | Advanced Encryption Standard (AES)   | REQUIRED       |
   |           | in Cipher Block Chaining (CBC) mode  |                |
   |           | with PKCS #5 padding [<a href="#ref-AES" title="&quot;Advanced Encryption Standard (AES)&quot;">AES</a>]           |                |
   |           | [<a href="#ref-NIST.800-38A">NIST.800-38A</a>] using 128 bit keys    |                |
   | A256CBC   | AES in CBC mode with PKCS #5 padding | REQUIRED       |
   |           | using 256 bit keys                   |                |
   | A128GCM   | AES in Galois/Counter Mode (GCM)     | RECOMMENDED    |
   |           | [<a href="#ref-AES" title="&quot;Advanced Encryption Standard (AES)&quot;">AES</a>] [<a href="#ref-NIST.800-38D">NIST.800-38D</a>] using 128 bit   |                |
   |           | keys                                 |                |
   | A256GCM   | AES GCM using 256 bit keys           | RECOMMENDED    |
   +-----------+--------------------------------------+----------------+

   All the names are short because a core goal of JWE is for the



<span class="grey">Jones                   Expires January 17, 2013               [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   representations to be compact.  However, there is no a priori length
   restriction on "alg" values.

   See <a href="#appendix-B">Appendix B</a> for a table cross-referencing the encryption "alg"
   (algorithm) and "enc" (encryption method) values used in this
   specification with the equivalent identifiers used by other standards
   and software packages.

<span class="h3"><a class="selflink" name="section-4.3" href="#section-4.3">4.3</a>.  "int" (Integrity Algorithm) Header Parameter Values for JWE</span>

   The table below is the set of "int" (integrity algorithm) header
   parameter values defined by this specification for use with JWE.
   Note that these are the HMAC SHA subset of the "alg" (algorithm)
   header parameter values defined for use with JWS <a href="#section-3.1">Section 3.1</a>.

   +-----------------+-------------------------+-----------------------+
   | int Parameter   | Algorithm               | Implementation        |
   | Value           |                         | Requirements          |
   +-----------------+-------------------------+-----------------------+
   | HS256           | HMAC using SHA-256 hash | REQUIRED              |
   |                 | algorithm               |                       |
   | HS384           | HMAC using SHA-384 hash | OPTIONAL              |
   |                 | algorithm               |                       |
   | HS512           | HMAC using SHA-512 hash | OPTIONAL              |
   |                 | algorithm               |                       |
   +-----------------+-------------------------+-----------------------+

<span class="h3"><a class="selflink" name="section-4.4" href="#section-4.4">4.4</a>.  "kdf" (Key Derivation Function) Header Parameter Values for JWE</span>

   The table below is the set of "kdf" (key derivation function) header
   parameter values defined by this specification for use with JWE.

   +-----------+--------------------------------------+----------------+
   | kdf       | Algorithm                            | Implementation |
   | Parameter |                                      | Requirements   |
   | Value     |                                      |                |
   +-----------+--------------------------------------+----------------+
   | CS256     | Concat KDF, as defined in Section    | REQUIRED       |
   |           | 5.8.1 of [<a href="#ref-NIST.800-56A">NIST.800-56A</a>], with        |                |
   |           | parameters per <a href="#section-4.12">Section 4.12</a>, using   |                |
   |           | SHA-256 as the digest method         |                |
   | CS384     | Concat KDF with parameters per       | OPTIONAL       |
   |           | <a href="#section-4.12">Section 4.12</a>, using SHA-384 as the   |                |
   |           | digest method                        |                |
   | CS512     | Concat KDF with parameters per       | OPTIONAL       |
   |           | <a href="#section-4.12">Section 4.12</a>, using SHA-512 as the   |                |
   |           | digest method                        |                |
   +-----------+--------------------------------------+----------------+



<span class="grey">Jones                   Expires January 17, 2013               [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


<span class="h3"><a class="selflink" name="section-4.5" href="#section-4.5">4.5</a>.  Key Encryption with RSAES-PKCS1-V1_5</span>

   This section defines the specifics of encrypting a JWE CMK with
   RSAES-PKCS1-V1_5 [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>].  The "alg" header parameter value
   "RSA1_5" is used in this case.

   A key of size 2048 bits or larger MUST be used with this algorithm.

<span class="h3"><a class="selflink" name="section-4.6" href="#section-4.6">4.6</a>.  Key Encryption with RSAES OAEP</span>

   This section defines the specifics of encrypting a JWE CMK with RSAES
   using Optimal Asymmetric Encryption Padding (OAEP) [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>], with
   the default parameters specified by <a href="./rfc3447">RFC 3447</a> in Section A.2.1.  The
   "alg" header parameter value "RSA-OAEP" is used in this case.

   A key of size 2048 bits or larger MUST be used with this algorithm.

<span class="h3"><a class="selflink" name="section-4.7" href="#section-4.7">4.7</a>.  Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static</span>
      (ECDH-ES)

   This section defines the specifics of agreeing upon a JWE CMK with
   Elliptic Curve Diffie-Hellman Ephemeral Static [<a href="./rfc6090" title="&quot;Fundamental Elliptic Curve Cryptography Algorithms&quot;">RFC6090</a>], and using
   the Concat KDF, as defined in Section 5.8.1 of [<a href="#ref-NIST.800-56A">NIST.800-56A</a>], where
   the Digest Method is SHA-256 and all OtherInfo parameters are the
   empty bit string.  The "alg" header parameter value "ECDH-ES" is used
   in this case.

   The output of the Concat KDF MUST be a key of the same length as that
   used by the "enc" algorithm.

   A new "epk" (ephemeral public key) value MUST be generated for each
   key agreement transaction.

<span class="h3"><a class="selflink" name="section-4.8" href="#section-4.8">4.8</a>.  Key Encryption with AES Key Wrap</span>

   This section defines the specifics of encrypting a JWE CMK with the
   Advanced Encryption Standard (AES) Key Wrap Algorithm [<a href="./rfc3394" title="&quot;Advanced Encryption Standard (AES) Key Wrap Algorithm&quot;">RFC3394</a>] using
   128 or 256 bit keys.  The "alg" header parameter values "A128KW" or
   "A256KW" are used in this case.

<span class="h3"><a class="selflink" name="section-4.9" href="#section-4.9">4.9</a>.  Plaintext Encryption with AES CBC Mode</span>

   This section defines the specifics of encrypting the JWE Plaintext
   with Advanced Encryption Standard (AES) in Cipher Block Chaining
   (CBC) mode with PKCS #5 padding [<a href="#ref-AES" title="&quot;Advanced Encryption Standard (AES)&quot;">AES</a>] [<a href="#ref-NIST.800-38A">NIST.800-38A</a>] using 128 or 256
   bit keys.  The "enc" header parameter values "A128CBC" or "A256CBC"
   are used in this case.




<span class="grey">Jones                   Expires January 17, 2013               [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   Use of an initialization vector of size 128 bits is REQUIRED with
   this algorithm.

<span class="h3"><a class="selflink" name="section-4.10" href="#section-4.10">4.10</a>.  Plaintext Encryption with AES GCM</span>

   This section defines the specifics of encrypting the JWE Plaintext
   with Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)
   [<a href="#ref-AES" title="&quot;Advanced Encryption Standard (AES)&quot;">AES</a>] [<a href="#ref-NIST.800-38D">NIST.800-38D</a>] using 128 or 256 bit keys.  The "enc" header
   parameter values "A128GCM" or "A256GCM" are used in this case.

   Use of an initialization vector of size 96 bits is REQUIRED with this
   algorithm.

   The "additional authenticated data" parameter is used to secure the
   header and key values, as specified for AEAD algorithms in Section 5
   of [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>].

   The requested size of the "authentication tag" output MUST be 128
   bits, regardless of the key size.

   As GCM is an AEAD algorithm, the JWE Integrity Value is set to be the
   "authentication tag" value produced by the encryption.

<span class="h3"><a class="selflink" name="section-4.11" href="#section-4.11">4.11</a>.  Integrity Calculation with HMAC SHA-256, HMAC SHA-384, or HMAC</span>
       SHA-512

   This section defines the specifics of computing a JWE Integrity Value
   with HMAC SHA-256, HMAC SHA-384, or HMAC SHA-512 [<a href="#ref-SHS" title="&quot;Secure Hash Standard (SHS)&quot;">SHS</a>].  Other than
   as stated below, these computations are performed identically to
   those specified in <a href="#section-3.2">Section 3.2</a>.

   A key of the same size as the hash output (for instance, 256 bits for
   "HS256") MUST be used with this algorithm.

   Per Section 9 of [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>], the JWS Secured Input value used contains the
   header, encrypted key, and ciphertext.

<span class="h3"><a class="selflink" name="section-4.12" href="#section-4.12">4.12</a>.  Key Derivation with Concat KDF and SHA-256, SHA-384, or SHA-512</span>

   The key derivation process derives CEK and CIK values from the CMK.
   It uses as a primitive a Key Derivation Function (KDF) which
   notionally takes three arguments:

   MasterKey:  The master key used to compute the individual use keys







<span class="grey">Jones                   Expires January 17, 2013               [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   Label:  The use key label, used to differentiate individual use keys

   Length:  The desired length of the use key

   This section defines the specifics of using the Concat KDF, as
   defined in Section 5.8.1 of [<a href="#ref-NIST.800-56A">NIST.800-56A</a>], where the Digest Method
   is one of SHA-256, SHA-384, or SHA-512, the SuppPubInfo parameter is
   the Label, and the remaining OtherInfo parameters are the empty bit
   string.

   The "kdf" (key derivation function) header parameter values "CS256",
   "CS384", and "CS512" are respectively used in the JWE Header to
   indicate the use of the Concat KDF as above with the respective
   digest methods.  If the "kdf" header parameter is omitted when an
   AEAD "enc" algorithm is not used, this is equivalent to specifying
   use of the "CS256" key derivation function.

   To compute the CEK from the CMK, the ASCII label "Encryption" ([69,
   110, 99, 114, 121, 112, 116, 105, 111, 110]) is used.  Use the key
   size for the "enc" algorithm as the CEK desired key length.

   To compute the CIK from the CMK, the ASCII label "Integrity" ([73,
   110, 116, 101, 103, 114, 105, 116, 121]) is used.  Use the minimum
   key size for the "int" algorithm (for instance, 256 bits for "HS256")
   as the CIK desired key length.

<span class="h3"><a class="selflink" name="section-4.13" href="#section-4.13">4.13</a>.  Additional Encryption Algorithms and Parameters</span>

   Additional algorithms MAY be used to protect JWEs with corresponding
   "alg" (algorithm), "enc" (encryption method), and "int" (integrity
   algorithm) header parameter values being defined to refer to them.
   New "alg", "enc", and "int" header parameter values SHOULD either be
   registered in the IANA JSON Web Signature and Encryption Algorithms
   registry <a href="#section-6.1">Section 6.1</a> or be a URI that contains a Collision Resistant
   Namespace.  In particular, it is permissible to use the algorithm
   identifiers defined in XML Encryption [<a href="#ref-W3C.REC-xmlenc-core-20021210">W3C.REC-xmlenc-core-20021210</a>],
   XML Encryption 1.1 [<a href="#ref-W3C.CR-xmlenc-core1-20120313">W3C.CR-xmlenc-core1-20120313</a>], and related
   specifications as "alg", "enc", and "int" values.

   As indicated by the common registry, JWSs and JWEs share a common
   "alg" value space.  The values used by the two specifications MUST be
   distinct, as the "alg" value MAY be used to determine whether the
   object is a JWS or JWE.

   Likewise, additional reserved header parameter names MAY be defined
   via the IANA JSON Web Signature and Encryption Header Parameters
   registry [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>].  As indicated by the common registry, JWSs and JWEs
   share a common header parameter space; when a parameter is used by



<span class="grey">Jones                   Expires January 17, 2013               [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   both specifications, its usage must be compatible between the
   specifications.


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Cryptographic Algorithms for JWK</span>

   A JSON Web Key (JWK) [<a href="#ref-JWK" title="&quot;JSON Web Key (JWK)&quot;">JWK</a>] is a JavaScript Object Notation (JSON)
   [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>] data structure that represents a public key.  A JSON Web
   Key Set (JWK Set) is a JSON data structure for representing a set of
   JWKs.  This section specifies a set of algorithm families to be used
   for those public keys and the algorithm family specific parameters
   for representing those keys.

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  "alg" (Algorithm Family) Parameter Values for JWK</span>

   The table below is the set of "alg" (algorithm family) parameter
   values that are defined by this specification for use in JWKs.

   +-----------------+-------------------------+-----------------------+
   | alg Parameter   | Algorithm Family        | Implementation        |
   | Value           |                         | Requirements          |
   +-----------------+-------------------------+-----------------------+
   | EC              | Elliptic Curve [<a href="#ref-DSS" title="&quot;Digital Signature Standard (DSS)&quot;">DSS</a>]    | RECOMMENDED+          |
   |                 | key family              |                       |
   | RSA             | RSA [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>] key       | REQUIRED              |
   |                 | family                  |                       |
   +-----------------+-------------------------+-----------------------+

   All the names are short because a core goal of JWK is for the
   representations to be compact.  However, there is no a priori length
   restriction on "alg" values.

   The use of "+" in the Implementation Requirements indicates that the
   requirement strength is likely to be increased in a future version of
   the specification.

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  JWK Parameters for Elliptic Curve Keys</span>

   JWKs can represent Elliptic Curve [<a href="#ref-DSS" title="&quot;Digital Signature Standard (DSS)&quot;">DSS</a>] keys.  In this case, the
   "alg" member value MUST be "EC".  Furthermore, these additional
   members MUST be present:

<span class="h4"><a class="selflink" name="section-5.2.1" href="#section-5.2.1">5.2.1</a>.  "crv" (Curve) Parameter</span>

   The "crv" (curve) member identifies the cryptographic curve used with
   the key.  Curve values from [<a href="#ref-DSS" title="&quot;Digital Signature Standard (DSS)&quot;">DSS</a>] used by this specification are:





<span class="grey">Jones                   Expires January 17, 2013               [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   o  "P-256"

   o  "P-384"

   o  "P-521"

   Additional "crv" values MAY be used, provided they are understood by
   implementations using that Elliptic Curve key.  The "crv" value is a
   case sensitive string.

<span class="h4"><a class="selflink" name="section-5.2.2" href="#section-5.2.2">5.2.2</a>.  "x" (X Coordinate) Parameter</span>

   The "x" (x coordinate) member contains the x coordinate for the
   elliptic curve point.  It is represented as the base64url encoding of
   the coordinate's big endian representation as a byte array.  The
   array representation MUST not be shortened to omit any leading zero
   bytes contained in the value.  For instance, when representing 521
   bit integers, the byte array to be base64url encoded MUST contain 66
   bytes, including any leading zero bytes.

<span class="h4"><a class="selflink" name="section-5.2.3" href="#section-5.2.3">5.2.3</a>.  "y" (Y Coordinate) Parameter</span>

   The "y" (y coordinate) member contains the y coordinate for the
   elliptic curve point.  It is represented as the base64url encoding of
   the coordinate's big endian representation as a byte array.  The
   array representation MUST not be shortened to omit any leading zero
   bytes contained in the value.  For instance, when representing 521
   bit integers, the byte array to be base64url encoded MUST contain 66
   bytes, including any leading zero bytes.

<span class="h3"><a class="selflink" name="section-5.3" href="#section-5.3">5.3</a>.  JWK Parameters for RSA Keys</span>

   JWKs can represent RSA [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>] keys.  In this case, the "alg"
   member value MUST be "RSA".  Furthermore, these additional members
   MUST be present:

<span class="h4"><a class="selflink" name="section-5.3.1" href="#section-5.3.1">5.3.1</a>.  "mod" (Modulus) Parameter</span>

   The "mod" (modulus) member contains the modulus value for the RSA
   public key.  It is represented as the base64url encoding of the
   value's unsigned big endian representation as a byte array.  The
   array representation MUST not be shortened to omit any leading zero
   bytes.  For instance, when representing 2048 bit integers, the byte
   array to be base64url encoded MUST contain 256 bytes, including any
   leading zero bytes.






<span class="grey">Jones                   Expires January 17, 2013               [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


<span class="h4"><a class="selflink" name="section-5.3.2" href="#section-5.3.2">5.3.2</a>.  "exp" (Exponent) Parameter</span>

   The "exp" (exponent) member contains the exponent value for the RSA
   public key.  It is represented as the base64url encoding of the
   value's unsigned big endian representation as a byte array.  The
   array representation MUST utilize the minimum number of bytes to
   represent the value.  For instance, when representing the value
   65537, the byte array to be base64url encoded MUST consist of the
   three bytes [1, 0, 1].

<span class="h3"><a class="selflink" name="section-5.4" href="#section-5.4">5.4</a>.  Additional Key Algorithm Families and Parameters</span>

   Public keys using additional algorithm families MAY be represented
   using JWK data structures with corresponding "alg" (algorithm family)
   parameter values being defined to refer to them.  New "alg" parameter
   values SHOULD either be registered in the IANA JSON Web Key Algorithm
   Families registry <a href="#section-6.2">Section 6.2</a> or be a URI that contains a Collision
   Resistant Namespace.

   Likewise, parameters for representing keys for additional algorithm
   families or additional key properties SHOULD either be registered in
   the IANA JSON Web Key Parameters registry [<a href="#ref-JWK" title="&quot;JSON Web Key (JWK)&quot;">JWK</a>] or be a URI that
   contains a Collision Resistant Namespace.


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  IANA Considerations</span>

   The following registration procedure is used for all the registries
   established by this specification.

   Values are registered with a Specification Required [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>] after a
   two week review period on the [TBD]@ietf.org mailing list, on the
   advice of one or more Designated Experts.  However, to allow for the
   allocation of values prior to publication, the Designated Expert(s)
   may approve registration once they are satisfied that such a
   specification will be published.

   Registration requests must be sent to the [TBD]@ietf.org mailing list
   for review and comment, with an appropriate subject (e.g., "Request
   for access token type: example"). [[ Note to RFC-EDITOR: The name of
   the mailing list should be determined in consultation with the IESG
   and IANA.  Suggested name: jose-reg-review. ]]

   Within the review period, the Designated Expert(s) will either
   approve or deny the registration request, communicating this decision
   to the review list and IANA.  Denials should include an explanation
   and, if applicable, suggestions as to how to make the request
   successful.



<span class="grey">Jones                   Expires January 17, 2013               [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   IANA must only accept registry updates from the Designated Expert(s),
   and should direct all requests for registration to the review mailing
   list.

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  JSON Web Signature and Encryption Algorithms Registry</span>

   This specification establishes the IANA JSON Web Signature and
   Encryption Algorithms registry for values of the JWS and JWE "alg"
   (algorithm), "enc" (encryption method), and "int" (integrity
   algorithm) header parameters.  The registry records the algorithm
   name, the algorithm usage locations from the set "alg", "enc", and
   "int", implementation requirements, and a reference to the
   specification that defines it.  The same algorithm name may be
   registered multiple times, provided that the sets of usage locations
   are disjoint.  The implementation requirements of an algorithm may be
   changed over time by the Designated Experts(s) as the cryptographic
   landscape evolves, for instance, to change the status of an algorithm
   to DEPRECATED, or to change the status of an algorithm from OPTIONAL
   to RECOMMENDED or REQUIRED.

<span class="h4"><a class="selflink" name="section-6.1.1" href="#section-6.1.1">6.1.1</a>.  Registration Template</span>

   Algorithm Name:
      The name requested (e.g., "example").  This name is case
      sensitive.  Names that match other registered names in a case
      insensitive manner SHOULD NOT be accepted.

   Algorithm Usage Location(s):
      The algorithm usage, which must be one or more of the values
      "alg", "enc", "int", or "kdf".

   Implementation Requirements:
      The algorithm implementation requirements, which must be one the
      words REQUIRED, RECOMMENDED, OPTIONAL, or DEPRECATED.  Optionally,
      the word may be followed by a "+" or "-".  The use of "+"
      indicates that the requirement strength is likely to be increased
      in a future version of the specification.  The use of "-"
      indicates that the requirement strength is likely to be decreased
      in a future version of the specification.

   Change Controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.







<span class="grey">Jones                   Expires January 17, 2013               [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   Specification Document(s):
      Reference to the document that specifies the parameter, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.

<span class="h4"><a class="selflink" name="section-6.1.2" href="#section-6.1.2">6.1.2</a>.  Initial Registry Contents</span>

   o  Algorithm Name: "HS256"

   o  Algorithm Usage Location(s): "alg", "int"

   o  Implementation Requirements: REQUIRED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> and <a href="#section-4.3">Section 4.3</a> of [[ this
      document ]]

   o  Algorithm Name: "HS384"

   o  Algorithm Usage Location(s): "alg", "int"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> and <a href="#section-4.3">Section 4.3</a> of [[ this
      document ]]

   o  Algorithm Name: "HS512"

   o  Algorithm Usage Location(s): "alg", "int"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> and <a href="#section-4.3">Section 4.3</a> of [[ this
      document ]]

   o  Algorithm Name: "RS256"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: RECOMMENDED





<span class="grey">Jones                   Expires January 17, 2013               [Page 22]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-23" id="page-23" href="#page-23" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> of [[ this document ]]

   o  Algorithm Name: "RS384"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> of [[ this document ]]

   o  Algorithm Name: "RS512"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> of [[ this document ]]

   o  Algorithm Name: "ES256"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: RECOMMENDED+

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> of [[ this document ]]

   o  Algorithm Name: "ES384"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> of [[ this document ]]

   o  Algorithm Name: "ES512"

   o  Algorithm Usage Location(s): "alg"




<span class="grey">Jones                   Expires January 17, 2013               [Page 23]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-24" id="page-24" href="#page-24" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> of [[ this document ]]

   o  Algorithm Name: "none"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: REQUIRED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-3.1">Section 3.1</a> of [[ this document ]]

   o  Algorithm Name: "RSA1_5"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: REQUIRED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1">Section 4.1</a> of [[ this document ]]

   o  Algorithm Name: "RSA-OAEP"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1">Section 4.1</a> of [[ this document ]]

   o  Algorithm Name: "ECDH-ES"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: RECOMMENDED+

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1">Section 4.1</a> of [[ this document ]]






<span class="grey">Jones                   Expires January 17, 2013               [Page 24]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-25" id="page-25" href="#page-25" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   o  Algorithm Name: "A128KW"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: RECOMMENDED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1">Section 4.1</a> of [[ this document ]]

   o  Algorithm Name: "A256KW"

   o  Algorithm Usage Location(s): "alg"

   o  Implementation Requirements: RECOMMENDED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1">Section 4.1</a> of [[ this document ]]

   o  Algorithm Name: "A128CBC"

   o  Algorithm Usage Location(s): "enc"

   o  Implementation Requirements: REQUIRED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.2">Section 4.2</a> of [[ this document ]]

   o  Algorithm Name: "A256CBC"

   o  Algorithm Usage Location(s): "enc"

   o  Implementation Requirements: REQUIRED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.2">Section 4.2</a> of [[ this document ]]

   o  Algorithm Name: "A128GCM"

   o  Algorithm Usage Location(s): "enc"

   o  Implementation Requirements: RECOMMENDED

   o  Change Controller: IETF




<span class="grey">Jones                   Expires January 17, 2013               [Page 25]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-26" id="page-26" href="#page-26" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   o  Specification Document(s): <a href="#section-4.2">Section 4.2</a> of [[ this document ]]

   o  Algorithm Name: "A256GCM"

   o  Algorithm Usage Location(s): "enc"

   o  Implementation Requirements: RECOMMENDED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.2">Section 4.2</a> of [[ this document ]]

   o  Algorithm Name: "CS256"

   o  Algorithm Usage Location(s): "kdf"

   o  Implementation Requirements: REQUIRED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.4">Section 4.4</a> of [[ this document ]]

   o  Algorithm Name: "CS384"

   o  Algorithm Usage Location(s): "kdf"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.4">Section 4.4</a> of [[ this document ]]

   o  Algorithm Name: "CS512"

   o  Algorithm Usage Location(s): "kdf"

   o  Implementation Requirements: OPTIONAL

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.4">Section 4.4</a> of [[ this document ]]

<span class="h3"><a class="selflink" name="section-6.2" href="#section-6.2">6.2</a>.  JSON Web Key Algorithm Families Registry</span>

   This specification establishes the IANA JSON Web Key Algorithm
   Families registry for values of the JWK "alg" (algorithm family)
   parameter.  The registry records the "alg" value and a reference to
   the specification that defines it.  This specification registers the



<span class="grey">Jones                   Expires January 17, 2013               [Page 26]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-27" id="page-27" href="#page-27" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   values defined in <a href="#section-5.1">Section 5.1</a>.

<span class="h4"><a class="selflink" name="section-6.2.1" href="#section-6.2.1">6.2.1</a>.  Registration Template</span>

   "alg" Parameter Value:
      The name requested (e.g., "example").  This name is case
      sensitive.  Names that match other registered names in a case
      insensitive manner SHOULD NOT be accepted.

   Change Controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.

   Implementation Requirements:
      The algorithm implementation requirements, which must be one the
      words REQUIRED, RECOMMENDED, OPTIONAL, or DEPRECATED.  Optionally,
      the word may be followed by a "+" or "-".  The use of "+"
      indicates that the requirement strength is likely to be increased
      in a future version of the specification.  The use of "-"
      indicates that the requirement strength is likely to be decreased
      in a future version of the specification.

   Specification Document(s):
      Reference to the document that specifies the parameter, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.

<span class="h4"><a class="selflink" name="section-6.2.2" href="#section-6.2.2">6.2.2</a>.  Initial Registry Contents</span>

   o  "alg" Parameter Value: "EC"

   o  Implementation Requirements: RECOMMENDED+

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.1">Section 5.1</a> of [[ this document ]]

   o  "alg" Parameter Value: "RSA"

   o  Implementation Requirements: REQUIRED

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.1">Section 5.1</a> of [[ this document ]]





<span class="grey">Jones                   Expires January 17, 2013               [Page 27]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-28" id="page-28" href="#page-28" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


<span class="h3"><a class="selflink" name="section-6.3" href="#section-6.3">6.3</a>.  JSON Web Key Parameters Registration</span>

   This specification registers the parameter names defined in
   <a href="#section-5.2">Section 5.2</a> and <a href="#section-5.3">Section 5.3</a> in the IANA JSON Web Key Parameters
   registry [<a href="#ref-JWK" title="&quot;JSON Web Key (JWK)&quot;">JWK</a>].

<span class="h4"><a class="selflink" name="section-6.3.1" href="#section-6.3.1">6.3.1</a>.  Registry Contents</span>

   o  Parameter Name: "crv"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.2.1">Section 5.2.1</a> of [[ this document ]]

   o  Parameter Name: "x"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.2.2">Section 5.2.2</a> of [[ this document ]]

   o  Parameter Name: "y"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.2.3">Section 5.2.3</a> of [[ this document ]]

   o  Parameter Name: "mod"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.3.1">Section 5.3.1</a> of [[ this document ]]

   o  Parameter Name: "exp"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.3.2">Section 5.3.2</a> of [[ this document ]]


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Security Considerations</span>

   All of the security issues faced by any cryptographic application
   must be faced by a JWS/JWE/JWK agent.  Among these issues are
   protecting the user's private key, preventing various attacks, and
   helping the user avoid mistakes such as inadvertently encrypting a
   message for the wrong recipient.  The entire list of security
   considerations is beyond the scope of this document, but some
   significant concerns are listed here.



<span class="grey">Jones                   Expires January 17, 2013               [Page 28]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-29" id="page-29" href="#page-29" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   The security considerations in [<a href="#ref-AES" title="&quot;Advanced Encryption Standard (AES)&quot;">AES</a>], [<a href="#ref-DSS" title="&quot;Digital Signature Standard (DSS)&quot;">DSS</a>], [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>], [<a href="#ref-JWK" title="&quot;JSON Web Key (JWK)&quot;">JWK</a>], [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>],
   [<a href="#ref-NIST.800-38A">NIST.800-38A</a>], [<a href="#ref-NIST.800-38D">NIST.800-38D</a>], [<a href="#ref-NIST.800-56A">NIST.800-56A</a>], [<a href="./rfc2104" title="&quot;HMAC: Keyed- Hashing for Message Authentication&quot;">RFC2104</a>], [<a href="./rfc3394" title="&quot;Advanced Encryption Standard (AES) Key Wrap Algorithm&quot;">RFC3394</a>],
   [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>], [<a href="./rfc5116" title="&quot;An Interface and Algorithms for Authenticated Encryption&quot;">RFC5116</a>], [<a href="./rfc6090" title="&quot;Fundamental Elliptic Curve Cryptography Algorithms&quot;">RFC6090</a>], and [<a href="#ref-SHS" title="&quot;Secure Hash Standard (SHS)&quot;">SHS</a>] apply to this
   specification.

   Eventually the algorithms and/or key sizes currently described in
   this specification will no longer be considered sufficiently secure
   and will be removed.  Therefore, implementers and deployments must be
   prepared for this eventuality.

   Algorithms of matching strength should be used together whenever
   possible.  For instance, when AES Key Wrap is used with a given key
   size, using the same key size for AES CBC or GCM is recommended.
   Likewise, when AES CBC is used with a 128 bit key, using HMAC SHA-256
   as the integrity algorithm is recommended, whereas when AES CBC is
   used with a 256 bit key, using HMAC SHA-512 as the integrity
   algorithm is recommended.

   While <a href="./rfc3447#section-8">Section&nbsp;8 of RFC 3447</a> [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>] explicitly calls for people not
   to adopt RSASSA-PKCS1 for new applications and instead requests that
   people transition to RSASSA-PSS, this specification does include
   RSASSA-PKCS1, for interoperability reasons, because it commonly
   implemented.

   Keys used with RSAES-PKCS1-v1_5 must follow the constraints in
   <a href="./rfc3447#section-7.2">Section&nbsp;7.2 of RFC 3447</a> [<a href="./rfc3447" title="&quot;Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1&quot;">RFC3447</a>].  In particular, keys with a low
   public key exponent value must not be used.

   Plaintext JWSs (JWSs that use the "alg" value "none") provide no
   integrity protection.  Thus, they must only be used in contexts where
   the payload is secured by means other than a digital signature or MAC
   value, or need not be secured.

   Receiving agents that validate signatures and sending agents that
   encrypt messages need to be cautious of cryptographic processing
   usage when validating signatures and encrypting messages using keys
   larger than those mandated in this specification.  An attacker could
   send certificates with keys that would result in excessive
   cryptographic processing, for example, keys larger than those
   mandated in this specification, which could swamp the processing
   element.  Agents that use such keys without first validating the
   certificate to a trust anchor are advised to have some sort of
   cryptographic resource management system to prevent such attacks.


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  Open Issues</span>

   [[ to be removed by the RFC editor before publication as an RFC ]]



<span class="grey">Jones                   Expires January 17, 2013               [Page 29]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-30" id="page-30" href="#page-30" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   The following items remain to be considered or done in this draft:

   o  Should we use the "alg" value as the AlgorithmID input to the
      Concat KDF when doing key agreement?  Or is an AlgorithmID value
      unnecessary in the way that we are using Concat for key agreement?

   o  Similarly, should we use a combination of the "enc" and "int"
      values as the AlgorithmID input to the Concat KDF when doing key
      derivation?  Or is an AlgorithmID value unnecessary in the way
      that we are using Concat for key derivation?

   o  Do we need non-empty PartyUInfo and PartyVInfo values when using
      the Concat KDF for key agreement?  Or given that we already
      require the use of a random unique Ephemeral Public Key (EPK), is
      this superfluous, as duplicate keys will not be generated unless a
      duplicate EPK is used?  If we do decide we need PartyUInfo and
      PartyVInfo values, how can we dynamically generate them from
      information already carried in the header, rather than requiring
      that they be explicitly passed as header parameters?

   o  Similarly, do we need non-empty PartyUInfo and PartyVInfo values
      when using the Concat KDF for key derivation?  Or given that we
      already require the use of a random unique Content Master Key
      (CMK), is this superfluous, as duplicate keys will not be
      generated unless a duplicate CMK is used?  If we do decide we need
      PartyUInfo and PartyVInfo values, how can we dynamically generate
      them from information already carried in the header, rather than
      requiring that they be explicitly passed as header parameters?

   o  Do we want to add AES ECB as a (non-authenticated) key wrap
      algorithm?  Is there any problem with doing key wrap without an
      integrity check, given that a separate integrity check already
      covers the wrapped key?

   o  Do we want to add the ability to perform symmetric encryption
      directly with a shared key, without using a CMK?  This would save
      space and time in the single recipient case.  It would also be
      parallel to the current treatment of key agreement, which doesn't
      use a CMK.


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  References</span>

<span class="h3"><a class="selflink" name="section-9.1" href="#section-9.1">9.1</a>.  Normative References</span>

   [<a name="ref-AES" id="ref-AES">AES</a>]      National Institute of Standards and Technology (NIST),
              "Advanced Encryption Standard (AES)", FIPS PUB 197,
              November 2001.



<span class="grey">Jones                   Expires January 17, 2013               [Page 30]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-31" id="page-31" href="#page-31" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   [<a name="ref-DSS" id="ref-DSS">DSS</a>]      National Institute of Standards and Technology, "Digital
              Signature Standard (DSS)", FIPS PUB 186-3, June 2009.

   [<a name="ref-JWE" id="ref-JWE">JWE</a>]      Jones, M., Rescorla, E., and J. Hildebrand, "JSON Web
              Encryption (JWE)", July 2012.

   [<a name="ref-JWK" id="ref-JWK">JWK</a>]      Jones, M., "JSON Web Key (JWK)", July 2012.

   [<a name="ref-JWS" id="ref-JWS">JWS</a>]      Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", July 2012.

   [<a name="ref-NIST.800-38A" id="ref-NIST.800-38A">NIST.800-38A</a>]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Block Cipher Modes of Operation",
              NIST PUB 800-38A, December 2001.

   [<a name="ref-NIST.800-38D" id="ref-NIST.800-38D">NIST.800-38D</a>]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Block Cipher Modes of Operation:
              Galois/Counter Mode (GCM) and GMAC", NIST PUB 800-38D,
              December 2001.

   [<a name="ref-NIST.800-56A" id="ref-NIST.800-56A">NIST.800-56A</a>]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Pair-Wise Key Establishment Schemes
              Using Discrete Logarithm Cryptography (Revised)", NIST PUB
              800-56A, March 2007.

   [<a name="ref-RFC2104" id="ref-RFC2104">RFC2104</a>]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
              Hashing for Message Authentication", <a href="./rfc2104">RFC 2104</a>,
              February 1997.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

   [<a name="ref-RFC3394" id="ref-RFC3394">RFC3394</a>]  Schaad, J. and R. Housley, "Advanced Encryption Standard
              (AES) Key Wrap Algorithm", <a href="./rfc3394">RFC 3394</a>, September 2002.

   [<a name="ref-RFC3447" id="ref-RFC3447">RFC3447</a>]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography
              Standards (PKCS) #1: RSA Cryptography Specifications
              Version 2.1", <a href="./rfc3447">RFC 3447</a>, February 2003.

   [<a name="ref-RFC3629" id="ref-RFC3629">RFC3629</a>]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, <a href="./rfc3629">RFC 3629</a>, November 2003.

   [<a name="ref-RFC4627" id="ref-RFC4627">RFC4627</a>]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", <a href="./rfc4627">RFC 4627</a>, July 2006.




<span class="grey">Jones                   Expires January 17, 2013               [Page 31]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-32" id="page-32" href="#page-32" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   [<a name="ref-RFC4648" id="ref-RFC4648">RFC4648</a>]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", <a href="./rfc4648">RFC 4648</a>, October 2006.

   [<a name="ref-RFC5116" id="ref-RFC5116">RFC5116</a>]  McGrew, D., "An Interface and Algorithms for Authenticated
              Encryption", <a href="./rfc5116">RFC 5116</a>, January 2008.

   [<a name="ref-RFC5226" id="ref-RFC5226">RFC5226</a>]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", <a href="./bcp26">BCP 26</a>, <a href="./rfc5226">RFC 5226</a>,
              May 2008.

   [<a name="ref-RFC6090" id="ref-RFC6090">RFC6090</a>]  McGrew, D., Igoe, K., and M. Salter, "Fundamental Elliptic
              Curve Cryptography Algorithms", <a href="./rfc6090">RFC 6090</a>, February 2011.

   [<a name="ref-SHS" id="ref-SHS">SHS</a>]      National Institute of Standards and Technology, "Secure
              Hash Standard (SHS)", FIPS PUB 180-3, October 2008.

   [<a name="ref-USASCII" id="ref-USASCII">USASCII</a>]  American National Standards Institute, "Coded Character
              Set -- 7-bit American Standard Code for Information
              Interchange", ANSI X3.4, 1986.

<span class="h3"><a class="selflink" name="section-9.2" href="#section-9.2">9.2</a>.  Informative References</span>

   [<a name="ref-CanvasApp" id="ref-CanvasApp">CanvasApp</a>]
              Facebook, "Canvas Applications", 2010.

   [<a name="ref-I-D.rescorla-jsms" id="ref-I-D.rescorla-jsms">I-D.rescorla-jsms</a>]
              Rescorla, E. and J. Hildebrand, "JavaScript Message
              Security Format", <a href="./draft-rescorla-jsms-00">draft-rescorla-jsms-00</a> (work in
              progress), March 2011.

   [<a name="ref-JCA" id="ref-JCA">JCA</a>]      Oracle, "Java Cryptography Architecture", 2011.

   [<a name="ref-JSE" id="ref-JSE">JSE</a>]      Bradley, J. and N. Sakimura (editor), "JSON Simple
              Encryption", September 2010.

   [<a name="ref-JSS" id="ref-JSS">JSS</a>]      Bradley, J. and N. Sakimura (editor), "JSON Simple Sign",
              September 2010.

   [<a name="ref-MagicSignatures" id="ref-MagicSignatures">MagicSignatures</a>]
              Panzer (editor), J., Laurie, B., and D. Balfanz, "Magic
              Signatures", January 2011.

   [<a name="ref-RFC3275" id="ref-RFC3275">RFC3275</a>]  Eastlake, D., Reagle, J., and D. Solo, "(Extensible Markup
              Language) XML-Signature Syntax and Processing", <a href="./rfc3275">RFC 3275</a>,
              March 2002.

   [<a name="ref-RFC4122" id="ref-RFC4122">RFC4122</a>]  Leach, P., Mealling, M., and R. Salz, "A Universally
              Unique IDentifier (UUID) URN Namespace", <a href="./rfc4122">RFC 4122</a>,



<span class="grey">Jones                   Expires January 17, 2013               [Page 32]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-33" id="page-33" href="#page-33" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


              July 2005.

   [<a name="ref-W3C.CR-xmldsig-core2-20120124" id="ref-W3C.CR-xmldsig-core2-20120124">W3C.CR-xmldsig-core2-20120124</a>]
              Reagle, J., Hirsch, F., Cantor, S., Roessler, T.,
              Eastlake, D., Yiu, K., Solo, D., and P. Datta, "XML
              Signature Syntax and Processing Version 2.0", World Wide
              Web Consortium CR CR-xmldsig-core2-20120124, January 2012,
              &lt;<a href="http://www.w3.org/TR/2012/CR-xmldsig-core2-20120124">http://www.w3.org/TR/2012/CR-xmldsig-core2-20120124</a>&gt;.

   [<a name="ref-W3C.CR-xmlenc-core1-20120313" id="ref-W3C.CR-xmlenc-core1-20120313">W3C.CR-xmlenc-core1-20120313</a>]
              Eastlake, D., Reagle, J., Hirsch, F., and T. Roessler,
              "XML Encryption Syntax and Processing Version 1.1", World
              Wide Web Consortium CR CR-xmlenc-core1-20120313,
              March 2012,
              &lt;<a href="http://www.w3.org/TR/2012/CR-xmlenc-core1-20120313">http://www.w3.org/TR/2012/CR-xmlenc-core1-20120313</a>&gt;.

   [<a name="ref-W3C.REC-xmlenc-core-20021210" id="ref-W3C.REC-xmlenc-core-20021210">W3C.REC-xmlenc-core-20021210</a>]
              Eastlake, D. and J. Reagle, "XML Encryption Syntax and
              Processing", World Wide Web Consortium Recommendation REC-
              xmlenc-core-20021210, December 2002,
              &lt;<a href="http://www.w3.org/TR/2002/REC-xmlenc-core-20021210">http://www.w3.org/TR/2002/REC-xmlenc-core-20021210</a>&gt;.


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Digital Signature/MAC Algorithm Identifier Cross-Reference</span>

   This appendix contains a table cross-referencing the digital
   signature and MAC "alg" (algorithm) values used in this specification
   with the equivalent identifiers used by other standards and software
   packages.  See XML DSIG [<a href="./rfc3275" title="&quot;(Extensible Markup Language) XML-Signature Syntax and Processing&quot;">RFC3275</a>], XML DSIG 2.0
   [<a href="#ref-W3C.CR-xmldsig-core2-20120124">W3C.CR-xmldsig-core2-20120124</a>], and Java Cryptography Architecture
   [<a href="#ref-JCA" title="&quot;Java Cryptography Architecture&quot;">JCA</a>] for more information about the names defined by those
   documents.

   +-------+-----+----------------------------+----------+-------------+
   | Algor | JWS | XML DSIG                   | JCA      | OID         |
   | ithm  |     |                            |          |             |
   +-------+-----+----------------------------+----------+-------------+
   | HMAC  | HS2 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | HmacSHA2 | 1.2.840.113 |
   | using | 56  | xmldsig-more#hmac-sha256   | 56       | 549.2.9     |
   | SHA-2 |     |                            |          |             |
   | 56    |     |                            |          |             |
   |  hash |     |                            |          |             |
   |  algo |     |                            |          |             |
   | rithm |     |                            |          |             |







<span class="grey">Jones                   Expires January 17, 2013               [Page 33]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-34" id="page-34" href="#page-34" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   | HMAC  | HS3 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | HmacSHA3 | 1.2.840.113 |
   | using | 84  | xmldsig-more#hmac-sha384   | 84       | 549.2.10    |
   | SHA-3 |     |                            |          |             |
   | 84    |     |                            |          |             |
   |  hash |     |                            |          |             |
   |  algo |     |                            |          |             |
   | rithm |     |                            |          |             |
   | HMAC  | HS5 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | HmacSHA5 | 1.2.840.113 |
   | using | 12  | xmldsig-more#hmac-sha512   | 12       | 549.2.11    |
   | SHA-5 |     |                            |          |             |
   | 12    |     |                            |          |             |
   |  hash |     |                            |          |             |
   |  algo |     |                            |          |             |
   | rithm |     |                            |          |             |
   | RSASS | RS2 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | SHA256wi | 1.2.840.113 |
   | A     | 56  | xmldsig-more#rsa-sha256    | thRSA    | 549.1.1.11  |
   |  usin |     |                            |          |             |
   | gSHA- |     |                            |          |             |
   | 256   |     |                            |          |             |
   |   has |     |                            |          |             |
   | h alg |     |                            |          |             |
   | orith |     |                            |          |             |
   | m     |     |                            |          |             |
   | RSASS | RS3 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | SHA384wi | 1.2.840.113 |
   | A     | 84  | xmldsig-more#rsa-sha384    | thRSA    | 549.1.1.12  |
   |  usin |     |                            |          |             |
   | gSHA- |     |                            |          |             |
   | 384   |     |                            |          |             |
   |   has |     |                            |          |             |
   | h alg |     |                            |          |             |
   | orith |     |                            |          |             |
   | m     |     |                            |          |             |
   | RSASS | RS5 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | SHA512wi | 1.2.840.113 |
   | A     | 12  | xmldsig-more#rsa-sha512    | thRSA    | 549.1.1.13  |
   |  usin |     |                            |          |             |
   | gSHA- |     |                            |          |             |
   | 512   |     |                            |          |             |
   |   has |     |                            |          |             |
   | h alg |     |                            |          |             |
   | orith |     |                            |          |             |
   | m     |     |                            |          |             |










<span class="grey">Jones                   Expires January 17, 2013               [Page 34]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-35" id="page-35" href="#page-35" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   | ECDSA | ES2 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | SHA256wi | 1.2.840.100 |
   | using | 56  | xmldsig-more#ecdsa-sha256  | thECDSA  | 45.4.3.2    |
   | P-256 |     |                            |          |             |
   | curve |     |                            |          |             |
   | and   |     |                            |          |             |
   | SHA-2 |     |                            |          |             |
   | 56    |     |                            |          |             |
   |  hash |     |                            |          |             |
   |  algo |     |                            |          |             |
   | rithm |     |                            |          |             |
   | ECDSA | ES3 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | SHA384wi | 1.2.840.100 |
   | using | 84  | xmldsig-more#ecdsa-sha384  | thECDSA  | 45.4.3.3    |
   | P-384 |     |                            |          |             |
   | curve |     |                            |          |             |
   | and   |     |                            |          |             |
   | SHA-3 |     |                            |          |             |
   | 84    |     |                            |          |             |
   |  hash |     |                            |          |             |
   |  algo |     |                            |          |             |
   | rithm |     |                            |          |             |
   | ECDSA | ES5 | <a href="http://www.w3.org/2001/04/">http://www.w3.org/2001/04/</a> | SHA512wi | 1.2.840.100 |
   | using | 12  | xmldsig-more#ecdsa-sha512  | thECDSA  | 45.4.3.4    |
   | P-521 |     |                            |          |             |
   | curve |     |                            |          |             |
   | and   |     |                            |          |             |
   | SHA-5 |     |                            |          |             |
   | 12    |     |                            |          |             |
   |  hash |     |                            |          |             |
   |  algo |     |                            |          |             |
   | rithm |     |                            |          |             |
   +-------+-----+----------------------------+----------+-------------+


<span class="h2"><a class="selflink" name="appendix-B" href="#appendix-B">Appendix B</a>.  Encryption Algorithm Identifier Cross-Reference</span>

   This appendix contains a table cross-referencing the "alg"
   (algorithm) and "enc" (encryption method) values used in this
   specification with the equivalent identifiers used by other standards
   and software packages.  See XML Encryption
   [<a href="#ref-W3C.REC-xmlenc-core-20021210">W3C.REC-xmlenc-core-20021210</a>], XML Encryption 1.1
   [<a href="#ref-W3C.CR-xmlenc-core1-20120313">W3C.CR-xmlenc-core1-20120313</a>], and Java Cryptography Architecture
   [<a href="#ref-JCA" title="&quot;Java Cryptography Architecture&quot;">JCA</a>] for more information about the names defined by those
   documents.








<span class="grey">Jones                   Expires January 17, 2013               [Page 35]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-36" id="page-36" href="#page-36" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   +----------+------+---------------------------+---------------------+
   | Algorith | JWE  | XML ENC                   | JCA                 |
   | m        |      |                           |                     |
   +----------+------+---------------------------+---------------------+
   | RSAES-PK | RSA1 | <a href="http://www.w3.org/2001/04">http://www.w3.org/2001/04</a> | RSA/None/PKCS1Paddi |
   | CS1-V1_5 | _5   | /xmlenc#rsa-1_5           | ng                  |
   | RSAES    | RSA- | <a href="http://www.w3.org/2001/04">http://www.w3.org/2001/04</a> | RSA/None/OAEPWithSH |
   | using    | OAEP | /xmlenc#rsa-oaep-mgf1p    | A-1AndMGF1Padding   |
   | Optimal  |      |                           |                     |
   | Asymmetr |      |                           |                     |
   | ic       |      |                           |                     |
   |  Encrypt |      |                           |                     |
   | ion      |      |                           |                     |
   |   Paddin |      |                           |                     |
   | g (OAEP) |      |                           |                     |
   | Elliptic | ECDH | <a href="http://www.w3.org/2009/xm">http://www.w3.org/2009/xm</a> |                     |
   | Curve    | -ES  | lenc11#ECDH-ES            |                     |
   | Diffie-H |      |                           |                     |
   | ellman   |      |                           |                     |
   |  Ephemer |      |                           |                     |
   | alStatic |      |                           |                     |
   | Advanced | A128 | <a href="http://www.w3.org/2001/04">http://www.w3.org/2001/04</a> |                     |
   | Encrypti | KW   | /xmlenc#kw-aes128         |                     |
   | on       |      |                           |                     |
   |  Standar |      |                           |                     |
   | d(AES)   |      |                           |                     |
   |  Key Wra |      |                           |                     |
   | pAlgorit |      |                           |                     |
   | hmusing  |      |                           |                     |
   |   128 bi |      |                           |                     |
   | t keys   |      |                           |                     |
   | AES Key  | A256 | <a href="http://www.w3.org/2001/04">http://www.w3.org/2001/04</a> |                     |
   | Wrap     | KW   | /xmlenc#kw-aes256         |                     |
   | Algorith |      |                           |                     |
   | musing   |      |                           |                     |
   |  256 bit |      |                           |                     |
   |  keys    |      |                           |                     |














<span class="grey">Jones                   Expires January 17, 2013               [Page 36]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-37" id="page-37" href="#page-37" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   | AES in   | A128 | <a href="http://www.w3.org/2001/04">http://www.w3.org/2001/04</a> | AES/CBC/PKCS5Paddin |
   | Cipher   | CBC  | /xmlenc#aes128-cbc        | g                   |
   | Block    |      |                           |                     |
   | Chaining |      |                           |                     |
   | (CBC)    |      |                           |                     |
   | mode     |      |                           |                     |
   | with     |      |                           |                     |
   | PKCS #5  |      |                           |                     |
   | padding  |      |                           |                     |
   | using    |      |                           |                     |
   | 128 bit  |      |                           |                     |
   | keys     |      |                           |                     |
   | AES in   | A256 | <a href="http://www.w3.org/2001/04">http://www.w3.org/2001/04</a> | AES/CBC/PKCS5Paddin |
   | CBC mode | CBC  | /xmlenc#aes256-cbc        | g                   |
   | with     |      |                           |                     |
   | PKCS #5  |      |                           |                     |
   | padding  |      |                           |                     |
   | using    |      |                           |                     |
   | 256 bit  |      |                           |                     |
   | keys     |      |                           |                     |
   | AES in   | A128 | <a href="http://www.w3.org/2009/xm">http://www.w3.org/2009/xm</a> | AES/GCM/NoPadding   |
   | Galois/C | GCM  | lenc11#aes128-gcm         |                     |
   | ounter   |      |                           |                     |
   |  Mode    |      |                           |                     |
   |  (GCM)   |      |                           |                     |
   |  using   |      |                           |                     |
   |  128 bit |      |                           |                     |
   |  keys    |      |                           |                     |
   | AES GCM  | A256 | <a href="http://www.w3.org/2009/xm">http://www.w3.org/2009/xm</a> | AES/GCM/NoPadding   |
   | using    | GCM  | lenc11#aes256-gcm         |                     |
   | 256 bit  |      |                           |                     |
   | keys     |      |                           |                     |
   +----------+------+---------------------------+---------------------+


<span class="h2"><a class="selflink" name="appendix-C" href="#appendix-C">Appendix C</a>.  Acknowledgements</span>

   Solutions for signing and encrypting JSON content were previously
   explored by Magic Signatures [<a href="#ref-MagicSignatures">MagicSignatures</a>], JSON Simple Sign
   [<a href="#ref-JSS" title="&quot;JSON Simple Sign&quot;">JSS</a>], Canvas Applications [<a href="#ref-CanvasApp">CanvasApp</a>], JSON Simple Encryption [<a href="#ref-JSE" title="&quot;JSON Simple Encryption&quot;">JSE</a>],
   and JavaScript Message Security Format [<a href="#ref-I-D.rescorla-jsms">I-D.rescorla-jsms</a>], all of
   which influenced this draft.  Dirk Balfanz, John Bradley, Yaron Y.
   Goland, John Panzer, Nat Sakimura, and Paul Tarjan all made
   significant contributions to the design of this specification and its
   related specifications.






<span class="grey">Jones                   Expires January 17, 2013               [Page 37]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-38" id="page-38" href="#page-38" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


<span class="h2"><a class="selflink" name="appendix-D" href="#appendix-D">Appendix D</a>.  Document History</span>

   [[ to be removed by the RFC editor before publication as an RFC ]]

   -04

   o  Added text requiring that any leading zero bytes be retained in
      base64url encoded key value representations for fixed-length
      values.

   o  Added this language to Registration Templates: "This name is case
      sensitive.  Names that match other registered names in a case
      insensitive manner SHOULD NOT be accepted."

   o  Described additional open issues.

   o  Applied editorial suggestions.

   -03

   o  Always use a 128 bit "authentication tag" size for AES GCM,
      regardless of the key size.

   o  Specified that use of a 128 bit IV is REQUIRED with AES CBC.  It
      was previously RECOMMENDED.

   o  Removed key size language for ECDSA algorithms, since the key size
      is implied by the algorithm being used.

   o  Stated that the "int" key size must be the same as the hash output
      size (and not larger, as was previously allowed) so that its size
      is defined for key generation purposes.

   o  Added the "kdf" (key derivation function) header parameter to
      provide crypto agility for key derivation.  The default KDF
      remains the Concat KDF with the SHA-256 digest function.

   o  Clarified that the "mod" and "exp" values are unsigned.

   o  Added Implementation Requirements columns to algorithm tables and
      Implementation Requirements entries to algorithm registries.

   o  Changed AES Key Wrap to RECOMMENDED.

   o  Moved registries JSON Web Signature and Encryption Header
      Parameters and JSON Web Signature and Encryption Type Values to
      the JWS specification.




<span class="grey">Jones                   Expires January 17, 2013               [Page 38]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-39" id="page-39" href="#page-39" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


   o  Moved JSON Web Key Parameters registry to the JWK specification.

   o  Changed registration requirements from RFC Required to
      Specification Required with Expert Review.

   o  Added Registration Template sections for defined registries.

   o  Added Registry Contents sections to populate registry values.

   o  No longer say "the UTF-8 representation of the JWS Secured Input
      (which is the same as the ASCII representation)".  Just call it
      "the ASCII representation of the JWS Secured Input".

   o  Added "Collision Resistant Namespace" to the terminology section.

   o  Numerous editorial improvements.

   -02

   o  For AES GCM, use the "additional authenticated data" parameter to
      provide integrity for the header, encrypted key, and ciphertext
      and use the resulting "authentication tag" value as the JWE
      Integrity Value.

   o  Defined minimum required key sizes for algorithms without
      specified key sizes.

   o  Defined KDF output key sizes.

   o  Specified the use of PKCS #5 padding with AES-CBC.

   o  Generalized text to allow key agreement to be employed as an
      alternative to key wrapping or key encryption.

   o  Clarified that ECDH-ES is a key agreement algorithm.

   o  Required implementation of AES-128-KW and AES-256-KW.

   o  Removed the use of "A128GCM" and "A256GCM" for key wrapping.

   o  Removed "A512KW" since it turns out that it's not a standard
      algorithm.

   o  Clarified the relationship between "typ" header parameter values
      and MIME types.

   o  Generalized language to refer to Message Authentication Codes
      (MACs) rather than Hash-based Message Authentication Codes (HMACs)



<span class="grey">Jones                   Expires January 17, 2013               [Page 39]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-40" id="page-40" href="#page-40" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


      unless in a context specific to HMAC algorithms.

   o  Established registries: JSON Web Signature and Encryption Header
      Parameters, JSON Web Signature and Encryption Algorithms, JSON Web
      Signature and Encryption "typ" Values, JSON Web Key Parameters,
      and JSON Web Key Algorithm Families.

   o  Moved algorithm-specific definitions from JWK to JWA.

   o  Reformatted to give each member definition its own section
      heading.

   -01

   o  Moved definition of "alg":"none" for JWSs here from the JWT
      specification since this functionality is likely to be useful in
      more contexts that just for JWTs.

   o  Added Advanced Encryption Standard (AES) Key Wrap Algorithm using
      512 bit keys ("A512KW").

   o  Added text "Alternatively, the Encoded JWS Signature MAY be
      base64url decoded to produce the JWS Signature and this value can
      be compared with the computed HMAC value, as this comparison
      produces the same result as comparing the encoded values".

   o  Corrected the Magic Signatures reference.

   o  Made other editorial improvements suggested by JOSE working group
      participants.

   -00

   o  Created the initial IETF draft based upon
      <a href="./draft-jones-json-web-signature-04">draft-jones-json-web-signature-04</a> and
      <a href="./draft-jones-json-web-encryption-02">draft-jones-json-web-encryption-02</a> with no normative changes.

   o  Changed terminology to no longer call both digital signatures and
      HMACs "signatures".












<span class="grey">Jones                   Expires January 17, 2013               [Page 40]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-41" id="page-41" href="#page-41" class="invisible"> </a>
<span class="grey">Internet-Draft          JSON Web Algorithms (JWA)              July 2012</span>


Author's Address

   Michael B. Jones
   Microsoft

   Email: mbj@microsoft.com
   URI:   <a href="http://self-issued.info/">http://self-issued.info/</a>












































Jones                   Expires January 17, 2013               [Page 41]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
