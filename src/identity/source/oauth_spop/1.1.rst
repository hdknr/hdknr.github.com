1.1.  Protocol Flow
------------------------------

::

    +--------+                                  +---------------+
    |        |--(A)-- Authorization Request --->|               |
    |        |        + t(code_verifier), t     |   Resource    |
    |        |                                  |     Owner     |
    |        |<-(B)--- Authorization Grant -----|               |
    |        |                                  +---------------+
    | Client |
    |        |                                  +---------------+
    |        |--(C)--- Access Token Request --->|               |
    |        |          + code_verifier         | Authorization |
    |        |                                  |     Server    |
    |        |<-(D)------ Access Token ---------|               |
    +--------+                                  +---------------+

                  Figure 2: Abstract Protocol Flow


This specification adds additional parameters 
to the OAuth 2.0 Authorization and Access Token Requests, 
shown in abstract form in Figure 1.

A. The client creates and records a secret named the ":term:`code_verifier"`,
   and derives a transformed version "t(code_verifier)" 
   (referred to as the "code_challenge") 
   which is sent in the OAuth 2.0 Authorization Request, 
   along with the transformation method "t".

B. The :term:`resource owner` responds as usual, 
   but records "t(code_verifier)" and the transformation method.

C. The client then sends the code to the Access Token Request as usual, 
   but includes the "code_verifier" secret generated at (A).

D. The authorization server transforms "code_verifier" 
   and compares it to "t(code_verifier)" from (B).  
 
   Access is denied if they are not equal.

An attacker who intercepts the Authorization Grant at (B) is unable
to redeem it for an Access Token, as they are not in possession of
the "code_verifier" secret.

(draft06)
