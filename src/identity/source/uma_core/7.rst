7.  Security Considerations
========================================

This specification relies mainly on OAuth security mechanisms as well
as transport-level encryption for protecting the protection and
authorization API endpoints.  Most PATs and AATs are likely to use
OAuth bearer tokens.  See [OAuth-threat] for more information.

This specification defines a number of JSON-based data formats.  As a
subset of the JavaScript scripting language, JSON data SHOULD be
consumed through a process that does not dynamically execute it as
code, to avoid malicious code execution.  One way to achieve this is
to use a JavaScript interpreter rather than the built-in JavaScript
eval() function.

The issue of impersonation is a crucial aspect in UMA, particularly
when entities are wielding bearer tokens that preclude proof-of-
possession (of a secret or a cryptographic key).  As such, one way to
mitigate this risk is for the resource owner to require stronger
claims to accompany any access request.  For example, consider the
case where Alice sets policies at the authorization server governing
access to her resources by Bob. When Bob first seeks access and must
obtain an RPT (for which the default RPT profile specifies a bearer
token), Alice could set policies demanding that Bob prove his
identity by providing a set of strong claims issued by a trusted
attribute provider in order to get authorization data associated with
that token.

Another issue concerns the use of the [OAuth2] implicit flow.  In
this case, Bob will have exposure to the token, and may maliciously
pass the token to an unauthorized party.  To mitigate this weakness
and others, we recommend considering the following steps:

o  Require that the Requesting Party (as defined in
   [UMA-obligations], meaning this party is able to take on legal
   obligations) legitimately represent the wielder of the bearer
   token.  This solution is based on a legal or contractual approach,
   and therefore does not reduce the risk from the technical
   perspective.

o  The authorization server, possibly with input from the resource
   owner, can implement tighter time-to-live strategies around the
   authorization data in RPTs.  This is a classic approach with
   bearer tokens that helps to limit a malicious party's ability to
   intercept and use the bearer token.  In the same vein, the
   authorization server could require claims to have a reasonable
   degree of freshness (which would require a custom claims profile).

o  The strongest strategy is to disallow bearer-type RPTs within the
   UMA profile being deployed, by providing or requiring an RPT
   profile that requires use of a holder-of-key approach.  In this
   way, the wielder of the token must engage in a live session for
   proof-of-possession.

For information about the additional technical, operational, and
legal elements of trust establishment between UMA entities and
parties, which affects security considerations, see
[UMA-obligations].

(draft09)
