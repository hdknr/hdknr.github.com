1.3.1.  Protection and Authorization APIs at the Authorization Server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The authorization server presents a protection API to the resource
server and an authorization API to the client.  These APIs MUST be
OAuth-protected; thus, the authorization server has an OAuth token
endpoint and user authorization endpoint, and has the option to issue
an OAuth refresh token along with any access tokens issued for these
APIs.

The protection API consists of an OAuth resource set registration
endpoint as defined by [OAuth-resource-reg], an endpoint for
registering client-requested permissions, and an OAuth token
introspection endpoint as defined by [OAuth-introspection].  This
specification profiles the endpoints defined by these other
specifications.

The authorization API consists of an RPT issuance endpoint and an
authorization request endpoint.

The authorization server the use of TLS for requests to
its endpoints. 
The authorization server MUST declare all of its endpoints 
in its configuration data (see :ref:`Section 1.4 <uma_core.1.4>`).

An entity seeking protection API access MUST request the scope "http:
//docs.kantarainitiative.org/uma/scopes/prot.json", and an access
token with at least this scope is called a protection API token
(PAT).  An entity seeking authorization API access MUST request the
scope "http://docs.kantarainitiative.org/uma/scopes/authz.json", and
an access token with at least this scope is called an authorization
API token (AAT).  The same entity can serve in both roles, so that an
OAuth access token might be considered both a PAT and an AAT if it
has both scopes.  If a request to an endpoint fails due to an
invalid, missing, or expired PAT or AAT, or requires higher
privileges at this endpoint than provided by the PAT or AAT, the
authorization server responds with an OAuth error.

Note: These scope keywords are URIs that resolve to JSON-encoded
scope descriptions, as defined in [OAuth-resource-reg].  These scope
descriptions are non-normative for the purposes of PATs and AATs.

The authorization server is REQUIRED to support the OAuth bearer
token profile for PAT and AAT issuance, and MAY support other OAuth
token profiles for these purposes.  It MUST declare all supported
token profiles for PAT and AAT issuance in its configuration data.
The authorization server MAY support the use of any OAuth grant type
for PAT and AAT issuance, but MUST support the authorization_code
grant type, and SHOULD support the SAML bearer token grant type
[OAuth-SAML] (urn:ietf:params:oauth:grant-type:saml2-bearer) if it
anticipates working with entities that are operating in environments
where the use of SAML is prevalent.  It MUST declare its supported
grant types for PAT and AAT issuance in its configuration data.

A PAT binds a resource owner, a resource server the owner uses for
resource management, and an authorization server the owner uses for
protection of resources at this resource server.  It is not specific
to any client or requesting party.  The issuance of a PAT represents
the approval of the resource owner for this resource server to trust
this authorization server for protecting its resources belonging to
this resource owner.

An AAT binds a requesting party, a client being used by that party,
and an authorization server that protects resources this client is
seeking access to on this requesting party's behalf.  It is not
specific to any resource server or resource owner.  The issuance of
an AAT represents the approval of this requesting party for this
client to engage with this authorization server to supply claims, ask
for authorization, and perform any other tasks needed for obtaining
authorization for access to resources at all resource servers that
use this authorization server.  The authorization server is able to
manage future processes of authorization and claims-caching
efficiently for this client/requesting party pair across all resource
servers they try to access.  These management processes are outside
the scope of this specification, however.

( draft 7, http://tools.ietf.org/html/draft-hardjono-oauth-umacore-07#section-1.3.1 )
