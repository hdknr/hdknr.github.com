:orphan:

3.3.1. UMA Bearer Token Profile
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section defines the format and protocol requirements 
for the UMA bearer token profile.  

An authorization server MUST support the UMA bearer token profile 
and MUST indicate its support in the "uma_token_profiles_supported" property 
in its configuration data (see Section 1.5).

On receiving an RPT of the "Bearer" type in an authorization header
from a client making an access attempt, 
the resource server MUST use the authorization server's token introspection endpoint
[OAuth-introspection] to retrieve the RPT's associated authorization data.  

.. note::

    - authz のイントロスペクションエンドポイントで認可データをもらう

In order to ask the authorization server for an RPT's status,
the host makes the request to the authorization server with a POST
request to the authorization server's token introspection endpoint.
The body of the HTTP request message contains a JSON document
providing the RPT.  The host MUST provide its own PAT in the request
in order to gain access to the RPT status endpoint.

Example of a request to the RPT status endpoint that provides the PAT
in the header:

::

   POST /token_status HTTP/1.1
   Host: am.example.com
   Authorization: Bearer vF9dft4qmT
   ...

   {
     "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
     "resource_set_id": "112210f47de98100",
     "host_id": "photoz.example.com"
   }

The authorization server returns the RPT's status in an HTTP response
using the 200 OK status code, containing a JSON document supplying
the RPT's associated permissions.  The RPT status description either
contains all of the permissions that are currently valid for this RPT
or indicates that the RPT is invalid (see Section 1.4).  The
authorization server MAY set a cache period for the returned RPT
status description that allows the host to reuse it over some period
of time when it later sees the same RPT.

The status description for a valid RPT is a JSON array of zero or
more permission objects, each with the following properties (this
needs to be synced up with the token introspection spec):

   resource_set_id  REQUIRED.  A string that uniquely identifies the
      resource set, access to which has been granted to this client on
      behalf of this requesting party.  The identifier MUST correspond
      to a resource set that was previously registered as protected.

   scopes  REQUIRED.  An array referencing one or more URIs of scopes to
      which access was granted for this resource set.  Each scope MUST
      correspond to a scope that was registered by this host for the
      referenced resource set.

   exp  REQUIRED.  An integer representing the expiration time on or
      after which the permission MUST NOT be accepted for authorized
      access.  The processing of the exp property requires that the
      current date/time MUST be before the expiration date/time listed
      in the exp claim.  Host implementers MAY provide for some small
      leeway, usually no more than a few minutes, to account for clock
      skew.

Example:

::

   HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-store
   ...

   [
     {
       "resource_set_id": "112210f47de98100",
       "scopes": [
         "http://photoz.example.com/dev/actions/view",
         "http://photoz.example.com/dev/actions/all"
       ],
       "exp": 1300819380
     }
   ]

The token status description for an invalid RPT is a JSON structure, as follows.

::

   HTTP/1.1 200 OK
   Content-Type: application/json
   ...

   {
     "rpt_status": "invalid"
   }

( draft 06 : http://tools.ietf.org/html/draft-hardjono-oauth-umacore-06#section-3.3.1 )
