1.  Introduction
============================

概要
------

ポリシーベースアクセス制御
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

User-Managed Access (UMA) is a profile of OAuth 2.0 [OAuth2].  
UMA defines how :term:`resource owners` can control 
access to their :term:`protected resources` made by :term:`clients` 
operated by arbitrary :term:`requesting parties`,
where the resources reside on any number of :term:`resource servers`, 
and where a centralized :term:`authorization server` governs access 
based on resource owner :term:`policy`.  

Resource owners configure authorization servers with :term:`access policies` 
that serve as :term:`implicit authorization grants`.  
Thus, 
the UMA profile of OAuth includes an authorization grant flow.

.. note::
    access policies を定義しておくと(PDP)、認可が勝手にでる(PEP)

ユースケース
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

UMA serves numerous use cases where a resource owner outsources
authorization for access to their resources, 
potentially even without the run-time presence of the resource owner.  

A typical example is the following: 
a web user (an end-user resource owner) can authorize
a web app (client) to gain one-time or ongoing access to a protected resource 
containing his home address stored at a "personal data store" service (resource server), 
by telling the resource server to respect access entitlements 
issued by his authorization service (authorization server).  

The requesting party operating the client might be the resource owner himself, 
using a web or native app run by an e-commerce company 
that needs to know where to ship a purchased item, 
or it might be his friend who is using an online address book service 
to collect contact information, 
or it might be a survey company that uses an autonomous web service 
to compile population demographics.  

A variety of scenarios and use cases can be found 
in :term:`[UMA-usecases]` and :term:`[UMA-casestudies]` .

利用条件
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Practical control of access among loosely coupled parties requires
more than just messaging protocols.  
This specification defines only the technical "**contract**" 
between UMA-conforming entities; 
its companion :term:`Binding Obligations specification` :term:`[UMA-obligations]` defines
the expected behaviors of parties operating and using these entities.

Parties operating entities that claim to be UMA-conforming MUST
provide documentation affirmatively stating their acceptance of 
the binding obligations contractual framework defined 
in the Binding Obligations specification.

PDP/PEP
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In enterprise settings, 
application access management often involves letting back-office applications serve 
only as policy enforcement points (PEPs), 
depending entirely on access decisions coming from a central policy decision point (PDP) 
to govern the access they give to requesters.  
This separation eases auditing and allows policy administration 
to scale in several dimensions.  
UMA makes use of a separation similar to this, 
letting the resource owner serve as a policy administrator 
crafting authorization strategies for resources under their control.

OAuth2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The UMA protocol can be considered an advanced profile of :term:`[OAuth2]`.
In order to increase interoperable communication among the authorization server, 
resource server, and client, it defines several purpose-built APIs 
related to the outsourcing of authorization,
themselves protected by OAuth in embedded fashion.

Protocol
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The UMA protocol has three broad phases, as shown in Figure 1.

::

      The Three Phases of the UMA Profile of OAuth
                                              +--------------+
                                              |   resource   |
             +---------manage (A)------------ |     owner    |
             |                                +--------------+
             |         Phase 1:                      |
             |         protect a                control (B)
             |         resource                      |
             v                                       v
      +------------+               +----------+--------------+
      |            |               |protection|              |
      |  resource  |               |   API    | authorization|
      |   server   |<-protect (C)--|  (needs  |    server    |
      |            |               |   PAT)   |              |
      +------------+               +----------+--------------+
      | protected  |                          | authorization|
      | resource   |                          |     API      |
      |(needs RPT) |                          |  (needs AAT) |
      +------------+                          +--------------+
             ^                                       |
             |         Phases 2 and 3:         authorize (D)
             |         get authorization,            |
             |         access a resource             v
             |                                +--------------+
             +---------access (E)-------------|    client    |
                                              +--------------+

                                              requesting party

                                 Figure 1

In broad strokes, 
the phases are as follows:

   1.  Protect a resource (described in :ref:`Section 2 <uma_core.2>`).

   2.  Get authorization (described in :ref:`Section 3 <uma_core.3>`).

   3.  Access a resource (described along with Phase 2 in Section 3).

In more detail, the phases work as follows:

リソース保護(PAT API)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   1.   _Protect a resource:_ 

        This phase accomplishes trust establishment
        among the :term:`resource owner`, :term:`resource server`, 
        and :term:`authorization server`, 
        as well as enabling the resource server to register with
        the authorization server descriptions of the resources to be protected.  

        This specification uses :term:`[OAuth-resource-reg]` to
        enable dynamic introduction and resource registration.  

        In these circumstances, 
        where the resource owner has chosen to use a resource server 
        for managing online resources ("A"), 
        the resource owner introduces this resource server 
        to an authorization server using an OAuth-mediated interaction 
        that results in the authorization server 
        giving the resource server a :term:`protection API token` (:term:`PAT`).  

        The resource server then uses the authorization server's protection API 
        to register sets of resources for which protection is being outsourced ("C").  
        (Out of band of the UMA protocol, 
        the resource owner instructs the authorization server 
        what policies to associated with the registered resource sets ("B").)

認可発行(RPT発行)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   2.  _Get authorization:_ 

        This phase involves the client (along with its operator, 
        the "requesting party") for the first time.  

        The client approaches the resource server seeking 
        access to a protected resource ("E").  

        In order to access it, 
        the client must first obtain a requesting party token (RPT) 
        from the authorization server 
        on behalf of its requesting party.  

        The client and requesting party are then redirected 
        to the authorization server to ask for appropriate authorization data
        (the form of this data depends on the RPT profile in use).  

        In doing so, 
        the requesting party must demonstrate to the authorization server 
        that it satisfies the resource owner's policy 
        governing the sought-for resource and scope ("D").  

        To use the authorization server's authorization API in the first place,
        the requesting party has to agree to communication with this server 
        for the purpose of seeking authorization, 
        which results in the client obtaining an authorization API token (AAT).

リソースアクセス
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   3.  _Access a resource:_ This phase involves the client successfully
       presenting an RPT that has sufficient authorization data
       associated with it to the resource server in order to gain access
       to the desired resource ("E").  In this sense, it is the "happy
       path" within phase 2.

デプロイメント
^^^^^^^^^^^^^^^^^^^

In deploying UMA, 
implementers are expected to develop one or more profiles of UMA 
(described in :ref:`Section 5 <uma_core.5>`) 
that specify and restrict the various UMA protocol options, 
according to the deployment conditions.

(draft 06 : http://tools.ietf.org/html/draft-hardjono-oauth-umacore-06#section-1 )
