1.  Introduction
=================================

The User-Managed Access (UMA) core protocol provides 
a method based on OAuth 2.0 [OAuth2] 
for users to control access to their protected resources, 
residing on any number of host sites, 
through a single authorization manager (AM) 
that governs access decisions based on user policy.


.. note::
   Talking about UMA use cases.

There are numerous use cases for UMA, 
where a resource owner elects to have a third party 
to control access to these resources potentially 
without the real-time presence of the resource owner.  
A typical example is the following: 
a web user (authorizing user) can authorize a web app (requester) 
to gain one-time or ongoing access to a resource 
containing his home address stored at a "personal data store" service (host), 
by telling the host to act on access decisions 
made by his authorization decision-making service (authorization manager or AM).  
The requesting party might be an e-commerce company
whose site is acting on behalf of the user himself 
to assist him/her in arranging for shipping a purchased item, 
or it might be his friend who is using an online address book service 
to collect addresses, 
or it might be a survey company that uses an online service 
to compile population demographics.  
Other scenarios and use cases for UMA usage can be found 
in [:term:`UMA-usecases`] and [:term:`UMA-userstories`].

.. note::
    - PEP
    - PDP 

In enterprise settings, 
application access management often involves letting back-office applications serve 
only as policy enforcement points (:term:`PEPs <PEP>`), 
depending entirely on access decisions 
coming from a central policy decision point (:term:`PDP`) 
to govern the access they give to requesters.  
This separation eases auditing and allows policy administration 
to scale in several dimensions.  
UMA makes use of a separation similar to this, 
letting the :term:`authorizing user` serve 
as a policy administrator crafting authorization strategies on his or her own behalf.

.. note::
    Based on :term:`OAuth`

        - AM  = Authorization Server
        - host  = Resource Server
        - requester = client

The UMA protocol can be considered an advanced application of [:term:`OAuth2`] 
in that it profiles, extends, and embeds OAuth in various ways.  
An :term:`AM` can be thought of as an enhanced OAuth :term:`authorization server`; 
a :term:`host` as an enhanced :term:`resource server`; 
and a :term:`requester` as an enhanced :term:`client`, 
acquiring an :term:`access token` and the requisite authorization 
to access a :term:`protected resource` at the :term:`host`.

The UMA protocol has three broad phases, as shown in Figure 1.



::
        
    The Three Phases of the UMA Protocol

                                      +-----+----------------+
                                      | UA  |  authorizing   |
                  +-------Manage (A)--|     |      user      |
                  |                   +-----+----------------+
                  |   Phase 1:              |       UA       |
                  |   protect a             +----------------+
                  |   resource                      |
                  |                            Control (B)
                  |                                 |
                  v                                 v
           +-----------+              +-----+----------------+
           |   host    |<-Protect-(C)-|prot | authorization  |
           |           |              | API |  manager (AM)  |
           +-----------+              +-----+----------------+
           | protected |                    | authorization  |
           | resource  |                    |      API       |
           +-----------+                    +----------------+
                  ^                                 |
                  |   Phases 2 and 3:         Authorize (D)
                  |   get authz and                 |
                  |   access a resource             v
                  |                         +----------------+
                  +-------Access (E)--------|   requester    |
                                            +----------------+
                                            (requesting party)

                                 Figure 1



In broad strokes, the phases are as follows:

   1.  Protect a resource (described in :ref:`Section 2 <uma_core.2>`).

   2.  Get authorization (described in :ref:`Section 3 <uma_core.3>`).

   3.  Access a resource (described along with Phase 2 in :ref:`Section 3 <uma_core.3>`).

In more detail, the phases work as follows:

   1.   **Protect a resource**:

        The :term:`authorizing user` has chosen to use a :term:`host` 
        for managing online resources ("A"), 
        and introduces this :term:`host` to an :term:`AM` 
        using an :term:`OAuth`-mediated interaction 
        that results in the :term:`AM` giving the :term:`host` an :term:`access token`.  

        The :term:`host` uses :term:`AM`'s protection API 
        to tell the :term:`AM` what sets of resources to protect ("C").  

        Out of band of the :term:`UMA` protocol, 
        the :term:`authorizing user` instructs the :term:`AM` 
        what policies to attach to the registered resource sets ("B").  

        Requesters are not yet in the picture.


   2.   **Get authorization**:

        This phase involves the :term:`requester`, :term:`host`, and :term:`AM`.  
        It may also involve synchronous action 
        by the :term:`authorizing user` 
        if this person is the same person as the requesting party.

        This phase is dominated by a loop of activity 
        in which the :term:`requester` approaches the :term:`host` 
        seeking access to a :term:`protected resource` ("E"), 
        is sent to obtain an :term:`access token` from the :term:`AM` 
        if it does not have one, 
        and then must demonstrate to the :term:`AM` 
        that it satisfies the user's authorization policy governing the sought-
        for resource and :term:`scope` of access 
        if it does not already have the required access permission ("D").

   3.   **Access a resource**:

        This phase involves the :term:`requester` successfully presenting 
        an :term:`access token` that has sufficient permission 
        associated with it to the :term:`host` in order to gain access
        to the desired resource ("E").  

        In this sense, it is the "happy path" within phase 2.

.. glossary::

    Phase 1
    UMA Phase 1
        Resource Procection Phase. Resource is at :term:`host`. Protected by :term:`AM` with :term:`UMA` protocol.

    Phase 2
    UMA Phase 2
        Authorization Phase. :term:`AM` issues :term:`access token` to :term:`requester` with :term:`OAuth` protocol.

    Phase 3
    UMA Phase 3
        Resrouce Access Phase. :term:`requester` as OAuth :term:`client` ask the :term:`host` to return resources.

(draft 03)
