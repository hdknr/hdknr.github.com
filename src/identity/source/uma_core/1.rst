1.  Introduction
============================

User-Managed Access (UMA) is a profile of OAuth 2.0 [OAuth2].  

UMA defines how :term:`resource owners` can control protected-resource access 
by clients operated by arbitrary requesting parties, 
where the resources reside on any number of resource servers, 
and where a centralized authorization server governs access 
based on resource owner policy.
:term:`Resource owners` configure authorization servers with access policies
that serve as implicit authorization grants.  
Thus, the UMA profile of OAuth can be considered to encompass an authorization grant flow.

UMA serves numerous use cases where a :term:`resource owner` outsources
authorization for access to their resources, 
potentially even without the run-time presence of the :term:`resource owner`.  
A typical example is the following: 
a web user (an end-user resource owner) can authorize a web app (client) 
to gain one-time or ongoing access to a protected resource 
containing his home address stored at a "personal data store" service 
(resource server), 
by telling the resource server to respect access entitlements 
issued by his chosen cloud-based authorization service (authorization server).  
The requesting party operating the client might be the resource owner himself, 
using a web or native app run by an e-commerce company that needs to know where
to ship a purchased item, 
or it might be his friend who is using an online address book service 
to collect contact information, 
or it might be a survey company that uses an autonomous web service to
compile population demographics.  
A variety of scenarios and use cases can be found in :term:`[UMA-usecases]` 
and :term:`[UMA-casestudies]`.

Practical control of access among loosely coupled parties requires
more than just messaging protocols.  
This specification defines only the technical "contract" 
between UMA-conforming entities; 
its companion :term:`Binding Obligations specification` :term:`[UMA-obligations]` defines
the expected behaviors of parties operating and using these entities.
Parties operating entities that claim to be UMA-conforming MUST
provide documentation affirmatively stating their acceptance of the
binding obligations contractual framework defined 
in the Binding Obligations specification.

In enterprise settings, 
application access management sometimes
involves letting back-office applications serve only as policy
enforcement points (PEPs), 
depending entirely on access decisions coming from a central policy decision point (PDP) 
to govern the access they give to requesters.  
This separation eases auditing and allows policy administration 
to scale in several dimensions.  
UMA makes use of a separation similar to this, 
letting the resource owner serve as a policy administrator 
crafting authorization strategies for resources under their control.

In order to increase interoperable communication among the
authorization server, resource server, and client, UMA defines
several purpose-built APIs related to the outsourcing of
authorization, themselves protected by OAuth in embedded fashion.

Overview
----------

The UMA protocol has three broad phases, as shown in Figure 1.

::

      The Three Phases of the UMA Profile of OAuth
                                              +--------------+
                                              |   resource   |
             +---------manage (A)------------ |     owner    |
             |                                +--------------+
             |         Phase 1:                      |
             |         protect a                control (B)
             |         resource                      |
             v                                       v
      +------------+               +----------+--------------+
      |            |               |protection|              |
      |  resource  |               |   API    | authorization|
      |   server   |<-protect (C)--|  (needs  |    server    |
      |            |               |   PAT)   |              |
      +------------+               +----------+--------------+
      | protected  |                          | authorization|
      | resource   |                          |     API      |
      |(needs RPT) |                          |  (needs AAT) |
      +------------+                          +--------------+
             ^                                       |
             |         Phases 2 and 3:         authorize (D)
             |         get authorization,            |
             |         access a resource             v
             |                                +--------------+
             +---------access (E)-------------|    client    |
                                              +--------------+

                                              requesting party

                                 Figure 1

The 1phases are as follows:

リソース保護(PAT API)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Protect a resource  (Described in :ref:`Section 2 <uma_core.2>`.)  

The :term:`resource owner`, who manages online resources 
at the :term:`resource server` ("A"),
introduces it to the :term:`authorization server` 
so that the latter can begin controlling the resources' protection.  

To accomplish this protection, 
the authorization server presents a protection API ("C") to the resource server.  

This API is OAuth-protected and requires a :term:`protection API token` (:term:`PAT`) for access.  
The API consists of an OAuth resource set registration endpoint 
as defined by :term:`[OAuth-resource-reg]`, 
an endpoint for registering client-requested permissions, 
and an OAuth :term:`token introspection endpoint` 
as defined by :term:`[OAuth-introspection]`.  

Out of band, 
the resource owner configures the authorization server 
with :term:`policies` associated with the :term:`registered resource sets` ("B").

認可発行(RPT発行)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get authorization  (Described in :ref:`Section 3 <uma_core.3>`.)  

The :term:`client` approaches the :term:`resource server` 
seeking access to a protected resource.  

In order to access it successfully, 
the client must first use the :term:`authorization server`'s 
:term:`authorization API` ("D") to obtain a :term:`requesting party token` (:term:`RPT`) 
on behalf of its :term:`requesting party`, 
and the :term:`requesting party` must supply to the authorization server
any :term:`identity claims` needed in order for 
the server to associate sufficient :term:`authorization data` with that RPT.  

The API is OAuth-protected and requires an :term:`authorization API token` (:term:`AAT`) 
for access.  

The API consists of an :term:`RPT issuance endpoint` and an :term:`authorization request endpoint`.

リソースアクセス
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Access a resource  (Described along with Phase 2 in :ref:`Section 3 <uma_core.3>`.)  

The client successfully presents an RPT 
that has sufficient :term:`authorization data` associated with it to the :term:`resource server`,
gaining access to the desired resource ("E").  

In this sense, 
this phase is the "happy path" within phase 2.  

The nature of the authorization data varies according to the RPT profile in use.


Implementers are anticipated to develop profiles (see :ref:`Section 5 <uma_core.5>`) that
specify and restrict various UMA protocol, RPT, and identity claim options, 
according to deployment and usage conditions.

( draft 08, http://tools.ietf.org/html/draft-hardjono-oauth-umacore-08#section-1 )
