1.  Introduction
=================================

The User-Managed Access (UMA) core protocol provides 
a method based on OAuth 2.0 :term:`[OAuth2]` 
for users to control access to their :term:`protected resources`,
residing on any number of host sites, 
through a single :term:`authorization manager` (AM) 
that governs access decisions based on :term:`user policy`.

.. note::
    - Access Control on User Resources
    - On any number of OAuth Resource Server
    - Authorization Manager 
    - User Policy Base

.. glossary::

    User Policy
        (TDB)

There are numerous use cases for UMA, 
where a :term:`resource owner` elects to have a third party 
to control access to these resources potentially 
without the real-time presence of the resource owner.  

.. note::

    - user delegates to resource requesters to access his resource

A typical example is the following: 
a web user (:term:`authorizing user`) can authorize a web app :(term:`requester)` 
to gain one-time or ongoing access to a resource 
containing his home address stored at a "personal data store" service (:term:`host`), 
by telling the host to act on access decisions 
made by his authorization decision-making service (:term:`authorization manager` or :term:`AM`).  

.. note::

    - Authorizing User  = Resource Owner..
    - Requester/Requesting Pary = Client 
    - Host = (Resource) Server
    - Authorization(Access) Manager = Authorization Server, Connect OP

.. note::
    - Requesting Party

The :term:`requesting party` might be an **e-commerce company**
whose site is acting on behalf of the user himself 
to assist him/her in arranging for shipping a purchased item, 
or it might be his **friend** who is using an online address book service 
to collect addresses, 
or it might be a **survey company** that uses an online service 
to compile population demographics.  
Other scenarios and use cases for UMA usage can be found 
in :term:`[UMA-usecases]` and :term:`[UMA-userstories]` .

.. glossary::
    
    Trust Model
        (TBD)

Practical control of access among loosely coupled parties 
requires more than just messaging protocols.  
This specification defines only the technical "contract" 
between UMA-compliant entities; 
its companion :term:`Trust Model` specification :term:`[UMA-trustmodel]` 
defines the expected behaviors of parties operating and 
using these entities.
Parties operating entities that claim to be UMA-compliant 
MUST provide documentation affirmatively stating their acceptance 
of the binding obligations contractual framework 
defined in the Trust Model specification.

.. note::
    - PEP & PDP separation

In enterprise settings, 
application access management often involves letting back-office applications serve 
only as policy enforcement points (:term:`PEPs <PEP>`), 
depending entirely on access decisions 
coming from a central policy decision point (:term:`PDP`) 
to govern the access they give to requesters.  
This separation eases auditing and allows policy administration 
to scale in several dimensions.  

UMA makes use of a separation similar to this, 
letting the :term:`authorizing user` serve 
as a policy administrator crafting authorization strategies on his or her own behalf.

.. note::
    Based on :term:`OAuth`

        - AM  = Authorization Server
        - host  = Resource Server
        - requester = client

The UMA protocol can be considered an advanced application of
:term:`[OAuth2]` in that it profiles, extends, and embeds OAuth 
in various ways.  
In the big picture, 
an :term:`AM` can be thought of as an enhanced OAuth authorization server; 
a :term:`host` as an enhanced resource server;
and a :term:`requester` as an enhanced client, 
acquiring an access token and
the requisite authorization to access a :term:`protected resource` at the :term:`host`.

The UMA protocol has three broad phases, as shown in Figure 1.



::
        
    The Three Phases of the UMA Protocol

                                      +-----+----------------+
                                      | UA  |  authorizing   |
                  +-------Manage (A)--|     |      user      |
                  |                   +-----+----------------+
                  |   Phase 1:              |       UA       |
                  |   protect a             +----------------+
                  |   resource                      |
                  |                            Control (B)
                  |                                 |
                  v                                 v
           +-----------+              +-----+----------------+
           |   host    |<-Protect-(C)-|prot | authorization  |
           |           |              | API |  manager (AM)  |
           +-----------+              +-----+----------------+
           | protected |                    | authorization  |
           | resource  |                    |      API       |
           +-----------+                    +----------------+
                  ^                                 |
                  |   Phases 2 and 3:         Authorize (D)
                  |   get authz and                 |
                  |   access a resource             v
                  |                         +----------------+
                  +-------Access (E)--------|   requester    |
                                            +----------------+
                                            (requesting party)

                                 Figure 1



In broad strokes, the phases are as follows:

   1.  Protect a resource (described in :ref:`Section 2 <uma_core.2>`).

   2.  Get authorization (described in :ref:`Section 3 <uma_core.3>`).

   3.  Access a resource (described along with Phase 2 in :ref:`Section 3 <uma_core.3>`).

In more detail, the phases work as follows:

   1.   **Protect a resource**:

        The :term:`authorizing user` has chosen to use a :term:`host` 
        for managing online resources ("A"), 
        and introduces this :term:`host` to an :term:`AM` 
        using an :term:`OAuth`-mediated interaction 
        that results in the :term:`AM` giving the :term:`host` 
        a :term:`protection API token` (:term:`PAT`).  

        The :term:`host` uses :term:`AM`'s protection API 
        to tell the :term:`AM` what sets of resources to protect ("C").  

        Out of band of the :term:`UMA` protocol, 
        the :term:`authorizing user` instructs the :term:`AM` 
        what policies to attach to the registered resource sets ("B").  

        Requesters are not yet in the picture.


   2.   **Get authorization**:

        This phase involves the :term:`requester` (along with its operator,
        the requesting party or that party's human agent), 
        :term:`host`, and :term:`AM`.  

        It may also involve synchronous action 
        by the :term:`authorizing user` 
        if this person is the same person as the requesting party.

        This phase is dominated by a loop of activity 
        in which the :term:`requester` approaches the :term:`host` 
        seeking access to a :term:`protected resource` ("E").

        In order to access the :term:`protected resource` at the :term:`host`, 
        the :term:`requester` must obtain a :term:`requester permission token` (:term:`RPT`) 
        from the :term:`AM`.  

        The requester is then directed to the AM ask for authorization 
        for the permissions it seeks.  
            
        In doing so, 
        it must demonstrate to the AM 
        that it satisfies the resource owner's authorization policy 
        governing the sought-for resource and scope of access 
        if it does not already have the required access permission ("D").  

        To use the AM's authorization API in the first place, 
        the requesting party has to consent to deal with the AM in providing claims, 
        which results in the requester obtaining an :term:`authorization API token` (:term:`AAT`) 
        from the AM.


   3.   **Access a resource**:

        This phase involves the :term:`requester` successfully presenting 
        an :term:`access token` that has sufficient permission 
        associated with it to the :term:`host` in order to gain access
        to the desired resource ("E").  

        In this sense, it is the "happy path" within phase 2.

In deploying UMA, 
implementers are expected to develop one or more UMA Profiles 
(described in :ref:`Section 5 <uma_core.5>`) 
that specify and restrict the various UMA protocol options, 
according to the deployment conditions.

.. glossary::

    Phase 1
    UMA Phase 1
        Resource Procection Phase. 

        Resource is at :term:`host`. Protected by :term:`AM` with :term:`UMA` protocol.

    Phase 2
    UMA Phase 2
        Authorization Phase. 

        :term:`AM` issues :term:`access token` to :term:`requester` with :term:`OAuth` protocol.

    Phase 3
    UMA Phase 3
        Resrouce Access Phase. 

        :term:`requester` as OAuth :term:`client` ask the :term:`host` to return resources.

.. glossary::

    PAT
    Protection API Token
        - Host -> AM

    AAT
    Authorization API Token
        - Requester -> AM

    RPT
    Resource Protection Token
    Requester Access Token
        - Requester -> Host

(draft 05)
