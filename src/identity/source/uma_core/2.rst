2.  Protecting a Resource
=================================

The resource owner, 
resource server, 
and authorization server perform the following actions 
to put resources under protection.  

This list assumes that the resource server 
has discovered the authorization server's configuration data 
and endpoints as needed.

1.  The authorization server issues :term:`client credentials` 
    to the :term:`resource server`.  

    It is OPTIONAL for the client credentials 
    to be provided dynamically through :term:`[DynClientReg]`; 
    alternatively, 
    they MAY use a static process.

2.  The resource server acquires a PAT 
    from the authorization server.

    It is OPTIONAL for the resource owner 
    to introduce the resource server 
    to the authorization server dynamically 
    (for example,
    through a "NASCAR"-style user interface 
    where the resource owner selects a chosen authorization server); 
    alternatively, 
    they MAY use a static process that 
    may or may not directly involve the resource owner 
    at introduction time.

3.  In an ongoing fashion, 
    the resource server registers any resource sets 
    with the authorization server 
    for which it intends to outsource protection, 
    using the resource set registration endpoint 
    of the protection API (see :term:`[OAuth-resource-reg]`).

Note: 
The resource server is free to offer the option 
to protect any subset of the resource owner's resources 
using different authorization servers or other means entirely, 
or to protect some resources and not others.  

Additionally, 
the choice of protection regimes can be made explicitly 
by the resource owner or implicitly by the resource server.  

Any such partitioning by the resource server or
owner is outside the scope of this specification.

Once a resource set has been placed 
under authorization server protection 
through the registration of a resource set description for it, 
and until such a description's deletion by the resource server,
the resource server MUST limit access to corresponding resources,
requiring sufficient authorization data associated 
with client-presented RPTs by the authorization server 
(see :ref:`Section 3.1.2 <uma_core.3.1.2>`).

(draft09)
