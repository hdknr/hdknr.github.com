3.5.  Requester-AM: Request Authorization to Add Permission
------------------------------------------------------------------------

In this interaction, 
the :term:`requester` asks the :term:`AM` to grant it :term:`permission` for access.  
It does this at the :term:`AM`'s :term:`permission endpoint` 
by supplying the :term:`permission ticket` it got from the :term:`host`, 
along with its :term:`requester access token` and other pertinent information.  
The :term:`AM` uses the :term:`ticket` to look up the previously registered :term:`permission`, 
maps the requested :term:`permission` to operative user :term:`policies`, 
undergoes any authorization flows required (see :ref:`Section 3.6 <uma_core.3.6>`), 
and ultimately responds to the request positively or negatively.

The :term:`requester` learns about this endpoint 
by retrieving the AM's :term:`hostmeta` document (see :ref:`Section 1.5 <uma_core.1.5>`) 
based on the ":term:`am_uri`" information 
that was provided by the :term:`host` in its previous response, 
as described in :ref:`Section 2 <uma_core.2>` of :term:`hostmeta` [:term:`RFC6415`].  
For example, 
if the ":term:`am_uri`" is "example.com", 
the :term:`requester` creates 
the URI "https://example.com/.well-known/uma-configuration" and performs a GET request on it.

.. note::
    - .well-known/uma-configuration

The :term:`requester` performs a GET or POST on the :term:`permission endpoint`,
supplying:

   -  The :term:`permission ticket` it received from the :term:`host`

   -  Its own :term:`requester access token`

   -  A :term:`state` property (to help avoid replay attacks)

   -  A :term:`redirect URL`

   -  A :term:`callback URL`

.. todo::
    - What is the redirect URL?
    - What is the calllback URL ?

The :term:`AM` MUST support GET requests to this endpoint and 
MAY support POST requests; 
if it supports POST, 
the endpoint MUST use SSL/TLS.
(:term:`Requesters` will tend to prefer POST 
when they want to sign the request message and preserve certain URL information; 
however, GET typically provides a smoother user experience.)

If the AM determines that the requesting party meets the
authorization criteria set out by the authorizing user's policy 
(see :ref:`Section 3.6 <uma_core.3.6>`), 
it responds with an HTTP 201 (Created) status code and provides an updated token:

For example:

::

   HTTP/1.1 201 Created
   Content-Type: application/uma-access-token+json

   {
     "token": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv"
   }

   If the content-type of the request is not recognized by the AM, the
   AM MUST produce an HTTP error.



If the request fails due to missing or invalid parameters, or is
otherwise malformed, the AM SHOULD inform the requester of the error
by sending an HTTP error response.

If the request fails due to an invalid, missing, or expired requester
access token or requires higher privileges at this endpoint than
provided by the access token, the AM responds with an OAuth error
(see Section 4.1).

For example:

::

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer realm="example",
     error="invalid_token",
     error_description="The access token expired"

If the AM ultimately does not add the requested permission, it
responds using the appropriate HTTP status code (typically 400 or
403), and includes one of the following error codes in the response
(see Section 4.2):

.. glossary::

   invalid_requester_ticket  
      The provided ticket was not found at the
      AM.  The AM SHOULD respond with the HTTP 400 (Bad Request) status
      code.

   expired_requester_ticket  
      The provided ticket has expired.  The AM
      SHOULD respond with the HTTP 400 (Bad Request) status code.

   not_authorized_permission  
      The requester is definitively not
      authorized for this permission according to user policy.  The AM
      SHOULD respond with the HTTP 403 (Forbidden) status code.

For example:

::

   HTTP/1.1 400 Bad Request
   Content-Type: application/uma-status+json
   Cache-Control: no-store
   ...

   {
     "status": "error",
     "error": "expired_requester_ticket"
   }



(03)
