:orphan:

3.4.2.  Client Asks for Authorization Data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Once in possession of an :term:`AAT` for this authorization server, 
an RPT that applies to this requesting party for this resource server 
and this authorization server, 
and a permission ticket, 
the client asks the authorization server to give it suitable authorization data 
for the sought-for access.  

It performs a POST on the authorization request endpoint, 
supplying its own AAT in the header and its :term:`RPT` and the permission ticket 
in a JSON object with properties "rpt" and ticket", respectively.

Example of a request message containing an AAT, an RPT, 
and a permission ticket:

::

   POST /token_status HTTP/1.1
   Host: as.example.com
   Authorization: Bearer jwfLG53^sad$#f
   ...

   {
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
   }


The authorization server uses the ticket to look up the details of
the previously registered requested permission, maps the requested
permission to operative resource owner policies based on the resource
set identifier and scopes in it, undergoes any claims-gathering flows
required (see Section 3.5), and ultimately responds to the request.
The resource owner's policies at the authorization server amount to
an implicit authorization grant in governing the issuance of
authorization data.  (The authorization server is also free to enable
the resource owner to set policies that require the owner to provide
a run-time authorization grant in the form of a consent interaction,
mediated by the authorization server.  This setting of policies and
gathering of consent is outside the scope of this specification.)

The authorization server MUST base the addition of authorization data
to RPTs on user policies.  The nature of these policies is outside
the scope of UMA, but generally speaking, they can be thought of as
either independent of requesting-party features (for example, time of
day) or dependent on requesting-party features (for example, whether
they are over 18).  Such requesting-party features can potentially be
collected in a claims-gathering flow.  If the authorization server
does not add the requested authorization data, it responds using the
appropriate HTTP status code and UMA error code (see Section 4.2):

.. glossary::

   invalid_ticket  
      The provided ticket was not found at the
      authorization server.  The authorization server SHOULD respond
      with the HTTP 400 (Bad Request) status code.

   expired_ticket  
      The provided ticket has expired.  The authorization
      server SHOULD respond with the HTTP 400 (Bad Request) status code.

   not_authorized_permission  The client is definitively not authorized
      for this authorization according to user policy.  The
      authorization server SHOULD respond with the HTTP 403 (Forbidden)
      status code.


   need_claims  
      The authorization server is unable to determine whether
      the client is authorized for this permission without gathering
      claims from the requesting party.  The authorization server SHOULD
      respond with the HTTP 403 (Forbidden) status code.  The client is
      therefore not authorized, but has the opportunity to engage its
      operator -- the requesting party -- in a claims-gathering flow
      with the authorization server (see Section 3.5) to continue
      seeking authorization.

For example:

::

   HTTP/1.1 400 Bad Request
   Content-Type: application/json
   Cache-Control: no-store
   ...

   {
     "status": "error",
     "error": "expired_ticket"
   }

( draft 07, http://tools.ietf.org/html/draft-hardjono-oauth-umacore-07#section-3.4.2 )
