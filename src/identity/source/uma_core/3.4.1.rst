:orphan:

3.4.1. Client Obtains AAT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this step, 
the :term:`client` acquires an AAT from the authorization server 
on the :term:`requesting party`'s behalf.  

The token represents the approval of this :term:`requesting party` for this :term:`client` 
to engage with this authorization server to supply claims, 
ask for authorization, 
and perform any other tasks needed for obtaining authorization 
for access to resources at all resource servers that use this authorization server.  

It is OPTIONAL for the requesting party to introduce the client 
to the authorization server dynamically through the process defined in 
:term:`[OAuth-resource-reg]`); 
alternatively, they MAY use a static process that does not directly involve the requesting party.

The client MUST use OAuth 2.0 :term:`[OAuth2]` to obtain the AAT.  
Here the client requests the "http://docs.kantarainitiative.org/uma/scopes/authz.json" scope.
Once the client has obtained its AAT, 
it presents it to the authorization server at the permission request endpoint.

(NOTE: The "http://docs.kantarainitiative.org/uma/scopes/authz.json"
scope keyword is a URI that resolves to a JSON-encoded scope
description, in the fashion of UMA scope types.  
This scope description is non-normative.)

The authorization server MAY support the use of any OAuth grant type for AAT issuance, 
but MUST support the :term:`authorization_code grant type`, 
and SHOULD support the :term:`SAML bearer token grant type` :term:`[OAuth-SAML]`
(urn:ietf:params:oauth:grant-type:saml2-bearer) 
if it anticipates working with clients that are operating in environments 
where the use of SAML is prevalent.  
The authorization server MUST indicate all grant types 
it supports for AAT issuance in its configuration data.

By virtue of being able to identify this client/requesting party pair
uniquely across all resource servers whose resources it protects, the
authorization server is able to manage the process of authorization
and claims-gathering efficiently.  These management processes are
outside the scope of this specification.

( draft 06 : http://tools.ietf.org/html/draft-hardjono-oauth-umacore-06#section-3.4.1 )
