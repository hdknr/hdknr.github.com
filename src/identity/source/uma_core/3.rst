3. Getting Authorization and Accessing a Resource
========================================================================


Phase 2 of UMA is getting authorization, 
and Phase 3 is accessing a resource.  
In these phases, 
an AM orchestrates and controls requesting parties' access 
to an authorizing user's protected resources at a host, 
under conditions dictated by that user.

Phase 3 is merely the successful completion of a requester's access attempt 
that initially involved several embedded interactions among the requester, 
AM, and host in Phase 2.  

Phase 2 always begins with the requester attempting access 
at a protected resource endpoint at the host.  
How the requester came to learn about this endpoint is out of scope for this specification.  
The authorizing user might, for example, have advertised its availability publicly 
on a blog or other website, listed it in a discovery service, 
or emailed a link to a particular intended requesting party.

The host responds to the requester's access request in one of several ways 
depending on the circumstances of the request, 
either immediately or having first performed one or more embedded interactions with the AM.  
Depending on the nature of the host's response to an failed access attempt, 
the requester itself engages in embedded interactions 
with the AM before re-attempting access.

The interactions are as follows.  
Each interaction MAY be the last,
if the requester chooses not to continue pursuing the access attempt
or the host chooses not to continue facilitating it.

1.  The requester attempts access at a particular protected resource
    at a host (see :ref:`Section 3.1 <uma_core.3.1>`).

    A.  If the access attempt is unaccompanied 
        by a :term:`requester access token`, 
        the host responds immediately with an HTTP 401 (Unauthorized) response 
        and instructions on where to go to obtain one (see :ref:`Section 3.4.4 <uma_core.3.4.4>`).

        .. note::
            Request with No Access Token -> 401
         
    B.  If the access attempt was accompanied by an :term:`RPT`, 
        the host checks the RPT's status (see :ref:`Section 3.3 <uma_core.3.3>`).

        1.  If the :term:`RPT` is invalid 
            (for example, it is not applicable to this host), 
            the host responds to the requester with an
            HTTP 401 (Unauthorized) response and instructions on
            where to go to obtain a token (see :ref:`Section 3.4.4 <uma_core.3.4.4>`).

            .. note::
                Invald Token -> 401

        2.  If the RPT is valid but has insufficient permission, 
            the host registers a suitable permission request on the requester's behalf 
            at the AM (see :ref:`Section 3.2 <uma_core.3.2>`), 
            and then responds to the requester with an HTTP 403 (Forbidden) response 
            and instructions on where to go to request authorization 
            to associate that permission with its token
            (see :ref:`Section 3.1.2 <uma_core.3.1.2>`).

            .. note::
                Valid Token , but no permission -> 403 + Ticket

        3.  If the RPT is valid, and at least one of the permissions
            associated with the token matches the scope of attempted
            access, the host responds to the requester's access
            attempt with an HTTP 200 (OK) response and a
            representation of the resource (see :ref:`Section 3.1.3 <uma_core.3.1.3>`).

            .. note::
                Valid Token with enough Permission -> 200 + Resource

2.  If the requester (possessing no RPT or an invalid RPT) received a
    401 response and an RPT endpoint, it then requests an RPT from
    that endpoint (see :ref:`Section 3.4.4 <uma_core.3.4.4>`).

3.  If the requester (posessing a valid RPT) received a 403 response
    and a :term:`permission ticket`, 
    it then requests from the AM the permission that matches the ticket (:ref:`Section 3.4.5 <uma_core.3.4.5>`).  

    If the AM needs requesting party claims 
    in order to assess this requester's suitability to have the permission, 
    it engages in a claims-gathering flow with the requesting party (see :ref:`Section 3.5 <uma_core.3.5>`).

    A.  If the :term:`requester` does not already have an :term:`AAT` 
        at the appropriate AM to be able to use its :term:`permission request endpoint`, 
        it first engages in an OAuth grant flow to obtain one (see Section :ref:`3.4.3 <uma_core.3.4.3>`).

The interactions are described in detail in the following sections.

(draft 05)
