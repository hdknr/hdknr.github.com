:orphan:

3.2. Resource Server Registers a Permission With Authorization Server
--------------------------------------------------------------------------------

In response to receiving an access request accompanied by an RPT that
is invalid or has insufficient authorization data, 
the resource server SHOULD register a permission with the authorization server
that would be sufficient for the type of access sought.  
The authorization server returns a permission ticket for the resource
server to give to the client in its response.

The permission ticket is a short-lived opaque structure whose form is
determined by the authorization server.  
The ticket value MUST be securely random 
(for example, not merely part of a predictable sequential series), 
to avoid denial-of-service attacks.  

Since the ticket is an opaque structure from the point of view of the client,
the authorization server is free to include information regarding expiration time 
within the opaque ticket for its own consumption.
When the client subsequently asks the authorization server for authorization data 
to be associated with its RPT, 
it will submit this ticket to the authorization server.

The :term:`resource server` registers the :term:`permission` 
using the POST method at the :term:`authorization server`'s :term:`permission registration endpoint`.  
The resource server MUST provide its valid **PAT** in order to get access to this endpoint.  

The body of the HTTP request message contains a JSON document providing the :term:`requested permission`.

The :term:`requested scope` is an object with the name "requested_permission"
and the following properties:

   resource_set_id  
      REQUIRED.  

      The identifier for a resource set, access
      to which this client is seeking access.  The identifier MUST
      correspond to a resource set that was previously registered.

   scopes  
      REQUIRED.  

      An array referencing one or more identifiers of
      scope types to which access is needed for this resource set.  Each
      scope type identifier MUST correspond to a scope type that was
      registered by this resource server for the referenced resource
      set.

サンプル
^^^^^^^^^^^

リクエスト
~~~~~~~~~~~~~~~~~~~~~~~~

Example of an HTTP request that registers a permission at the
authorization server's :term:`permission registration endpoint`:

.. warn::
    - ヘッダーにPATの Authorization ヘッダーないですね

::

   POST /host/scope_reg_uri/photoz.example.com HTTP/1.1
   Content-Type: application/json
   Host: am.example.com

   {
     "resource_set_id": "112210f47de98100",
     "scopes": [
         "http://photoz.example.com/dev/actions/view",
         "http://photoz.example.com/dev/actions/all"
     ]
   }

レスポンス
~~~~~~~~~~~~~~

If the registration request is successful, 
the authorization server responds with an **HTTP 201 (Created)** status code 
and includes the :term:`Location header` in its response 
as well as the "ticket" property in the JSON-formatted body.

For example:

::

    HTTP/1.1 201 Created
    Content-Type: application/uma-permission-ticket+json
    Location: https://am.example.com/permreg/host/photoz.example.com/5454345rdsaa4543
    ...

    {
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
    }

.. note::
    - **Location** ヘッダーで Client(最終的にticketが渡される)がパーミッション要求するURLを返答すること!
    - http://bitly.com/bundles/hdknr/v


エラー応答
~~~~~~~~~~~~~~~~~~~~

If the registration request is authenticated properly but fails due
to other reasons, 
the authorization server responds with an HTTP 400 (Bad Request) status code 
and includes one of the following UMA error
codes (see :ref:`Section 4.2 <uma_core.4.2>`):

.. glossary::

   invalid_resource_set_id  
      The provided resource set identifier was not
      found at the authorization server.

   invalid_scope  
      At least one of the scopes included in the request was
      not registered previously by this resource server.


( draft 06 : http://tools.ietf.org/html/draft-hardjono-oauth-umacore-06#section-3.2 )
