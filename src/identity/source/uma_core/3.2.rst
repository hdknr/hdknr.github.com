:orphan:

3.2.  Resource Server Registers Requested Permission With Authorization Server
---------------------------------------------------------------------------------

In response to receiving an access request accompanied by an RPT that
has insufficient authorization data, the resource server registers a
permission with the authorization server that would be sufficient for
the type of access sought.  The authorization server returns a
permission ticket for the resource server to give to the client in
its response.

The resource server MUST provide its valid PAT in order to get access
to this endpoint.  Note that this PAT implicitly identifies the
resource owner ("subject") to which the permission applies.

The :term:`permission ticket` is a short-lived opaque structure whose form is
determined by the authorization server.  The ticket value MUST be
securely random (for example, not merely part of a predictable
sequential series), to avoid denial-of-service attacks.  Since the
ticket is an opaque structure from the point of view of the client,
the authorization server is free to include information regarding
expiration time within the opaque ticket for its own consumption.
When the client subsequently asks the authorization server for
authorization data to be associated with its RPT, it will submit this
ticket to the authorization server.

The resource server registers the requested permission using the POST
method at the authorization server's permission registration
endpoint.  The resource server MUST provide its valid PAT in order to
get access to this endpoint.  The body of the HTTP request message
contains a JSON object providing the requested permission, using a
format derived from the scope description format specified in
:term:`[OAuth-resource-reg]`, as follows.  

The object has the following properties:

.. glossary::

    resource_set_id  

       REQUIRED.  The identifier for a resource set, access
       to which this client is seeking access.  The identifier MUST
       correspond to a resource set that was previously registered.
    
    scopes  

       REQUIRED.  An array referencing one or more identifiers of
       scopes to which access is needed for this resource set.  Each
       scope identifier MUST correspond to a scope that was registered by
       this resource server for the referenced resource set.

Example of an HTTP request that registers a requested permission at
the authorization server's permission registration endpoint:

::

    POST /host/scope_reg_uri/photoz.example.com HTTP/1.1
    Content-Type: application/json
    Host: as.example.com
    
    {
      "resource_set_id": "112210f47de98100",
      "scopes": [
          "http://photoz.example.com/dev/actions/view",
          "http://photoz.example.com/dev/actions/all"
      ]
    }


If the registration request is successful, the authorization server
responds with an HTTP 201 (Created) status code and includes the
Location header in its response as well as the "ticket" property in
the JSON-formatted body.

For example:

::

    HTTP/1.1 201 Created
    Content-Type: application/json
    Location: https://as.example.com/permreg/host/photoz.example.com/5454345rdsaa4543
    ...
    
    {
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
    }


If the registration request is authenticated properly but fails due
to other reasons, the authorization server responds with an HTTP 400
(Bad Request) status code and includes one of the following UMA error
codes (see Section 4.2):

.. glossary::

    invalid_resource_set_id  The provided resource set identifier was not
       found at the authorization server.
    
    invalid_scope  At least one of the scopes included in the request was
       not registered previously by this resource server.

( draft 7, http://tools.ietf.org/html/draft-hardjono-oauth-umacore-07#section-3.2 )
