1.3.2.  Authorization API
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::
    1. RPTの発行
    2. 認可要求

The authorization server MUST present an TLS- and OAuth-protected,
HTTP-based authorization API for use by clients.  

The authorization server thus has an OAuth token endpoint 
and user authorization endpoint, 
and has the option to issue an OAuth refresh token 
along with any access tokens issued for these APIs.  

The authorization server MUST declare 
all of its authorization API endpoints 
in its configuration data (see :ref:`Section 1.4 <uma_core.1.4>`).

The authorization API consists of two endpoints:

-  Endpoint for RPT issuance

-  Endpoint for requesting authorization

An entity seeking authorization API access MUST have 
the scope "http://docs.kantarainitiative.org/uma/scopes/authz.json".  

(This URI resolves to a JSON-encoded scope description, 
as defined in :term:`[OAuth-resource-reg]`.  

The description is non-normative for UMA purposes.)  


An access token with at least this scope 
is called an :ref:`authorization API token` (:term:`AAT`) 
and an entity with this scope is definitionally a client.  

A single entity can serve in both resource server and client roles 
if it has the appropriate OAuth scopes.  

If a request to an endpoint fails 
due to an invalid, missing, or expired AAT, 
or requires higher privileges at this endpoint than provided by the AAT, 
the authorization server responds with an OAuth error.


The authorization server MUST support the OAuth bearer token profile
for AAT issuance, 
and MAY support other OAuth token profiles 
(for example, 
the SAML bearer token grant type :term:`[OAuth-SAML]`).  

It MUST declare all supported token profiles 
and grant types for AAT issuance in its configuration data.

An AAT binds a requesting party, 
a client being used by that party,
and an authorization server that protects resources 
this client is seeking access to on this requesting party's behalf.  

It is not specific to any resource server or resource owner.  

The issuance of an AAT represents the approval of this requesting party 
for this client to engage with this authorization server 
to supply claims, 
ask for authorization, 
and perform any other tasks needed 
for obtaining authorization for access to resources 
at all resource servers that use this authorization server.  

The authorization server is able to manage future processes 
of authorization and claims-caching efficiently 
for this client/requesting party pair across all resource servers 
they try to access; 
however, 
these management processes are outside the scope of this specification.

(drart09)
