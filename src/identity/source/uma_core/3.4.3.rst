3.4.3. Client Asks for Authorization Data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::
    - パーミションを要求
    - 成功したら 200 OK が返る、って書いた方がいいんじゃない？


Once in possession of an AAT for this authorization server, 
an RPT that applies to this requesting party for this resource server 
and this authorization server, 
and a permission ticket, 
the client asks the authorization server to give it suitable authorization data 
for the sought-for access.  

.. note::

    - AAT
    - RPT
    - permission ticket

The client performs a POST on the permission request endpoint, 
supplying the items below.  

The client MUST provide its own AAT in the header.

   -  The permission ticket it received from the resource server

   -  Its RPT for this resource server

   -  Its own AAT in the header


Example of a request message containing a :term:`permission ticket` and RPT:

::
   POST /token_status HTTP/1.1
   Host: am.example.com
   Authorization: Bearer jwfLG53^sad$#f
   ...

   {
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
   }

In this interaction, 
the client uses the authorization server's :term:`permission request endpoint`.

The authorization server uses the ticket to look up the details of
the previously registered permission, 
maps the requested permission to operative resource owner policies, 
undergoes any authorization flows required (see Section 3.5), 
and ultimately responds to the request positively or negatively.  

.. note::

    - OK(200)かNG(401,400)を返す

The resource owner's policies at the authorization server amount 
to an implicit authorization grant in governing the issuance of authorization data.  
(The authorization server is also free to enable resource owners to set policies that
require them to provide a run-time explicit authorization grant mediated by the authorization server.  
This setting of policies and gathering of authorization grants is outside the scope of this specification.)

If the request fails due to an invalid, missing, or expired AAT (or RPT) 
or requires higher privileges at this endpoint than provided by the AAT, 
the authorization server responds with an OAuth error (see Section 4.1).

For example:

::

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer realm="example",
     error="invalid_token",
     error_description="The access token expired"

If the authorization server does not add the requested authorization data, 
it responds using the appropriate HTTP status code (typically 400 or 403), 
and includes one of the following error codes in the response (see :ref:`Section 4.2 <uma_core.4.2>`):


   invalid_requester_ticket  The provided ticket was not found at the
      authorization server.  The authorization server SHOULD respond
      with the HTTP 400 (Bad Request) status code.

   expired_requester_ticket  The provided ticket has expired.  The
      authorization server SHOULD respond with the HTTP 400 (Bad
      Request) status code.

   not_authorized_permission  The client is definitively not authorized
      for this authorization according to user policy.  The
      authorization server SHOULD respond with the HTTP 403 (Forbidden)
      status code.

   need_claims  The authorization server is unable to determine whether
      the client is authorized for this permission 
      without gathering claims from the requesting party.  

      The authorization server SHOULD respond with the HTTP 403 (Forbidden) status code.  
      The client is therefore not authorized, 
      but has the opportunity to engage its operator -- the requesting party -- 
      in a claims-gathering flow with the authorization server 
      (see :ref:`Section 3.5 <uma_core.3.5>`) to potentially become authorized.

For example:

::

   HTTP/1.1 400 Bad Request
   Content-Type: application/uma-status+json
   Cache-Control: no-store
   ...

   {
     "status": "error",
     "error": "expired_requester_ticket"
   }

(draft 06 : http://tools.ietf.org/html/draft-hardjono-oauth-umacore-06#section-3.4.3 )
