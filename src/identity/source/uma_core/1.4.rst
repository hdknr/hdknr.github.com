1.4.  Scopes, Resource Sets, Permissions, and Authorization
--------------------------------------------------------------------------------

.. note::
    **Scope**

UMA extends the OAuth concept of a ":term:`scope`" 
by defining scopes as applying to particular labeled resource sets, 
rather than leaving the relevant resources 
(such as API endpoints or URIs) implicit.  
A resource set can have any number of scopes, 
which together describe the universe of actions that **can be** 
taken on this protected resource set.  
For example, 
a resource set representing a status update API might have scopes 
that include adding an update or reading updates.  
A resource set representing a photo album might have scopes 
that include viewing a slideshow or printing the album.  
Hosts register resource sets and their scopes when there is not yet any
requesting party or requester in the picture.

Resource sets and scopes have meaning only to hosts and their users,
in the same way that application-specific host APIs have meaning only
to these entities.  The AM is merely a conveyor of labels and
descriptions for these constructs, to help the authorizing user set
policies that guide eventual authorization processes.

.. note::
    **Permission**

In contrast to an UMA scope, 
an UMA permission reflects an **actual** authorization process 
for a requester to access a particular resource set in a scoped (bounded) manner.  
Hosts register permission requests on behalf of requesters that have attempted access.  
Requesters subsequently ask AMs for (potentially multiple) permissions 
to be associated with their tokens.  AMs grant (or deny) permissions to requesters.

A requester access token is bound to a single authorizing user, 
a single host where protected resources controlled by that user reside,
a single AM that controls access to those resource sets, and a single requester.  
Put another way, each requester access token is associated with as many permissions 
as are appropriate for gaining authorized access to that user's resources at that host, 
protected by any single AM.  
Thus, if an authorizing user happens to protect different resources at a host using two AMs, 
any requester accessing resources on both sides of that "AM divide" would end up acquiring two access tokens.

In order to represent meaningful, auditable, and potentially legally
enforceable authorization (see [:term:`UMA-trustmodel`]), a permission is
conceptually bound to a particular set of UMA entities and parties.
This includes the requesting party, the requester (so that the same
requesting party would have to go through the authorization process
for each client application they use), the host, the resource set on
which access is being attempted, and therefore also the AM protecting
it and the authorizing user who is controlling access.

Unlike scopes (but similarly to tokens themselves; see :ref:`Section 1.3 <uma_core.1.3>`),
permissions have a validity period.

(03)
