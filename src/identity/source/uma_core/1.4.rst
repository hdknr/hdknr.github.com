1.4.  Scopes, Resource Sets, Permissions, and Authorization
--------------------------------------------------------------------------------

リソースセットとスコープタイプ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

UMA extends the OAuth concept of a "scope" by defining :term:`scope types` 
as applying to labeled resource sets, 
rather than leaving the relevant resources 
(such as API endpoints or URIs) implicit.  

A resource set can have any number of scope types, 
which together describe the universe of actions that _can be_ taken 
on this protected resource set.  

For example, 
a resource set representing a status update API might have scopes 
that include adding an update or reading updates.  
A resource set representing a photo album might have scopes that
include viewing a slideshow or printing the album.  
Resource servers register resource sets and their scope types 
when there is not yet any particular requesting party or client in the picture.

Resource sets and scope types have meaning only to resource servers
and their users, 
in the same way that application-specific protected resource APIs 
have meaning only to these entities.  
The authorization server is merely a conveyor of labels and 
descriptions for these constructs, 
to help the resource owner set policies that guide eventual authorization processes.

パーミッション
^^^^^^^^^^^^^^^^

A permission, in contrast to a :term:`scope type`, 
reflects an _actual_ entitlement to access a :term:`resource set` 
using one or more scope types, 
as the result of an authorization process undergone by a specific :term:`requesting party`.  

A :term:`resource server` registers a :term:`permission request`
with an authorization server on behalf of a client 
(and its requesting parties) 
that has attempted access, 
and transmits the resulting :term:`permission ticket` to the :term:`client`.  

The client subsequently asks the authorization server for :term:`authorization data` 
to be associated with its RPT.  
If the :term:`RPT profile` is in use, 
the authorization server grants (or denies) the permission to the requesting party.  
(If another token profile is in use, 
the authorization server might generate a different type of authorization data, 
such as an authorization decision or a package of the claims it has collected.)

An RPT is bound to a requesting party, 
the client being used by that party, 
the resource server at which protected resources of interest reside, 
and the authorization server that protects those resources.

It becomes associated with as many pieces of authorization data 
as are appropriate for gaining authorized access to resources protected
at that resource server by any single authorization server 
(even if that data applies to resources managed by two or more different
resource owners at the same resource server using the same authorization server).

In the case of the UMA "bearer" token profile, 
each individual permission is associated with the resource owner 
whose policies drove the authorization process.  
This enables meaningful, auditable, and potentially legally enforceable authorization 
for access (see :term:`[UMA-obligations]`).  

Permissions have a validity period that the authorization server has 
the opportunity to control (independently or with input from the resource owner).  
These control options are outside the scope of this specification.

(draft 06, http://tools.ietf.org/html/draft-hardjono-oauth-umacore-06#section-1.4 )
