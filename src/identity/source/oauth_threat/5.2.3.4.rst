5.2.3.4.  Deployment-specific client secrets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A :term:`authorization server` may issue separate 
client identifiers and corresponding secrets 
to the different deployments of a client.  

The effect of such an approach would be to turn otherwise "public" clients 
back into "confidential" clients.

For **web applications**, 
this could mean to create one :term:`client_id` and :term:`client_secret` per web site 
a software package is installed on.  
So the provider of that particular site could request :term:`client id <client_id>` and
:term:`secret <client_secret>` from the authorization server during setup of the web site.

This would also allow to validate some of the properties of that web site, 
such as :term:`redirection URI`, address, and whatever proofs useful.  
The web site provider has to ensure the security of the client secret on the site.

For **native applications**, 
things are more complicated because every installation of the application 
on any device is another deployment.

Deployment specific secrets will require

   1.  Either to obtain a client_id and client_secret during **download process** from the application market, 
       or

   2.  During **installation** on the device.

Either approach will require an automated mechanism for issuing client ids and secrets, 
which is currently not defined by OAuth.

The first approach would allow to achieve a level 
where the client is authenticated and identified, 
whereas the second option only allows to authenticate the client 
but not to validate properties of the client.  

But this would at least help to prevent several replay attacks.  
Moreover, deployment-specific client_id and secret allow to selectively revoke all refresh tokens 
of a specific deployment at once.

.. note::
    
    - :ref:`oauth_threat.4.4.1.4`
    - :ref:`oauth_threat.4.4.1.7`
    - :ref:`oauth_threat.4.5.3`
