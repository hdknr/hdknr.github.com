4.4.1.10.  Threat: Resource Owner Impersonation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When a :term:`client` requests access to protected resources, 
the authorization flow normally involves the resource owner's explicit response 
to the access request, 
either granting or denying access to the protected resources.  

A malicious client can exploit knowledge of the structure of this flow 
in order to gain authorization without the resource owner's consent, 
by transmitting the necessary requests programmatically, 
and simulating the flow against the authorization server.  

That way, 
the client may gain access to the victims resources without her approval.  
An authorization server will be vulnerable to this threat, 
if it uses non-interactive authentication mechanisms 
or split the authorization flow across multiple pages.

The malicious client might embbed a hidden HTML user agent, 
interpret the HTML forms sent by the authorization server, 
and automatically answer with the corresponding form post requests.  
As a pre-requisiete, 
the attacker must be able to execute the authorization process 
in the context of an already authenticated session of 
the resource owner with the authorization server.  

There are different ways to achieve this:

   -  The malicious client could abuse an existing session 
      in an external browser or cross-browser cookies 
      on the particular device.

   -  It could also request authorization for a particular scope and
      silently abuse the resulting session in his browser instance to
      "silently" request another scope.

   -  Alternatively, 
      the attacker might exploit an authorization server's aibility 
      to authenticate the resource owner automatically
      and without user interactions, e.g. based on certificates.

In all cases, 
such an attack is limited to clients running on the victim's device, 
within the user agent or as native app.

Please note: 
Such attacks cannot be prevented using CSRF countermeasures, 
since the attacker just "executes" the URLs 
as prepared by the authorization server including any nonce e.t.c.

Countermeasures:

Authorization servers should decide, 
based on an analysis of the risk associated with this threat, 
whether to assume, detect, or to prevent this threat.

In order to prevent such an attack, 
the :term:`authorization server` may force an user interaction 
based on non-predictable input values as part of the user consent approval.  
The authorization server could

   -  combine password authentication and user consent in a single form,

   -  make use of CAPTCHAs, or

   -  or use one-time secrets send out of bound to the resource owner
      (e.g. via text or instance message).

Alternatively in order to allow the resource owner to detect abuse,
the authorization server could notify the resource owner of any
approval by appropriate means, e.g. text or instant message or
e-Mail.

