4.4.3.  Resource Owner Password Credentials
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

    Threat list:

        - :ref:`oauth_threat.4.4.3.1`
        - :ref:`oauth_threat.4.4.3.2`
        - :ref:`oauth_threat.4.4.3.3`
        - :ref:`oauth_threat.4.4.3.4`
        - :ref:`oauth_threat.4.4.3.5`
        - :ref:`oauth_threat.4.4.3.6`

The resource owner password credentials grant type 
(see [RFC6749], :ref:`Section 4.3 <oauth.4.3>`), 
often used for legacy/migration reasons, 
allows a client to request an access token 
using an end-user's user id and password 
along with its own credential.  

This grant type has higher risk 
because it maintains the UID/password anti-pattern.

Additionally, 
because the user does not have control over 
the authorization process, 
clients using this grant type are not limited by scope 
but instead have potentially the same capabilities 
as the user themselves.  

As there is no authorization step, 
the ability to offer token revocation is bypassed.



Because passwords are often used for more than 1 service, 
this anti-pattern may also put at risk 
whatever else is accessible with the supplied credential.  

Additionally, 
any easily derived equivalent 
(e.g., joe@example.com and joe@example.net) might easily allow
someone to guess that the same password can be used elsewhere.

Impact: 
The resource server can only differentiate scope 
based on the access token being associated with a particular client.  

The client could also acquire long-lived tokens 
and pass them up to an attacker's web service for further abuse.  

The client, eavesdroppers,
or endpoints could eavesdrop the user id and password.

Countermeasures:

-  Except for migration reasons, 
   minimize use of this grant type.

-  The authorization server should validate the :ref:`client id <clinet_id>` associated
   with the particular refresh token with every refresh request
   (Section 5.2.2.2).

-  As per the core OAuth specification, 
   the authorization server must ensure that 
   these transmissions are protected using transport-layer mechanisms 
   such as TLS (see Section 5.1.1).

-  Rather than encouraging users to use a UID and password, 
   service providers should instead encourage users not to use the same
   password for multiple services.

-  Limit use of resource owner password credential grants to
   scenarios where the client application and the authorizing service
   are from the same organization.

( :rfc:`6819`#section-4.4.3 )
