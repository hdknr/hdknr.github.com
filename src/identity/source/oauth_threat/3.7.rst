3.7. Client Identity
--------------------------------

Authentication protocols have typically not taken into account 
the identity of the software component 
acting on behalf of the end-user.

OAuth does this in order to increase the security level 
in delegated authorization scenarios and 
because the client will be able to act without the user being present.

OAuth uses the :term:`_client_id_ <client_id>` (client identity) 
to collate associated request to the same originator, such as

    -   particular end-user authorization process and the corresponding request 
        on the tokens endpoint to exchange the authorization code for tokens or

    -   the initial authorization and issuance of a tokens by an end-user to a particular client 
        and sub-sequent requests by this client to obtain tokens w/o user consent 
        (automatic processing of repeated authorization)

The client identity may also be used by the authorization server 
to display relevant registration information to a user 
when requesting consent for scope requested by a particular client.  
The client identity may be used to limit the number of request for a particular client 
or to charge the client per request.  
Client Identity may furthermore be useful to differentiate access by different clients,
e.g. in server log files.

OAuth defines two client types, **confidential** and **public**, 
based on their ability to authenticate securely with the :term:`authorization server`
(i.e. ability to maintain the confidentiality of their client credentials).  
Confidential clients are capable of maintaining the confidentiality of client credentials 
(i.e. a client secret associated with the client identifier) 
or capable of secure client authentication using other means, 
such as a client assertion (e.g.  SAML) or key cryptography.  
The latter is considered more secure.

The authorization server should determine 
whether the client is capable of keeping its secret confidential 
or using secure authentication.  
Alternatively, the :term:`end-user` can verify the identity of the client, 
e.g. by only installing trusted applications.
The :term:`redirection URI` can be used to prevent delivering credentials 
to a counterfeit client after obtaining end-user authorization, 
but can't be used to verify the client identity.

Clients can be categorized as follows based on the client type, profile 
(e.g. native vs web application) and deployment model:

Deployment-independent :term:`client_id` with pre-registered :term:`redirect_uri` and without :term:`client_secret` 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Such an identity is used by multiple installations of the same software package.  
The identity of such a client can only be validated with the help of the end-user.
This is a viable option for native applications in order to identify the client 
for the purpose of displaying meta information 
about the client to the user and to differentiate clients in log files.  
Revocation of such an identity will affect ALL deployments
Deployment-independent client_id with pre-registered redirect_uri and with client_secret  
This is an option for native applications only, 
since web application would require different redirect URIs.  
This category is not advisable 
because the client secret cannot be protected appropriately (see :ref:`Section 4.1.1 <oauth_threat.4.1.1>`).  
Due to its security weaknesses, 
such client identities have the same trust level as deployment-independent clients without secret.  
Revocation will affect ALL deployments.

Deployment-specific client_id with pre-registered redirect_uri and with client_secret  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The client registration process insures the validation of the client's properties, 
such as redirection URI, website address, web site name, contacts.  
Such a client identity can be utilized for all relevant use cases cited above.  
This level can be achieved for web applications in combination with a manual or user-bound registration process.  
Achieving this level for native applications is much more difficult.  
Either the installation of the application is conducted by an administrator,
who validates the clients authenticity, 
or the process from validating the application to the installation of the application
on the device and the creation of the client credentials is controlled end-to-end by a single entity 
(e.g. application market provider).  
Revocation will affect a single deployment only.

Deployment-specific client_id with client_secret without validated properties  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Such a client can be recognized by the authorization server in transactions with subsequent requests 
(e.g.  authorization and token issuance, refresh token issuance and access token refreshment).  
The authorization server cannot assure any property of the client to end-users.  
Automatic processing of re-authorizations could be allowed as well.  
Such client credentials can be generated automatically without any validation of client properties, 
which makes it another option especially for native applications.  
Revocation will affect a single deployment only.
