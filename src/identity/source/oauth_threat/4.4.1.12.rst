4.4.1.12.  Threat: DoS using manufactured authorization codes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An attacker who owns a botnet can locate the redirect URIs of clients
that listen on HTTP, 
access them with random authorization codes, 
and cause a large number of HTTPS connections to be concentrated 
onto the :term:`authorization server`.  

This can result in a :term:`DoS attack` on the authorization server.

This attack can still be effective even 
when :term:`CSRF` defense/the 'state' parameter are deployed on the client side.  
With such a defense, 
the attacker might need to incur an additional HTTP request 
to obtain a valid CSRF code/ state parameter.  

This apparently cuts down the effectiveness of the attack by a factor of 2.  
However, if the HTTPS/HTTP cost ratio is higher than 2 
(the cost factor is estimated to be around 3.5x at
http://www.semicomplete.com/blog/geekery/ssl-latency.html), 
the attacker still achieves a magnification of resource utilization at
the expense of the authorization server.

Impact: 
There are a few effects that the attacker can accomplish with this OAuth flow 
that they cannot easily achieve otherwise.

   1.  Connection laundering: 
       With the clients as the relay between the attacker and the authorization server, 
       the :term:`authorization server` learns little or no information 
       about the identity of the attacker.  
       Defenses such rate limiting on the offending attacker machines are less effective 
       due to the difficulty to identify the attacking machines.  
       Although an attacker could also launder its
       connections through an anonymizing systems such as Tor, the
       effectiveness of that approach depends on the capacity of the
       annoying system.  On the other hand, a potentially large number
       of OAuth clients could be utilized for this attack.

   2.  Asymmetric resource utilization: 
       The attacker incurs the cost of an HTTP connection and 
       causes an HTTPS connection to be made on the authorization server; 
       and the attacker can co-ordinate the
       timing of such HTTPS connections across multiple clients
       relatively easily.  Although the attacker could achieve something
       similar, say, by including an iframe pointing to the HTTPS URL of
       the authorization server in an HTTP web page and lure web users
       to visit that page, timing attacks using such a scheme may be
       more difficult as it seems nontrivial to synchronize a large
       number of users to simultaneously visit a particular site under
       the attacker's control.

Countermeasures

   -  Though not a complete countermeasure by themselves, CSRF defense
      and the 'state' parameter created with secure random codes SHOULD
      be deployed on the client side.  The client SHOULD forward the
      authorization code to the authorization server only after both the
      CSRF token and the 'state' parameter are validated.

   -  If the client authenticates the user, either through a single sign
      on protocol ( such as OpenID / Facebook Connect ) or through local
      authentication, the client SHOULD suspend the access by a user
      account if the number of invalid authorization codes submitted by
      this user exceeds a certain threshold.

   -  The authorization server SHOULD send an error response to the
      client reporting an invalid authorization code and rate limit or
      disallow connections from clients whose number of invalid requests
      exceeds a threshold.

   -  The :term:`authorization server` MAY in addition sign 
      the :term:`authorization code` using the public key from its SSL certificate, 
      and require the client to validate the signature.  
      To enhance interoperability
      between multiple clients and authorization servers, a standard
      procedure to create and validate the signature (including what
      attributes to sign) MAY be developed and agreed between the
      clients and the servers.
