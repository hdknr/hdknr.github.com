4.4.1.7.  Threat: Authorization code leakage through counterfeit client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The attack leverages the :term:`authorization code` :term:`grant type` 
in an attempt to get another user (victim) to log-in, 
authorize access to his/her resources, 
and subsequently obtain the authorization code 
and inject it into a client application 
using the attacker's account.  
The goal is to associate an access authorization for resources of the victim 
with the user account of the attacker on a client site.

The attacker abuses an existing client application and 
combines it with his own counterfeit client web site.  
The attack depends on the victim expecting the client application 
to request access to a certain resource server.  
The victim, seeing only a normal request from an expected application, approves the request.  
The attacker then uses the victim's authorization 
to gain access to the information unknowingly authorized by the victim.

.. image:: oauth_threat/4.4.1.7.png
    :width: 600px  


The attacker conducts the following flow:

   1.  The attacker accesses the client web site (or application) and
       initiates data access to a particular resource server.  
       The client web site in turn initiates an authorization request to the
       resource server's :term:`authorization server`.  
       Instead of proceeding with the authorization process, 
       the attacker modifies the authorization server end-user authorization URL 
       as constructed by the client to include a redirection URI parameter referring 
       to a web site under his control (attacker's web site).

   2.  The attacker tricks another user (the victim) to open that
       modified end-user authorization URI and to authorize access 
       (e.g.  an email link, or blog link).  
       The way the attacker achieve that goal is out of scope.

   3.  Having clicked the link, 
       the victim is requested to authenticate and authorize the client site to have access.

   4.  After completion of the authorization process, 
       the authorization server redirects the user agent to the attacker's web site
       instead of the original client web site.

   5.  The attacker obtains the authorization code from his web site 
       by means out of scope of this document.

   6.  He then constructs a :term:`redirection URI` to the target web site 
       (or application) based on the original authorization request's redirection URI 
       and the newly obtained authorization code and directs his user agent to this URL.  
       The authorization code is injected into the original client site (or application).

   7.  The client site uses the authorization code to fetch a token 
       from the authorization server and associates this token with the attacker's user account on this site.

   8.  The attacker may now access the victims resources using the client site.

Impact: 
The attackers gains access to the victim's resources as
associated with his account on the client site.

Countermeasures:

   -  The attacker must use another redirection URI for its
      authorization process than the target web site 
      because it needs to intercept the flow.  
      So if the authorization server associates the
      authorization code with the redirection URI of a particular end-user authorization 
      and validates this redirection URI with the redirection URI passed to the tokens endpoint, 
      such an attack is detected (see :ref:`Section 5.2.4.5 <oauth_threat.5.2.4.5>`).

   -  The authorization server may also enforce the usage and validation
      of pre-registered redirect URIs (see :ref:`Section 5.2.3.5 <oauth_threat.5.2.3.5>`).  
      This will allow for an early recognition of session fixation attempts.

   -  For native applications, 
      one could also consider to use deployment-specific client ids and secrets (see :ref:`Section 5.2.3.4 <oauth_threat.5.2.3.4>` ), 
      along with the binding of authorization code to client_id (see :ref:`Section 5.2.4.4 <oauth_threat.5.2.4.4>` ), 
      to detect such an attack **because the attacker does not have access the deployment-specific secret**.  
      Thus he will not be able to exchange the authorization code.

   -  The client may consider to use other flows, 
      which are not vulnerable to this kind of attacks such as "Implicit Grant" or
      "Resource Owner Password Credentials" 
      (see :ref:`Section 4.4.2 <oauth_threat.4.4.2>` or :ref:`Section 4.4.3 <oauth_threat.4.4.3>`).
