3.3. Refresh Token
----------------------------

A :term:`refresh token` represents a long-lasting authorization 
of a certain client to access resources on behalf of a :term:`resource owner`.  
Such tokens are exchanged between :term:`client` and :term:`authorization server`, only.
Clients use this kind of token to obtain ("refresh") new :term:`access tokens`
used for :term:`resource server` invocations.

A refresh token, coupled with a short access token lifetime, 
can be used to grant longer access to resources without involving end user authorization.  
This offers an advantage where resource servers and 
authorization servers are not the same entity, 
e.g. in a distributed environment, 
as the refresh token must always be exchanged at the authorization server.  
The authorization server can revoke the refresh token at any time 
causing the granted access to be revoked once the current access token expires.  
Because of this, a short access token lifetime is important 
if timely revocation is a high priority.

The refresh token is also a secret bound to the client identifier and _instance_ 
which originally requested the authorization and representing the original resource owner grant.  
This is ensured by the authorization process as follows:

    1.  The resource owner and user-agent safely deliver the :term:`authorization code` 
        to the client instance in first place.

    2.  The client uses it immediately in secure transport-level communications 
        to the authorization server and then securely stores the long-lived refresh token.

    3.  The client always uses the refresh token in secure transport-level communications 
        to the authorization server to get an access token (and optionally rollover the refresh token).

So as long as the confidentiality of the particular token can be ensured by the client, 
a refresh tokens can also be used as an alternative mean to authenticate the client instance itself.

