4.4.1.4.  Threat: Malicious client obtains authorization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A malicious client could counterfeit a valid client and 
obtain an access authorization that way.  
The malicious client could even utilize screen scraping techniques 
in order to simulate the user consent in the authorization flow.

Assumption: 
It is not the task of the :term:`authorization server` 
to protect the end-user's device from malicious software.  
This is the responsibility of the platform running 
on the particular device probably in cooperation 
with other components of the respective ecosystem 
(e.g. an application management infrastructure).  
The sole responsibility of the authorization server is to control access 
to the end-user's resources living in resource servers and 
to prevent unauthorized access to them.  
Based on this assumption, 
the following countermeasures are available to cope with the threat.


Countermeasures:

   -  The :term:`authorization server` should authentication the client, 
      if possible (see :ref:`Section 5.2.3.4 <oauth_threat.5.2.3.4>`).  

      Note: 
      the authentication takes
      place after the end-user has authorized the access.

   -  The authorization server should validate the client's :term:`redirection URI` 
      against the pre-registered redirection URI, if one exists (see :ref:`Section 5.2.3.5 <oauth_threat.5.2.3.5>`).  

      Note: 
      The validation of the :term:`redirection URI` is
      the only technical mean to recognize a malicious :ref:`client id <client_id>`
      in advance of the authorization process.  
      Further note this does not work for :term:`native applications` 
      because in contrast to :ref:`web applications` this URI is not bound to a single communication endpoint.  
      The valid client's redirection URI (typically with custom scheme) can be used by a malicious client on any device.

   -  After authenticating the end-user, 
      the authorization server should ask him/her for :term:`consent`.  
      In this context, the user shall be explained 
      the :term:`purpose`, :term:`scope`, and :term:`duration` of the authorization.
      Moreover, the authorization server must view to the end-user the **meta data** [#]_
      it associates with the particular client.  
      It is up to the user to validate the binding of this data to the particular application 
      (e.g.  Name) and to approve the authorization request.
      (see :ref:`Section 5.2.4.3 <oauth_threat.5.2.4.3>` ).

   -  The :term:`authorization server` must not perform automatic re-authorizations 
      for clients it is unable to reliably authenticate or validate (see :term:`Section 5.2.4.1 <oauth_threat.5.2.4.1>` ).

   -  If the authorization server automatically authenticates the end-user, 
      it may nevertheless require some user input in order to prevent screen scraping.  
      Examples are :term:`CAPTCHAs <CAPTCHA>` or user-specific secret like :term:`PIN codes <PIN code>`.

   -  The authorization server may also limit the :term:`scope` of tokens it issues to clients 
      it cannot reliably authenticate (see :ref:`Section 5.1.5.1 <oauth_threat.5.1.5.1>` ).

.. [#] Connect's UserInfo ? 
