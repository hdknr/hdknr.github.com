4.4.2.5.  Threat: CSRF attack against redirect-uri
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cross-Site Request Forgery (:term:`CSRF`) is a web-based attack 
whereby HTTP requests are transmitted from a user 
that the website trusts or has authenticated 
(e.g., via HTTP redirects or HTML forms).  
CSRF attacks on OAuth approvals can allow an attacker 
to obtain authorization to OAuth protected resources 
without the consent of the User.

This attack works against the :term:`redirection URI` used in the implicit grant flow.  
An attacker could acquire an :term:`access token` to their own protected resources.  
He could then construct a redirection URI and embed their access token in that URI.  
If he can trick the user into following the redirection URI and 
the client does not have protection against this attack, 
the user may have the attacker's access token authorized within their client.

Impact: 
The user accesses resources on behalf of the attacker.  
The effective impact depends on the type of resource accessed.  
For example, the user may upload private items to an attacker's resources.  
Or when using OAuth in 3rd party login scenarios, 
the user may associate his client account with the attacker's identity 
at the external identity provider.  
This way the attacker could easily access the victim's data 
at the client by logging in from another device with his credentials 
at the external identity provider.

Countermeasures:

   -  The :term:`state` parameter should be used to link the authorization request 
      with the redirection URI used deliver the access token.
      This will ensure the client is not tricked into completing any redirect callback 
      unless it is linked to an :term:`authorization request`
      the client initiated.  
      The :term:`state` parameter should be unguessable and 
      the client should be capable of keeping the :term:`state` parameter **secret**.

   -  Client developers and end-user can be educated not follow untrusted URLs.

