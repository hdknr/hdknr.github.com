3.1.  Tokens
------------------------

OAuth makes extensive use of all kinds of tokens 
(:term:`access tokens`, :term:`refresh tokens`, :term:`authorization codes`).  
The information content of a token can be represented in two ways as follows:

.. glossary::

   Handle
      (or :term:`artifact`)  
      a reference to some internal data structure within the authorization server, 
      the internal data structure contains the attributes of the token, 
      such as user id, scope, etc.
      Handles enable simple revocation and do not require cryptographic
      mechanisms to protected token content from being modified.  
      On the other hand, handles require communication between issuing and
      consuming entity (e.g. authorization and resource server) in order
      to validate the token and obtain token-bound data.  
      This communication might have an negative impact on performance and
      scalability if both entities reside on different system.  
      Handles are therefore typically used if the issuing and consuming entity
      are the same.  
      A 'handle' token is often referred to as an 'opaque' token 
      because the resource server does not need to be able to interpret 
      the token directly, it simply uses the token.

   Assertions
      (aka self-contained token)  
      a parseable [#]_ token.  
      An assertion typically has a :term:`duration`, an :term:`audience`, 
      and is digitally signed containing information about the user and the client.
      Examples of assertion formats are SAML assertions and Kerberos tickets.  
      Assertions can typically directly be validated and used
      by a resource server without interactions with the authorization server.  
      This results in better performance and scalability in deployment 
      where issuing and consuming entity reside on different systems.  
      Implementing token revocation is more difficult with assertions than with handles.

.. [#] To break (a sentence) down into its component parts of speech with an explanation of the form, function, and syntactical relationship of each part.

Tokens can be used in two ways to invoke requests on resource servers as follows:

.. glossary::

   bearer token  
      A 'bearer token' is a token that can be used by any client who has received the token 
      (e.g.  [I-D.ietf-oauth-v2-bearer]).  
      Because mere possession is enough to use the token it is important 
      that communication between endpoints be secured to ensure 
      that only authorized end-points may capture the token.  
      The bearer token is convenient to client applications 
      as it does not require them to do anything to use them (such as a proof of identity).  
      Bearer tokens have similar characteristics to web single-sign-on (SSO) cookies used in browsers.

   proof token  
      A 'proof token' is a token that can only be used by a specific client.  
      Each use of the token, requires the client to perform some action that proves 
      that it is the authorized user of the token.  
      Examples of this are MAC tokens, 
      which require the client to digitally sign the resource request with a secret
      corresponding to the particular token send with the request
      (e.g.[I-D.ietf-oauth-v2-http-mac]).

