4.1.2. Threat: Obtain Refresh Tokens
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Depending on the :term:`client type`, 
there are different ways :term:`refresh tokens <refresh token>` may be revealed to an attacker.  
The following sub-sections give a more detailed description of the different attacks 
with respect to different client types and further specialized countermeasures.  
Some generally applicable countermeasure to mitigate such attacks shall be given in advance:
    

    -   The :term:`authorization server` must validate the :term:`client id <client_id>`
        associated with the particular refresh token with every refresh request 
        - :ref:`Section 5.2.2.2 <oauth_threat.5.2.2.2>`

    -   Limited :ref:`scope` tokens - :ref:`Section 5.1.5.1 <oauth_threat.5.1.5.1>`

        Refresh token revocation - :ref:`Section 5.2.2.4 <oauth_threat.5.2.2.4>`

    -   Client secret revocation - :ref:`Section 5.2.3.6 <oauth_threat.5.2.3.6>`

    -   Refresh tokens can automatically be replaced in order to detect
        unauthorized token usage by another party (Refresh Token Rotation)
        - :ref:`Section 5.2.2.3 <oauth_threat.5.2.2.3>`

*Attack: Obtain Refresh Token from Web application.* 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An attack may obtain the refresh tokens issued to a web server client.  
Impact: Exposure of all refresh tokens on that side.

Countermeasures:

    -   Standard web server protection measures - :ref:`Section 5.3.2 <oauth_threat.5.3.2>`

    -   Use strong client authentication 
        (e.g. client_assertion / client_token), 
        so the attacker cannot obtain the client secret
        required to exchange the tokens - :ref:`Section 5.2.3.7 <oauth_threat.5.2.3.7>`


*Attack: Obtain Refresh Token from Native clients.* 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On native clients, leakage of a refresh token typically affects a single user, only.

Read from local filesystem:

    The attacker could try get file system access on the device and read the refresh tokens.  
    The attacker could utilize a malicious application for that purpose.

Countermeasures:

    -   Store secrets in a secure storage - :ref:`Section 5.3.3 <oauth_threat.5.3.3>`

    -   Utilize device lock to prevent unauthorized device access - :ref:`Section 5.3.4 <oauth_threat.5.3.4>`


Steal device: 

    The host device (e.g. mobile phone) may be stolen.
    In that case, 
    the attacker gets access to all applications under the identity of the legitimate user.

Countermeasures:

    -   Utilize device lock to prevent unauthorized device access - :ref:`Section 5.3.4 <oauth_threat.5.3.4>`

    -   Where a user knows the device has been stolen, 
        they can revoke the affected tokens - :ref:`Section 5.2.2.4 <oauth_threat.5.2.2.4>`

Clone device: 

    All device data and applications are copied to another device.  
    Applications are used as-is on the target device.

Countermeasures:

    -   Combine refresh token request with device identification - :ref:`Section 5.2.2.5 <oauth_threat.5.2.2.5>`

    -   Refresh Token Rotation - :ref:`Section 5.2.2.3 <oauth_threat.5.2.2.3>`

    -   Where a user knows the device has been cloned, 
        they can use this countermeasure - Refresh Token Revocation - :ref:`Section 5.2.2.4 <oauth_threat.5.2.2.3>`

