4.4.1.1.  Threat: Eavesdropping or leaking authorization codes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An attacker could try to eavesdrop transmission of the :term:`authorization code`
between :term:`authorization server` and :term:`client`.  
Furthermore, authorization codes are passed via the browser 
which may unintentionally leak those codes to untrusted web sites and attackers by different ways:

   -  Referrer headers: 
      browsers frequently pass a "referer" header 
      when a web page embeds content, 
      or when a user travels from one web page to another web page.  
      These referrer headers may be sent even
      when the origin site does not trust the destination site.  
      The referee header is commonly logged for traffic analysis purposes.

   -  Request logs: 
      web server request logs commonly include query parameters on requests.

   -  :term:`Open redirectors`: 
      web sites sometimes need to send users to another destination via a redirector.  
      Open redirectors pose a particular risk to web-based delegation protocols 
      because the redirector can leak verification codes to untrusted destination sites.

   -  Browser history: 
      web browsers commonly record visited URLs in the browser history.  
      Another user of the same web browser may be able
      to view URLs that were visited by previous users.


Note: 

A description of a similar attacks on the :term:`SAML` protocol can be found at 
http://www.oasis-open.org/committees/download.php/3405/ oasis-sstc-saml-bindings-1.1.pdf (S.4.1.1.9.1), 
http://www.thomasgross.net/publications/papers/ GroPfi2006-SAML2_Analysis_Janus.WSSS_06.pdf and 
http:// www.oasis-open.org/committees/download.php/11191/ sstc-gross-sec-analysis-response-01.pdf.

Countermeasures:

   -  Authorization server as well as the :term:`client` MUST ensure that 
      these transmissions are protected using transport-layer mechanisms 
      such as :term:`TLS` or SSL (see :ref:`Section 5.1.1 <oauth_threat.5.1.1>`).

   -  The :term:`authorization server` shall require the client to authenticate wherever possible, 
      so the binding of the authorization code to a certain client can be validated in a reliable way 
      (see :ref:`Section 5.2.4.4 <oauth_threat.5.2.4.4>` ).

   -  Limited :term:`duration` of authorization codes - :ref:`Section 5.1.5.3 <oauth_threat.5.1.5.3>`

   -  The authorization server SHOULD enforce a one time usage restriction
      (see :ref:`Section 5.1.5.4 <oauth_threat.5.1.5.4>`).

   -  If an Authorization Server observes multiple attempts to redeem a :term:`authorization code`, 
      the Authorization Server may want to revoke all tokens granted based on the authorization code 
      (see :ref:`Section 5.2.1.1 <oauth_threat.5.2.1.1>` ).

   -  In the absence of these countermeasures, 
      reducing :term:`scope` (:ref:`Section 5.1.5.1 <oauth_threat.5.1.5.1>`) and 
      :term:`expiry time` (:ref:`Section 5.1.5.3 <oauth_threat.5.1.5.3>`) 
      for :term:`access tokens <access token>` can be used to reduce the damage in case of leaks.

   -  The client server may reload the target page of the redirection URI 
      in order to automatically cleanup the browser cache.

