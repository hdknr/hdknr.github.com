2.3.1. The Authorizing User-Requesting Party Trust Relationships at the Heart of UMA
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This is the set of trust relationships 
that describes the overall purpose of UMA. 
(The :term:`authorizing user` works through the :term:`AM` as a proxy for authorization management.)

.. image:: uma_trust/U-R.png


.. list-table::

    *   - TR  
        - Who relies on whom?     
        - Expected behavior of the responsible party  
        - When is TR formed?  
        - Comments

    *   - U⇾R(am)     
        - :term:`Authorizing user` relies on :term:`requesting party`    
        - To truthfully supply claims required for access authorization to the :term:`AM`. 

          To adhere to any promises made in the form of :term:`self-asserted claims`.    
        - In :term:`UMA phase 2`, 
          when the :term:`requesting party` supplies claims to the :term:`AM`.    
        - This is precisely the **end-to-end access authorization agreement** that :term:`UMA` exists to forge.

    *   - R⇾U(am)     
        - :term:`Requesting party` relies on :term:`authorizing user`     
        - To respect the boundaries of **data usage constraints** given to the :term:`requesting party`.  
        - In :term:`UMA phase 2`, 
          when the :term:`AM` grants the :term:`requesting party` a permission for the :term:`requested scope`.   
        - For example, 
          the user should not subsequently protest the :term:`requesting party`’s resale of the user’s data 
          if this was allowed by the terms of the access authorization. 

          The :term:`AM` operator acts as the user’s **proxy** 
          (in the U⇾AM relationship forged previously) set the boundaries of permissions 
          based on the user's policies. 
