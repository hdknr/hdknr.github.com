5.2.1.  Positive Assertion
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

    About negative assertion ? `Issue 159 <https://bitbucket.org/openid/connect/issue/159>`_

Upon successful verification of the :term:`refresh token`, 
a positive assertion response returns the "application/json" media type 
and the response body is the :ref:`Access Token Response of the OpenID Connect Messages 1.0 [OpenID.Messages] <messages_3_2_2>`.

The assertion is a JSON structure which MUST contain the following values:

    access_token
        The access token. 

    id_token
        The ID Token associated with the authentication session. 

    token_type
        Specifies the access token type. This specification defines the "JWT" type for a JWT token. 

In addition, it can contain the optional **refresh_token**, **expires_in**, and **scope** values.

Following is a non-normative example of the refresh token request and response:

::

    POST /token HTTP/1.1
    Host: server.example.com
    Content-Type: application/x-www-form-urlencoded
    
    client_id=s6BhdRkqt3
    &client_secret=some_secret12345
    &grant_type=refresh_token
    &refresh_token=8xLOxBtZp8
    &scope=openid
    
    
    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache
    
    {
        "access_token": "TlBN45jURg",
        "token_type": "Bearer",
        "refresh_token": "9yNOxJtZa5",
        "expires_in": 3600,
        "id_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9zZXJ2ZXIuZXhhbXBsZS5jb20iLCJ1c2VyX2lkIjoiMj
    Q4Mjg5NzYxMDAxIiwiYXVkIjoiaHR0cDpcL1wvY2xpZW50LmV4YW1wbGUuY29tIiwiZXhwIjoxMzExMjgxOTcwfQ.eDesUD0vzDH3T1G3liaTNOrfaeWYjuR
    CEPNXVtaazNQ"
    }
