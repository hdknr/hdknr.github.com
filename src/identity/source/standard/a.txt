============================
OpenID Connect Standard 1.0
============================

Based on `OpenID Connect Standard 1.0 - draft 04 <http://openid.net/specs/openid-connect-standard-1_0.html>`_ 
(September 2, 2011)

.. _standard_abstract:

Abstract
===========

OpenID Connect 1.0 is a simple identity layer on top of :term:`OAuth 2.0` protocol. 
It allows a web site or application to verify the identity of the user based on the authentication performed by the server,
as well as to obtain basic profile information about the user in an interoperable and RESTful manner.

OpenID Connect Standard 1.0 is an HTTP protocol binding for OpenID Connect Messages 1.0 request and response messages. 
(":doc:`messages`")

.. _standard_2:

2.  Terminology
======================

Followings are the additional terminology defined in this specification in addition to those defined in OpenID Connect Messages 1.0 [OpenID.Messages] and OAuth 2.0 [OAuth.2.0].

.. glossary::

    Artifact
        A small string that acts as a reference to the larger body of data. 

    Request File
        A JSON structure that captures the OpenID Connect Messages 1.0 [OpenID.Messages] Authorization Request parameters 
        that can be pointed by a URL that is reachable by the Authorization Server.  ( ":doc:`messages`" )

    Request URI
        A URL that points to the Request File. 
        It MUST be accessible by the Authorization Server. 

    Request Registration Endpoint
        An HTTPS Endpoint URL provided by the Authorization Server 
        so that the Client MAY register the Request File to obtain the Request URI. 

.. _standard_3:

3.  HTTP Protocol Binding
==============================

The HTTP [:rfc:`2616`] protocol is a widely used application level protocol for distribute, collaborative, hypermedia systems. 
It's ubiquitousness makes it an ideal protocol for use by OpenID Connect. 
This specification describes the binding of the HTTP protocol with the various endpoints described in OpenID Connect Messages [OpenID.Messages]. 

.. _standard_4:

.. include:: standard/4.rst

.. _standard_4_1:

.. include:: standard/4.1.rst

.. _standard_4_1_1:

4.1.1.  Client prepares an Authorization Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When the user wishes to access a Protected Resource, 
and the End-User Authorization has not yet been obtained, 
the Client prepares an Authorization Request to the authorization endpoint.

The scheme used in the Authorization URL MUST be HTTPS.

This binding further constrains the following request parameters

    response_type
        It MUST include **code** and **id_token**. 

Other required parameters in the request include the following:

    client_id
        The client identifier. 

    scope
        It MUST include **openid** as one of the strings. 
        Other values that MAY be included are **profile**, **email**, **address**, and **PPID**. 
        The values specify an additive list of claims that are returned by the :term:`UserInfo endpoint`. 

    redirect_uri
        A redirection URI where the response will be sent. 

The request can contain the following optional parameters:

    state
        An opaque value used to maintain state between the request and the callback. 

    request
        A :term:`JWT` [JWT] encoded :term:`OpenID Request Object`. 

    request_uri
        A URL that points to an OpenID Request Object. 

    display
        A string value that can be **none**, **popup**, or **mobile**. 
        Refer to :doc:`OpenID Connect Messages 1.0 [OpenID.Messages] <messages>` for more information. 

    prompt
        A space delimited list that can contain **login**, **consent**, and **select_account**. 
        Refer to :doc:`OpenID Connect Messages 1.0 [OpenID.Messages] <messages>` for more information 

    nonce
        A random, unique string value. 

    audience
        The identifier of the target audience for an ID token. 

There are three methods to send the request to the authorization endpoint: 
a) query parameters method 
b) request parameter method, 
and c) request file method.

The query parameters method is used in simple cases 
when default :term:`UserInfo` and :term:`ID Token` claims are desired 
and requests and responses do not need to be signed or encrypted.

The request parameter method is used by sending an OpenID Request Object 
when the client desires to retrieve a different set of UserInfo and ID Token claims. 
The request parameter method also allows requests and responses to be signed or encrypted.

The request file method works similar to the request parameter method 
but differs in that it sends an URL as a reference to the OpenID Request Object. 
It enables large requests to be sent securely and compactly even on browsers with limited capabilities. 
Clients SHOULD use the request file method to minimize the request size.

Authorization servers MUST support the use of the HTTP "GET" method as define in RFC 2616 [RFC2616] 
and MAY support the "POST" method at the authorization endpoint.

If using the HTTP "GET" method, the parameters are serialized using URI query string serialization 
as defined in :doc:`OpenID Connect Messages 1.0 [OpenID.Messages] <messages>`. 
If using the HTTP "POST" method, the request parameters are added to the HTTP request entity-body 
using "application/x-www-form-urlencoded" format.

.. _standard_5_1_2:

5.1.2.  Access Token Response
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Upon receipt of the Token Request, 
the Server MUST return either Positive or Negative Assertion that corresponds to the received authorization code.


.. _standard_5_1_2_1:

5.1.2.1.  Positive Assertion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A Positive Assertion response returns the "application/json" media type and the response body is the Access Token Response of the OpenID Connect Messages 1.0 [OpenID.Messages].

The assertion is a JSON structure which MUST contain the following values:

    access_token
        The access token. 

    id_token
        The ID Token associated with the authentication session. 

    token_type
        Specifies the access token type. This specification only support the "Bearer" token type. 

In addition, it can contain the optional refresh_token, expires_in, and scope values.

.. note::
    
    :ref:`issues_31`

Following is a non-normative example of the Positive Assertion:

::

    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache
    
    {
        "access_token": "SlAV32hkKG",
        "token_type": "Bearer",
        "refresh_token": "8xLOxBtZp8",
        "expires_in": 3600,
        "id_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9zZXJ2ZXIuZXhhbXBsZS5jb20iLCJ1c2VyX2lkIjoiMj
    Q4Mjg5NzYxMDAxIiwiYXVkIjoiaHR0cDpcL1wvY2xpZW50LmV4YW1wbGUuY29tIiwiZXhwIjoxMzExMjgxOTcwfQ.eDesUD0vzDH3T1G3liaTNOrfaeWYjuR
    CEPNXVtaazNQ"
    }

.. _standard_6:

6.  UserInfo Endpoint
==========================

To obtain the additional attributes and tokens/assertions, 
the client makes a GET or POST request to the :term:`UserInfo Endpoint`
as in :doc:`OpenID Connect Messages 1.0 [OpenID.Messages] <messages>`.

Authorization servers MUST require the use of a transport-layer security mechanism. 
The authorization server MUST support TLS 1.2 as described in RFC 5246 [RFC5246] 
and MAY support other transport-layer mechanisms with equivalent security.

.. _standard_6_1:

6.1.  UserInfo Request
----------------------------

Client SHOULD send the UserInfo request defined in section :ref:`3.3 <messages_3_3>` 
of the :doc:`OpenID Connect Messages 1.0 [OpenID.Messages]  <messages>`
either in HTTP GET or POST request.

The request parameters are the following:

    access_token
        REQUIRED. 
        The access_token obtained from an OpenID Connect authorization request. 
        This parameter MUST NOT be sent if the access token is sent in the HTTP Authorization header 
        as described in :ref:`Section 7.1 of OAuth 2.0 [OAuth.2.0] <oauth_7_1>`. 
        Access tokens sent in the authorization header must be :doc:`Bearer tokens [OAuth.2.0.Bearer] <bearer>`. 
        If the client is using the HTTP GET method, it SHOULD send the access token in the authorization header. 

    schema
        OPTIONAL. 
        The schema in which the data is to be returned. 
        The only predefined value is **openid**. 
        If this parameter is not included, the response may be a proprietary schema to support backwards compatibility. 

        A URL MAY be passed to define custom schemes not specified by short names. 
        Custom scheme names and responses are out of scope for this specification. 

    id
        This identifier is reserved for backwards compatibility. 
        It MUST be ignored by the endpoint if the openid schema is used. 

The following is a non-normative example. Line wraps are for display purpose only: ::

    POST /userinfo HTTP/1.1
    Host: server.example.com
    Content-Type: application/x-www-form-urlencoded
    
    access_token=SlAV32hkKG

.. _standard_6_2:

6.2.  UserInfo Response
--------------------------

Upon receipt of the UserInfo request, the UserInfo endpoint MUST return the JSON Serialization 
of the UserInfo response as in OpenID Messages [OpenID.Messages] in the HTTP response body. 
The content-type of the HTTP response MUST be set to application/json 
if the response body is a text JSON structure. 
If the JSON response is JWS [JWS] signed or JWE [JWE] encrypted, 
then the content-type MUST be set to application/jwt.

Following is a non-normative example of such response: ::

    HTTP/1.1 200 OK
    Content-Type: application/json
    
    {
     "name": "Jane Doe"
     "given_name": "Jane",
     "family_name": "Doe",
     "email": "janedoe@example.com",
     "picture": "http://example.com/janedoe/me.jpg"
    }
    

.. _standard_6_2_1:

6.2.1.  UserInfo Error Response
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When some error condition arises, the UserInfo endpoint returns the JSON serialized Error Response defined in section 3.3.3 of OpenID Connect Messages 1.0 [OpenID.Messages] in the entity body of the HTTP response using the application/json media type with HTTP response code 400.

Following is a non-normative example of an error response: ::

    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    
    {
      "error":"invalid_request"
    }



