4.1.1.  Client prepares an Authorization Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When the user wishes to access a Protected Resource, 
and the End-User Authorization has not yet been obtained, 
the Client prepares an Authorization Request to the authorization endpoint.

The scheme used in the Authorization URL MUST be HTTPS.

This binding further constrains the following request parameters

    response_type
        It MUST include **code** and **id_token**. 

Other required parameters in the request include the following:

    client_id
        The client identifier. 

    scope
        It MUST include **openid** as one of the strings. 
        Other values that MAY be included are **profile**, **email**, **address**, and **PPID**.  [#]_
        The values specify an additive list of claims that are returned by the :term:`UserInfo endpoint`. 

    redirect_uri
        A redirection URI where the response will be sent. 

.. [#]  `Issue 25 <https://bitbucket.org/openid/connect/issue/25/messages-1011-need-additional-scope#comment-679376>`_ . 
   
The request can contain the following optional parameters:

    state
        An opaque value used to maintain state between the request and the callback. 

    request
        A :term:`JWT` [JWT] encoded :term:`OpenID Request Object`. 

    request_uri
        A URL that points to an OpenID Request Object. 

    display
        A string value that can be **none**, **popup**, or **mobile**. 
        Refer to :ref:`OpenID Connect Messages 1.0 [OpenID.Messages] <messages_3_1_2>` for more information. 

    prompt
        A space delimited list that can contain **login**, **consent**, and **select_account**. 
        Refer to :ref:`OpenID Connect Messages 1.0 [OpenID.Messages] <messages_3_1_2>` for more information 

    nonce
        A random, unique string value.  [#]_

    audience
        The identifier of the target audience for an ID token. 

.. [#] `Issue 95 <https://bitbucket.org/openid/connect/issue/95/standard-411move-nonce-to-required-section#comment-679527>`_


There are three methods to send the request to the authorization endpoint: 
a) query parameters method b) request parameter method, and c) request file method.

The :ref:`query parameters method <standard_4_1_1_1>` is used in simple cases 
when default :term:`UserInfo` and :term:`ID Token` claims are desired 
and requests and responses do not need to be signed or encrypted.

The :ref:`request parameter method <standard_4_1_1_2>` is used by sending an :term:`OpenID Request Object` 
when the client desires to retrieve a different set of UserInfo and ID Token claims. 
The request parameter method also allows requests and responses to be signed or encrypted.

The :ref:`request file method <standard_4_1_1_3>` works similar to the request parameter method 
but differs in that it sends an URL as a **reference to** the OpenID Request Object. 
It enables large requests to be sent securely and compactly even on browsers with limited capabilities. 
Clients SHOULD use the request file method to minimize the request size.

Authorization servers MUST support the use of the HTTP "GET" method as define in RFC 2616 [RFC2616] 
and MAY support the "POST" method at the authorization endpoint.

If using the HTTP "GET" method, the parameters are serialized using URI query string serialization 
as defined in :doc:`OpenID Connect Messages 1.0 [OpenID.Messages] <messages>`. 
If using the HTTP "POST" method, the request parameters are added to the HTTP request entity-body 
using "application/x-www-form-urlencoded" format.
