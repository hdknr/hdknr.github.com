2.2.  Protocol Flows
---------------------------

:term:`Authorization Requests` follow two main paths to obtain :term:`Access Tokens` and :term:`ID Tokens`, 
the :term:`Implicit Flow` and the :term:`Authorization Code Flow`. 
The flows determine how the :term:`Access Token` and :term:`ID Token` are returned to the :term:`Client`. 
:term:`Access Tokens` are credentials used to access :term:`Protected Resources`, 
as defined in :ref:`section 1.4 <oauth_1_4>`  of OAuth 2.0 [:term:`OAuth2.0`]. 
:term:`Access Tokens` represent a :term:`Resource Owner`'s authorization 
and MUST NOT be exposed to unauthorized parties.

The :term:`Implicit Flow` is mainly used by :term:`Clients` implemented in a browser 
using a scripting language. 
The :term:`Access Token` and :term:`ID Token` are returned directly to the :term:`Client`, 
which MAY expose them to the :term:`Resource Owner` and other applications 
which have access to the :term:`Resource Owner`'s User-Agent. 
The :term:`Authorization Server` does not perform :term:`Client` authentication 
before issuing the :term:`Access Token`.

The :term:`Authorization Code Flow` returns an :term:`Authorization Code` to the :term:`Client`, 
which can then exchange it for an :term:`Access Token` directly. 
This provides the added benefit of not exposing the :term:`Access Token` to the :term:`Resource Owner` 
and possibly other malicious applications with access to the :term:`Resource Owner`'s User-Agent. 
The :term:`Authorization Server` can also authenticate the :term:`Client` 
before [#]_ exchanging the :term:`Authorization Code` for an :term:`Access Token`. 
The :term:`Authorization Code flow` is suitable for :term:`Clients` 
that can securely maintain a :term:`Client Secret` between themselves 
and the :term:`Authorization Server` whereas the :term:`Implicit flow` is suitable for :term:`Clients` that cannot.

.. [#] "at the time when" ?

(draft 07)

