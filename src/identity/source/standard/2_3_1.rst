2.3.1.  Client Prepares an Authorization Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :term:`Client` prepares an :term:`Authorization Request` 
to the :term:`Authorization Endpoint` with the request parameters 
using the HTTP "GET" or "POST" method. 
The scheme used in the :term:`Authorization URL` MUST be HTTPS. 
The :term:`Client` MUST perform a TLS/SSL server certificate check, 
per RFC 6125 [:term:`RFC6125`].

.. note::

    Check the OP X.509 certificate when an Authorization Request is being provided at a Client.

The required :term:`Authorization Request` parameters are as follows:

.. glossary::

    response_type
        An :term:`OAuth 2.0` registered :term:`response type` 
        that determines how the :term:`Authorization Response` is returned to the :term:`Client`. 
        As described in 
        :ref:`How to Get an Authorization Code, Access Token, and ID Token (2.2.1) <standard_2_2_1>`, 
        the following registered values are supported:

            - code
            - code id_token
            - id_token
            - token
            - token id_token
            - code token
            - code token id_token

    client_id
        The client identifier. 

    scope
        It MUST include :term:`openid` as one of the **space delimited** ASCII strings. 
        Other values that MAY be included are :term:`profile`, and :term:`email`, :term:`address`. 
        The values specify an additive list of :term:`Claims` 
        that are returned by the :term:`UserInfo Endpoint` as described 
        by :ref:`OpenID Connect Scopes (2.1) <standard_2_1>``. 

    redirect_uri
        A redirection URI where the response will be sent. 
        The Scheme, Host, and Path segments of this URI MUST match 
        one of the :term:`redirect_uris` registered for the :term:`client_id` 
        in the OpenID Connect Dynamic Client Registration 1.0 [:term:`OpenID.Registration`] specification. 

    nonce
        A string value used to associate a browser session with a :term:`id_token`, 
        and to mitigate replay attacks. 
        The value is passed through unmodified to the :term:`ID Token`. 
        One method is to store a random value as a signed session cookie, 
        and pass the value in the nonce paramater. 
        The nonce in the returned :term:`id_token` is compared to 
        the signed session cookie to detect :term:`id_token` replay by third parties. 

The request can contain the following OPTIONAL parameters:

.. glossary::
 
    state
        An opaque value used to maintain state between the request and the callback. 

    request
        A JWT [:term:`JWT`] encoded OpenID Request Object. 

    request_uri
        A URL that points to an :term:`OpenID Request Object`. 

    display
        An ASCII string value that specifies how the :term:`Authorization Server` 
        displays the authentication page to the :term:`End-User`. 
        Refer to :ref:`Sec 2.1.2 of OpenID Connect Messages 1.0 <messages_2_1_2>` [:term:`OpenID.Messages`] 
        for more information. 

    prompt
        A space delimited list of ASCII strings that can contain the values 
        :term:`login`, :term:`consent`, :term:`select_account`, and :term:`none`. 
        Refer to OpenID Connect Messages 1.0 [:term:`OpenID.Messages`] for more information. 

There are three methods to construct and send the request to the :term:`Authorization Endpoint`:

    a.
        Simple Request Method 

    b.
        Request Parameter Method 

    c.
        Request File Method 

The :term:`Simple Request Method` is used in simple cases 
when default :term:`UserInfo` and :term:`ID Token` Claims are desired.

The :term:`Request Parameter Method` is used 
by sending an :term:`OpenID Request Object`
when the :term:`Client` desires to retrieve a different set of :term:`UserInfo` and :term:`ID Token` Claims. 
The request parameter method also allows requests to be signed or encrypted.

The :term:`Request File Method` works similar to the :term:`Request Parameter Method` 
but differs in that it sends an URL as a reference to the :term:`OpenID Request Object`. 
It enables large requests to be sent securely and compactly even on browsers with limited capabilities. 
:term:`Clients` SHOULD use the :term:`Request File Method` to minimize the request size.

(draft 07)

