3.  Assertion Format and Processing Requirements
========================================================================

In order to issue an :term:`access token` response 
as described in The OAuth 2.0 Authorization Protocol 
[I-D.ietf.oauth-v2] 
or to rely on an :term:`assertion` for :term:`client authentication`, 
the authorization server MUST validate the :term:`Assertion` according 
to the criteria below.  
Application of additional restrictions and policy are 
at the discretion of the :term:`authorization server`.

   -  The :term:`Assertion`'s **<Issuer>** element MUST contain 
      a unique identifier for the entity that issued the :term:`Assertion`.

   -  The :term:`Assertion` MUST contain **<Conditions>** element 
      with an **<AudienceRestriction>** element with an **<Audience>** element
      containing a URI reference that identifies the :term:`authorization server`, 
      or the service provider SAML entity of its controlling domain, 
      as an intended audience.  
      The :term:`token endpoint` URL of the :term:`authorization server` 
      MAY be used as an acceptable value for an **<Audience>** element.  
      The :term:`authorization server` MUST verify that 
      it is an intended audience for the :term:`Assertion`.

   -  The :term:`Assertion` MUST contain a **<Subject>** element.  
      The subject MAY identify the :term:`resource owner` 
      for whom the access token is being requested.  
      For :term:`client authentication`, 
      the **Subject** MUST be the :term:`client_id` of the OAuth client.  
      When using :term:`assertions` as an :term:`authorization grant`, 
      the Subject SHOULD identify an authorized accessor 
      for whom the access token is being requested 
      (typically the resource owner, or an authorized delegate).  
      Additional information identifying the subject/principal of the transaction
      MAY be included in an **<AttributeStatement>**.

   -  The :term:`Assertion` MUST have an expiry that limits the time window 
      during which it can be used.  
      The expiry can be expressed either as the NotOnOrAfter attribute of 
      the **<Conditions>** element or as the **NotOnOrAfter** attribute of a suitable 
      **<SubjectConfirmationData>** element.

   -  The **<Subject>** element MUST contain at least one **<SubjectConfirmation>** element 
      that allows the :term:`authorization server` to confirm it as a :term:`Bearer Assertion`.  
      Such a **<SubjectConfirmation>** element MUST have a **Method** attribute 
      with a value of "**urn:oasis:names:tc:SAML:2.0:cm:bearer**".  
      The **<SubjectConfirmation>** element MUST contain 
      a **<SubjectConfirmationData>** element, 
      unless the :term:`Assertion` has a suitable **NotOnOrAfter** attribute 
      on the **<Conditions>** element, 
      in which case the **<SubjectConfirmationData>** element MAY be omitted.
      When present, the **<SubjectConfirmationData>** element MUST have a
      **Recipient** attribute with a value indicating the :term:`token endpoint` URL
      of the :term:`authorization server`.  

      The :term:`authorization server` MUST verify
      that the value of the **Recipient** attribute matches 
      the :term:`token endpoint` URL (or an acceptable alias) 
      to which the :term:`Assertion` was delivered.  

      The **<SubjectConfirmationData>** element MUST have a
      **NotOnOrAfter** attribute that limits the window during which the
      :term:`Assertion` can be confirmed.  

      The **<SubjectConfirmationData>** element
      MAY also contain an **Address** attribute limiting the :term:`client` address
      from which the :term:`Assertion` can be delivered.  
      Verification of the **Address** is at the discretion of the :term:`authorization server`.

   -  The :term:`authorization server` MUST verify that occurrences of the
      **NotOnOrAfter** instant has not passed, 
      subject to allowable clock skew between systems.  
      An invalid **NotOnOrAfter** instant on the **<Conditions>** element 
      invalidates the entire :term:`assertion`.  

      An invalid **NotOnOrAfter** instant on a **<SubjectConfirmationData>** element only
      invalidates the individual **<SubjectConfirmation>**.  
      The **authorization server** MAY reject :term:`assertions` with a **NotOnOrAfter**
      instant that is unreasonably far in the future.  
      The :term:`authorization server` MAY ensure that :term:`Bearer Assertions` are not replayed, 
      by maintaining the set of **used ID** values for the length of time for
      which the :term:`Assertion` would be considered valid 
      based on the applicable **NotOnOrAfter** instant.

   -  If the :term:`Assertion` issuer authenticated the subject, 
      the Assertion SHOULD contain a single **<AuthnStatement>** 
      representing that authentication event.

   -  If the :term:`Assertion` was issued with the intention that 
      the presenter act autonomously on behalf of the subject, 
      an **<AuthnStatement>** SHOULD NOT be included.  

      The presenter SHOULD be identified in the **<NameID>** or similar element, 
      the **<SubjectConfirmation>** element, or
      by other available means like [OASIS.saml-deleg-cs].

   -  Other statements, in particular **<AttributeStatement>** elements, MAY
      be included in the :ref:`Assertion`.

   -  The :term:`Assertion` MUST be digitally signed by the :term:`issuer` and the
      :term:`authorization server` MUST verify the signature.

   -  Encrypted elements MAY appear in place of their plain text
      counterparts as defined in [OASIS.saml-core-2.0-os].

   -  The :term:`authorization server` MUST verify that the :term:`Assertion` is valid
      in all other respects per [OASIS.saml-core-2.0-os], 
      such as (but not limited to) evaluating all content within the **Conditions**
      element including the **NotOnOrAfter** and **NotBefore** attributes,
      rejecting unknown condition types, etc.



.. note::

    .. list-table:: 

        *   - SAML
            - OAuth/Connect

        *   - <Issser>
            - iss

        *   - <AudienceRestriction>
            - aud

        *   - <Subject>
            - user_id (grant) / client_id(client authentication)

        *   - <SubjectConfirmationData NotOnOrAfter />
            - expires_in
