.. _nist-sp800-56a.key_agreement:

6. Key Agreement
==================

.. note::
    「鍵合意」

This Recommendation provides three categories of key agreement schemes (see Table 3). 

The classification of the categories is based on the number of ephemeral keys 
used by the two parties to the key agreement process, parties U and V. 

In category C(i), 
parties U and V have a total of i ephemeral key pairs. 

The first category, C(2), 
consists of schemes requiring the generation of ephemeral key pairs by both parties; 
a C(2) scheme is suitable for an **interactive key establishment protocol**. 

The second category, C(1), 
consists of schemes requiring the generation of an ephemeral key pair by only one party; 
a C(1) scheme is suitable for a **store and forward scenario**, 
but may also be used in an interactive key establishment protocol. 

The third category, C(0), 
consists of schemes that do not use ephemeral keys.

Key confirmation may be added to many of these schemes 
to provide assurance that the participants share the same keying material; 
see :ref:`Section 8 <nist-sp800-56a.8>` for details on key confirmation. 

Each party should have such assurance. 

Although other methods are often used to provide this assurance, 
this Recommendation makes no statement 
as to the adequacy of these other methods.


.. table:: Table 3: Key Agreement Scheme Categories


    +-----------------------------------+-------------------------------------------------------+
    | Category                          | Comment                                               |
    +-----------------------------------+-------------------------------------------------------+
    | C(2): Two ephemeral key pairs     | Each party generates an ephemeral key pair.           |
    +-----------------------------------+-------------------------------------------------------+
    | C(1): One ephemeral key pair      | Only the initiator generates an ephemeral key pair.   |
    |                                   | [#]_                                                  |
    +-----------------------------------+-------------------------------------------------------+
    | C(0): Zero ephemeral key pairs    | No ephemeral keys are used.                           |
    +-----------------------------------+-------------------------------------------------------+


.. note::

    .. [#] Jose ECDH-ES


Each category is comprised of one or more subcategories 
that are classified by the use of :term:`static keys` by the parties (see Table 4). 

In subcategory C(i, j), 
parties U and V have a total of i :term:`ephemeral key` pairs and j :term:`static key` pairs.


.. table:: Table 4: Key Agreement Scheme Subcategories


    +-----------------------------------+-----------------------------------------------------------+
    |  Category                         | Subcategory                                               |
    +-----------------------------------+-----------------------------------------------------------+
    | C(2): Two ephemeral key pairs     | C(2, 2): Each party generates an ephemeral key pair       |
    |                                   | and has a static key pair.                                |
    |                                   +-----------------------------------------------------------+
    |                                   | C(2, 0): Each party generates an ephemeral key pair;      |
    |                                   | no static key pairs are used.                             |
    +-----------------------------------+-----------------------------------------------------------+
    | C(1): One ephemeral key pair      | C(1, 2): The initiator generates an ephemeral key pair    |
    |                                   | and has a static key pair;                                | 
    |                                   | the responder has only a static key pair.  [#]_           |
    |                                   +-----------------------------------------------------------+
    |                                   | C(1, 1): The initiator generates an ephemeral key pair,   |
    |                                   | but has no static key pair;                               |
    |                                   | the responder has only a static key pair.                 |
    +-----------------------------------+-----------------------------------------------------------+
    | C(0): Zero ephemeral key pairs    | C(0, 2): Each party has only a static key pairk           |
    +-----------------------------------+-----------------------------------------------------------+

.. note::

    .. [#] Jose ECDH-ES


The schemes may be further classified by 
whether they use finite field cryptography (FFC) 
or elliptic curve cryptography (ECC). 

A scheme may use either :term:`Diffie-Hellman` or :term:`MQV` primitives (see :ref:`Section 5.7 <nist-sp800-56a.5.7>`). 

Thus, for example, 
C(2, 2, FFC DH) completely classifies the dhHybrid1 scheme of :ref:`Section 6.1.1.1 <nist-sp800-56a.6.1.1.1>` 
as a scheme with two ephemeral keys and two static keys 
that uses finite field cryptography and a Diffie-Hellman primitive (see Table 5).


.. table:: Table 5: Key Agreement Schemes

    +---------------+---------------+---------------+-----------------------+---------------------------+
    | Category      | Subcategory   | Primitive     | Scheme                | Full Classification       |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(2)          | C(2, 2)       | FFC DH        | dhHybrid1             | C(2, 2, FFC DH)           |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(2)          | C(2, 2)       | ECC CDH       | (Cofactor)            |                           | 
    |               |               |               | Full Unified Model    | C(2, 2, ECC CDH)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(2)          | C(2, 2)       | FFC MQV       | MQV2                  | C(2, 2, FFC MQV)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(2)          | C(2, 2)       | ECC MQV       | Full MQV              | C(2, 2, ECC MQV)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(2)          | C(2, 0)       | FFC DH        | dhEphem               | C(2, 0, FFC DH)           |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(2)          | C(2, 0)       | ECC CDH       | (Cofactor)            |                           |
    |               |               |               | Ephemeral Unified     |                           |
    |               |               |               | Model                 | C(2, 0, ECC CDH)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(1)          | C(1, 2)       | FFC DH        | dhHybridOneFlow       | C(1, 2, FFC DH)           |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(1)          | C(1, 2)       | ECC CDH       | (Cofactor)            |                           |
    |               |               |               | One-Pass Unified      |                           |
    |               |               |               | Model                 | C(1, 2, ECC CDH)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(1)          | C(1, 2)       | FFC MQV       | MQV1                  | C(1, 2, FFC MQV)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(1)          | C(1, 2)       | ECC MQV       | One-Pass MQV          | C(1, 2, ECC MQV)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(1)          | C(1, 1)       | FFC DH        | dhOneFlow             | C(1, 1, FFC DH)           |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(1)          | C(1, 1)       | ECC CDH       | (Cofactor)            |                           |
    |               |               |               | One-Pass Diffie-      |                           |
    |               |               |               | Hellman               | C(1, 1, ECC CDH) [#]_     |
    |               |               |               |                       |                           |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(0)          | C(0, 2)       | FFC DH        | dhStatic              | C(0, 2, FFC DH)           |
    +---------------+---------------+---------------+-----------------------+---------------------------+
    | C(0)          | C(0, 2)       | ECC CDH       | Cofactor              |                           |
    |               |               |               | Static   Unified      |                           |
    |               |               |               | Model                 | C(0, 2, ECC CDH)          |
    +---------------+---------------+---------------+-----------------------+---------------------------+

.. note::
    .. [#] Jose ECDH-ES

Each party in a key agreement process shall use the same set of valid domain parameters. 

These parameters shall be established and validated 
prior to the initiation of the key agreement process. 

See :ref:`Section 5.5 <nist-sp600-56a.5.5>` for a discussion of domain parameters.

:term:`Party U` shall have an identifier :term:`IDU`. 
If Party U owns a static key pair that is used in a given key agreement transaction, 
then IDU shall be the identifier that is bound to that key pair. 

If Party U does not contribute a static public key as part of a given key agreement transaction, 
then IDU shall be a non-null identifier selected in accordance 
with the protocol utilizing the scheme. 

Similar rules apply for the selection of Party V’s identifier, IDV.

A general flow diagram is provided for each subcategory of schemes. 

The dotted-line arrows represent the distribution of static public keys 
that may be distributed by the parties themselves or by a third party, 
such as a Certification Authority (CA). 

The solid-line arrows represent the distribution of ephemeral public keys 
or nonces that occur during the key agreement or key confirmation process. 

Note that the flow diagrams in this Recommendation 
omit explicit mention of various validation checks that are required. 

The flow diagrams and descriptions in this Recommendation 
assume a successful completion of the key establishment process.

Rationale for selecting schemes for each subcategory, 
C(i, j), is included. 

These rationale sections will provide the user or developer with additional information 
to help make a choice as to which key establishment scheme to use. 

The rationale includes discussions of the security properties for the schemes. 

In general, 
the security properties for each scheme within a subcategory are the same; 
when this is not the case, 
the exceptions are identified. 

See Section 6.1.1.5 specifically. 

These rationale sections do not contain an in-depth discussion 
of all possible security properties of all schemes. 

For further discussion, 
see ANS X9.42 and ANS X9.63. Note that the specific security properties achieved 
depend on whether a static key is used, whether an ephemeral key is used, 
the specific method of calculating the shared secret, and the key confirmation method used, if any.

It is important that a scheme not be chosen based solely on the number of security properties it possesses. 

Rather, 
a scheme should be selected based on how well the scheme fulfills the system requirements. 

For instance, 
in a bandwidth-constrained system, 
a scheme with fewer passes per exchange might be preferable to a scheme with more passes and more security properties.

It is also important to understand that 
a scheme may be a component of a protocol, 
which in turn provides additional security properties not provided by the scheme 
when considered by itself. 

Note that protocols, per se, are not specified in this Recommendation.


