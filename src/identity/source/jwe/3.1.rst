3.1.  Example JWE
------------------------------------------------------------

The following example :term:`JWE Header` declares that:

    - the :term:`Content Encryption Key` is encrypted to the recipient 
      using the :term:`RSA-PKCS1_1.5` algorithm to produce the :term:`JWE Encrypted Key`,

    - the :term:`Plaintext` is encrypted using the :term:`AES-256-GCM` algorithm to 
      produce the :term:`JWE Ciphertext`,

    - the specified **64-bit** :term:`Initialization Vector` 
      with the base64url encoding **__79_Pv6-fg** was used, and

    - the :term:`thumbprint` of the :term:`X.509 certificate` 
      that corresponds to the key used to encrypt the JWE has the base64url encoding **7noOPq-hJ1_hCnvWh6IeYI2w9Q0**.

.. code-block:: javascript

   {"alg":"RSA1_5",
    "enc":"A256GCM",
    "iv":"__79_Pv6-fg",
    "x5t":"7noOPq-hJ1_hCnvWh6IeYI2w9Q0"}

Base64url encoding the bytes of the UTF-8 representation of the :term:`JWE Header` yields 
this :term:`Encoded JWE Header` value (with line breaks for display purposes only):

::

    eyJhbGciOiJSU0ExXzUiLA0KICJlbmMiOiJBMjU2R0NNIiwNCiAiaXYiOiJfXzc5
    X1B2Ni1mZyIsDQogIng1dCI6Ijdub09QcS1oSjFfaENudldoNkllWUkydzlRMCJ9

TBD: 
Finish this example by showing generation of a :term:`Content Encryption Key` (:term:`CEK`), 
using the :term:`CEK` to encrypt the :term:`Plaintext` to produce the :term:`Ciphertext` 
(and base64url encoding it), 
and using the recipient's key to encrypt the :term:`CEK` 
to produce the :term:`JWE Encrypted Key` (and base64url encoding it).

(December 13, 2011)
