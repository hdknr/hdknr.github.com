3.1. Example JWE with an Integrated Integrity Check
------------------------------------------------------------------------

This example encrypts the plaintext "Live long and prosper." to the
recipient using RSAES OAEP and AES GCM.  The AES GCM algorithm has an
integrated integrity check.

The following example JWE Header declares that:

   -  the Content Master Key is encrypted to the recipient using the
      RSAES OAEP algorithm to produce the JWE Encrypted Key and

   -  the Plaintext is encrypted using the AES GCM algorithm with a 256
      bit key to produce the Ciphertext.

.. code-block:: javascript

     {"alg":"RSA-OAEP","enc":"A256GCM"}

Base64url encoding the bytes of the UTF-8 representation of the JWE
Header yields this Encoded JWE Header value:

::

     eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ

The remaining steps to finish creating this JWE are:

   -  Generate a random Content Master Key (CMK)

   -  Encrypt the CMK with the recipient's public key using the RSAES
      OAEP algorithm to produce the JWE Encrypted Key

   -  Base64url encode the JWE Encrypted Key to produce the Encoded JWE
      Encrypted Key

   -  Generate a random JWE Initialization Vector

   -  Base64url encode the JWE Initialization Vector to produce the
      Encoded JWE Initialization Vector

   -  Concatenate the Encoded JWE Header value, 
      a period character ('.'), the Encoded JWE Encrypted Key, 
      a second period character ('.'), 
      and the Encoded JWE Initialization Vector 
      to create the ":term:`additional authenticated data`" 
      parameter for the AES GCM algorithm

   -  Encrypt the Plaintext with AES GCM, 
      using the CMK as the encryption key, 
      the JWE Initialization Vector, 
      and the ":term:`additional authenticated data`" value above, 
      requesting a 128 bit "authentication tag" output

   -  Base64url encode the resulting Ciphertext to create the Encoded
      JWE Ciphertext

   -  Base64url encode the resulting "authentication tag" to create the
      Encoded JWE Integrity Value

   -  Assemble the final representation: 

      The Compact Serialization of
      this result is the concatenation of 
      the Encoded JWE Header, 
      the Encoded JWE Encrypted Key, 
      the Encoded JWE Initialization Vector,
      the Encoded JWE Ciphertext, and 
      the Encoded JWE Integrity Value 
      in that order, 
      with the five strings being separated by four period ('.') characters.

The final result in this example (with line breaks for display
purposes only) is:

::
     eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.
     M2XxpbORKezKSzzQL_95-GjiudRBTqn_omS8z9xgoRb7L0Jw5UsEbxmtyHn2T71m
     rZLkjg4Mp8gbhYoltPkEOHvAopz25-vZ8C2e1cOaAo5WPcbSIuFcB4DjBOM3t0UA
     O6JHkWLuAEYoe58lcxIQneyKdaYSLbV9cKqoUoFQpvKWYRHZbfszIyfsa18rmgTj
     zrtLDTPnc09DSJE24aQ8w3i8RXEDthW9T1J6LsTH_vwHdwUgkI-tC2PNeGrnM-dN
     SfzF3Y7-lwcGy0FsdXkPXytvDV7y4pZeeUiQ-0VdibIN2AjjfW60nfrPuOjepMFG
     6BBBbR37pHcyzext9epOAQ.
     48V1_ALb6US04U3b.
     _e21tGGhac_peEFkLXr2dMPUZiUkrw.
     7V5ZDko0v_mf2PAc4JMiUg

 See Appendix A.1 for the complete details of computing this JWE.

(draft 06, http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption-06#section-3.1 )

.. note::

    - [Header].[Key].[IV].[Text].[Digest]

.. glossary::

    additional authenticated data
        string in form of {header}.{key}.{iv}
        
    authentication tag
        - Bi-product of GCM encryption.  128 bit data.
        - :term:`Encoded JWE Integrity Value` is :term:`base64url` encoded string 
          of :term:`authentication tag`.
    
