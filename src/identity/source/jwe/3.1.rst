3.1. Example JWE using RSAES OAEP and AES GCM
------------------------------------------------------------------------

This example encrypts the plaintext "Live long and prosper." 
to the recipient using :term:`RSAES OAEP` and :term:`AES GCM`.  
The AES GCM algorithm has an integrated integrity check.

The following example JWE Header declares that:

   -  the :term:`Content Master Key` is encrypted to the recipient 
      using the :term:`RSAES OAEP` algorithm to produce the JWE Encrypted Key and

   -  the :term:`Plaintext` is encrypted using the :term:`AES GCM` algorithm 
      with a 256 bit key to produce the Ciphertext.

.. code-block:: javascript

     {"alg":"RSA-OAEP","enc":"A256GCM"}

Base64url encoding the bytes of the UTF-8 representation of 
the :term:`JWE Header` yields this Encoded JWE Header value:

.. code-block:: javascript

     eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ

The remaining steps to finish creating this JWE are:

   -  Generate a random :term:`Content Master Key` (:term:`CMK`)

   -  Encrypt the CMK with the recipient's public key 
      using the RSAES OAEP algorithm to produce the :term:`JWE Encrypted Key`

   -  Base64url encode the :term:`JWE Encrypted Key` to produce 
      the :term:`Encoded JWE Encrypted Key`

   -  Generate a random :term:`JWE Initialization Vector`

   -  Base64url encode the :term:`JWE Initialization Vector` to produce the
      :term:`Encoded JWE Initialization Vector`

   -  Concatenate the :term:`Encoded JWE Header value`, 
      a period character ('.'), 
      the :term:`Encoded JWE Encrypted Key`, 
      a second period character ('.'), 
      and the :term:`Encoded JWE Initialization Vector` 
     to create the "**additional authenticated data**" parameter for the :term:`AES GCM` algorithm

   -  Encrypt the :term:`Plaintext` with :term:`AES GCM`, 
      using the :term:`CMK` as the encryption key, 
      the :term:`JWE Initialization Vector`, 
      and the "**additional authenticated data**" value above,
      requesting a 128 bit "**authentication tag**" output

   -  Base64url encode the resulting :term:`Ciphertext` to create 
      the :term:`Encoded JWE Ciphertext`

   -  Base64url encode the resulting "**authentication tag**" to create the
      :term:`Encoded JWE Integrity Value`

   -  Assemble the final representation: 
      The Compact Serialization of this result is the concatenation of 
      the Encoded JWE Header, 
      the Encoded JWE Encrypted Key, 
      the Encoded JWE Initialization Vector,
      the Encoded JWE Ciphertext, and 
      the Encoded JWE Integrity Value 
      in that order, 
      with the five strings being separated by four period ('.') characters.

The final result in this example (with line breaks for display
purposes only) is:

::

     eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.
     M2XxpbORKezKSzzQL_95-GjiudRBTqn_omS8z9xgoRb7L0Jw5UsEbxmtyHn2T71m
     rZLkjg4Mp8gbhYoltPkEOHvAopz25-vZ8C2e1cOaAo5WPcbSIuFcB4DjBOM3t0UA
     O6JHkWLuAEYoe58lcxIQneyKdaYSLbV9cKqoUoFQpvKWYRHZbfszIyfsa18rmgTj
     zrtLDTPnc09DSJE24aQ8w3i8RXEDthW9T1J6LsTH_vwHdwUgkI-tC2PNeGrnM-dN
     SfzF3Y7-lwcGy0FsdXkPXytvDV7y4pZeeUiQ-0VdibIN2AjjfW60nfrPuOjepMFG
     6BBBbR37pHcyzext9epOAQ.
     48V1_ALb6US04U3b.
     _e21tGGhac_peEFkLXr2dMPUZiUkrw.
     7V5ZDko0v_mf2PAc4JMiUg

See :ref:`Appendix A.1 <jwe.appendix.a.1>` for the complete details of computing this JWE.

(draft 08 , http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption-08#section-3.1 )
