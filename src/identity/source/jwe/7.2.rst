.. _jwe_json_serialization:

7.2. JWE JSON Serialization
------------------------------------------------------------------------------

The :term:`JWE JSON Serialization` represents encrypted content as a JSON object.  
Unlike the :term:`JWE Compact Serialization`, 
content using the JWE JSON Serialization can be encrypted to more than one recipient.

The representation is closely related to that used in the JWE Compact Serialization, 
with the following differences for the JWE JSON Serialization:

   -  Values in the JWE JSON Serialization are represented as members of
      a JSON object, rather than as base64url encoded strings separated
      by period ('.') characters.  (However binary values and values
      that are integrity protected are still base64url encoded.)

   -  The Encoded JWE Header value, if non-empty, is stored in the
      "protected" member.

   -  The Encoded JWE Initialization Vector value is stored in the "iv"
      member.

   -  The Encoded JWE Ciphertext value is stored in the "ciphertext"
      member.

   -  The Encoded JWE Authentication Tag value is stored in the "tag"
      member.

   -  The JWE can be encrypted to multiple recipients, rather than just
      one.  A JSON array in the "recipients" member is used to hold
      values that are specific to a particular recipient, with one array
      element per recipient represented.  These array elements are JSON
      objects.

   -  Each Encoded JWE Encrypted Key value is stored in the
      "encrypted_key" member of a JSON object that is an element of the
      "recipients" array.

   -  Some header parameter values, such as the "alg" value and
      parameters used for selecting keys, can also differ for different
      recipient computations.  Per-recipient header parameter values are
      stored in the "header" members of the same JSON objects that are
      elements of the "recipients" array.

   -  Some header parameters, including the "alg" parameter, can be
      shared among all recipient computations.  These header parameters
      are stored in either of two top-level member(s) of the JSON
      object: the "protected" member and the "unprotected" member.  The
      values of these members are JSON Text Objects containing Header
      Parameters.

   -  Not all header parameters are integrity protected.  The shared
      header parameters in the "protected" member are integrity
      protected, and are base64url encoded.  The per-recipient header
      parameters in the "header" array element members and the shared
      header parameters in the "unprotected" member are not integrity
      protected.  These JSON Text Objects containing header parameters
      that are not integrity protected are not base64url encoded.

   -  The header parameter values used when creating or validating per-
      recipient Ciphertext and Authentication Tag values are the union
      of the three sets of header parameter values that may be present:
      (1) the per-recipient values in the "header" member of the
      recipient's array element, (2) the shared integrity-protected
      values in the "protected" member, and (3) the shared non-
      integrity-protected values in the "unprotected" member.  The union
      of these sets of header parameters comprises the JWE Header.  The
      header parameter names in the three locations MUST be disjoint.

   -  An "aad" (Additional Authenticated Data) member can be included to
      supply a base64url encoded value to be integrity protected but not
      encrypted.  (Note that this can also be achieved when using either
      serialization by including the AAD value as a protected header
      parameter value, but at the cost of the value being double
      base64url encoded.)

The syntax of a JWE using the JWE JSON Serialization is as follows:

.. code-block:: javascript

     {"protected":<integrity-protected shared header contents>",
      "unprotected":<non-integrity-protected shared header contents>",

      "recipients":[
       {"header":"<per-recipient unprotected header 1 contents>",
        "encrypted_key":"<encrypted key 1 contents>"},
       ...
       {"header":"<per-recipient unprotected header N contents>",
        "encrypted_key":"<encrypted key N contents>"}],

      "aad":"<additional authenticated data contents>",
      "iv":"<initialization vector contents>",
      "ciphertext":"<ciphertext contents>",
      "tag":"<authentication tag contents>"
     }

Of these members, only the "ciphertext" member MUST be present.  

The "iv", "tag", and "encrypted_key" members MUST be present when
corresponding JWE Initialization Vector, 
JWE Authentication Tag, and
JWE Encrypted Key values are non-empty.  

The "recipients" member MUST be present when any "header" 
or "encrypted_key" members are needed
for recipients.  At least one of the "header", "protected", and
"unprotected" members MUST be present so that "alg" and "enc" header
parameter values are conveyed for each recipient computation.

The contents of the Encoded JWE Encrypted Key, Encoded JWE
Initialization Vector, Encoded JWE Ciphertext, and Encoded JWE
Authentication Tag values are exactly as defined in the rest of this
specification.  They are interpreted and validated in the same
manner, with each corresponding Encoded JWE Encrypted Key, Encoded
JWE Initialization Vector, Encoded JWE Ciphertext, Encoded JWE
Authentication Tag, and set of header parameter values being created
and validated together.  The JWE Header values used are the union of
the header parameters in the "protected", "unprotected", and
corresponding "header" members, as described earlier.

Each JWE Encrypted Key value is computed using the parameters of the
corresponding JWE Header value in the same manner as for the JWE
Compact Serialization.  This has the desirable property that each
Encoded JWE Encrypted Key value in the "recipients" array is
identical to the value that would have been computed for the same
parameter in the JWE Compact Serialization.  Likewise, the JWE
Ciphertext and JWE Authentication Tag values match those produced for
the JWE Compact Serialization, provided that the Encoded JWE Header
value (which represents the integrity-protected header parameter
values) matches that used in the JWE Compact Serialization.

All recipients use the same JWE Protected Header, JWE Initialization
Vector, JWE Ciphertext, and JWE Authentication Tag values, resulting
in potentially significant space savings if the message is large.
Therefore, all header parameters that specify the treatment of the
Plaintext value MUST be the same for all recipients.  This primarily
means that the "enc" (encryption method) header parameter value in
the JWE Header for each recipient and any parameters of that
algorithm MUST be the same.

See Appendix A.4 for an example of computing a JWE using the JWE JSON
Serialization.

( https://tools.ietf.org/html/draft-ietf-jose-json-web-encryption-13#section-7.2 )
