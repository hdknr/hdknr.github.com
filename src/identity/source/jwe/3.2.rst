3.2. Example JWE with a Separate Integrity Check
------------------------------------------------------------------------------------------

This example encrypts the plaintext 
"No matter where you go, there you are." 
to the recipient using :term:`RSAES-PKCS1-V1_5` and :term:`AES` :term:`CBC`.  

AES CBC does not have an **integrated integrity check**, 
so a separate integrity check calculation is performed using :term:`HMAC SHA-256`, 
with separate encryption and integrity keys being derived from a master
key using the :term:`Concat KDF` 
with the :term:`SHA-256` digest function.

The following example :term:`JWE Header` 
(with line breaks for display purposes only) 
declares that:

   -  the :term:`Content Master Key` is encrypted to the recipient 
      using the :term:`RSAES-PKCS1-V1_5` algorithm 
      to produce the :term:`JWE Encrypted Key` and

   -  the Plaintext is encrypted using the AES CBC algorithm 
      with a 128 bit key to produce the Ciphertext, 
      with the integrity of the Ciphertext and the parameters 
      used to create it being secured
      using the HMAC SHA-256 algorithm.


.. code-block:: javascript

     {"alg":"RSA1_5","enc":"A128CBC+HS256"}

Base64url encoding the bytes of the UTF-8 representation of 
the :term:`JWE Header` yields this :term:`Encoded JWE Header` value:

.. code-block:: javascript

     eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDK0hTMjU2In0

The remaining steps to finish creating this JWE are like the previous
example, but with an additional step to compute the separate
integrity value:

   -  Generate a random :term:`Content Master Key` (:term:`CMK`)

   -  Encrypt the CMK with the recipient's public key 
      using the :term:`RSAES-PKCS1-V1_5` algorithm 
      to produce the :term:`JWE Encrypted Key`

   -  Base64url encode the :term:`JWE Encrypted Key` 
      to produce the :term:`Encoded JWE Encrypted Key`

   -  Generate a random :term:`JWE Initialization Vector`

   -  Base64url encode the :term:`JWE Initialization Vector` to produce the
      :term:`Encoded JWE Initialization Vector`

   -  Use the Concat key derivation function 
      to derive :term:`Content Encryption Key` (CEK) and 
      Content Integrity Key (CIK) values from the CMK

   -  Encrypt the Plaintext with AES CBC using the CEK and JWE
      Initialization Vector to produce the Ciphertext

   -  Base64url encode the resulting Ciphertext to create the Encoded
      JWE Ciphertext

   -  Concatenate the Encoded JWE Header value, 
      a period character ('.'), 
      the Encoded JWE Encrypted Key, 
      a second period character ('.'), 
      the Encoded JWE Initialization Vector, 
      a third period ('.') character, 
      and the Encoded JWE Ciphertext to create the value 
      to integrity protect

   -  Compute the HMAC SHA-256 of this value using the CIK 
      to create the JWE Integrity Value

   -  Base64url encode the resulting JWE Integrity Value to create the
      Encoded JWE Integrity Value

   -  Assemble the final representation: 
      The Compact Serialization of this result is the concatenation of 
      the Encoded JWE Header, 
      the Encoded JWE Encrypted Key, 
      the Encoded JWE Initialization Vector,
      the Encoded JWE Ciphertext, and 
      the Encoded JWE Integrity Value 
      in that order, with the five strings being separated by four period
      ('.') characters.

The final result in this example (with line breaks for display
purposes only) is:

::

     eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDK0hTMjU2In0.
     O6AqXqgVlJJ4c4lp5sXZd7bpGHAw6ARkHUeXQxD1cAW4-X1x0qtj_AN0mukqEOl4
     Y6UOwJXIJY9-G1ELK-RQWrKH_StR-AM9H7GpKmSEji8QYOcMOjr-u9H1Lt_pBEie
     G802SxWz0rbFTXRcj4BWLxcpCtjUZ31AP-sc-L_eCZ5UNl0aSRNqFskuPkzRsFZR
     DJqSSJeVOyJ7pZCQ83fli19Vgi_3R7XMUqluQuuc7ZHOWixi47jXlBTlWRZ5iFxa
     S8G6J8wUrd4BKggAw3qX5XoIfXQVlQZE0Vmkq_zQSIo5LnFKyowooRcdsEuNh9B9
     Mkyt0ZQElG-jGdtHWjZSOA.
     AxY8DCtDaGlsbGljb3RoZQ.
     1eBWFgcrz40wC88cgv8rPgu3EfmC1p4zT0kIxxfSF2zDJcQ-iEHk1jQM95xAdr5Z.
     RBGhYzE8_cZLHjJqqHuLhzbgWgL_wV3LDSUrcbkOiIA

See :ref:`Appendix A.2 <jwe.appendix.a.2>` for the complete details of computing this JWE.

(draft 06, http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption-06#section-3.2)

.. note::

    - [Header].[Key].[IV].[Text].[Digest]
