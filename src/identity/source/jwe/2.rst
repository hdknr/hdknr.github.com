2. Terminology
====================================

.. glossary::

   JSON Web Encryption (JWE)  
      A data structure representing an encrypted
      message.  The structure represents five values: the JWE Header,
      the JWE Encrypted Key, the JWE Initialization Vector, the JWE
      Ciphertext, and the JWE Authentication Tag.

   Authenticated Encryption with Associated Data (AEAD)  
      An AEAD algorithm is one that encrypts the Plaintext, 
      allows Additional Authenticated Data to be specified, 
      and provides an integrated content integrity check 
      over the Ciphertext and Additional Authenticated Data.  

      AEAD algorithms accept two inputs, 
      the Plaintext and the :term:`Additional Authenticated Data` value, 
      and produce two outputs, 
      the Ciphertext and the Authentication Tag value.  

      AES Galois/Counter Mode (GCM) is one such algorithm.


   Plaintext  
      The sequence of octets to be encrypted -- a.k.a., the
      message.  The plaintext can contain an arbitrary sequence of
      octets.

   Ciphertext  
      An encrypted representation of the Plaintext.

   Additional Authenticated Data (AAD)  
      An input to an AEAD operation
      that is integrity protected but not encrypted.

   Authentication Tag  
      An output of an AEAD operation that ensures the
      integrity of the Ciphertext and the Additional Authenticated Data.
      Note that some algorithms may not use an Authentication Tag, in
      which case this value is the empty octet sequence.

   Content Encryption Key (CEK)  
      A symmetric key for the AEAD algorithm
      used to encrypt the Plaintext for the recipient to produce the
      Ciphertext and the Authentication Tag.

   JSON Text Object  
      A UTF-8 [RFC3629] encoded text string representing
      a JSON object; the syntax of JSON objects is defined in Section
      2.2 of [RFC4627].

   JWE Header  
      A JSON Text Object 
      (or JSON Text Objects, when using the JWE JSON Serialization) 
      that describes the encryption operations
      applied to create the :term:`JWE Encrypted Key`, the :term:`JWE Ciphertext`, and
      the :term:`JWE Authentication Tag`. 

      The members of the JWE Header object(s) are Header Parameters.

   JWE Encrypted Key  
      The result of encrypting the Content Encryption
      Key (CEK) with the intended recipient's key using the specified
      algorithm.  Note that for some algorithms, the JWE Encrypted Key
      value is specified as being the empty octet sequence.

   JWE Initialization Vector  
      A sequence of octets containing the
      Initialization Vector used when encrypting the Plaintext.  Note
      that some algorithms may not use an Initialization Vector, in
      which case this value is the empty octet sequence.

   JWE Ciphertext  
      A sequence of octets containing the Ciphertext for a
      JWE.

   JWE Authentication Tag  
      A sequence of octets containing the
      Authentication Tag for a JWE.

   JWE Protected Header  
      A JSON Text Object that contains the portion of
      the JWE Header that is integrity protected.  For the JWE Compact
      Serialization, this comprises the entire JWE Header.  For the JWE
      JSON Serialization, this is one component of the JWE Header.


   Header Parameter  
      A name/value pair that is member of the JWE Header.

   Header Parameter 
      Name  The name of a member of the JWE Header.

   Header Parameter Value  
      The value of a member of the JWE Header.

   Base64url Encoding  
      The URL- and filename-safe Base64 encoding
      described in RFC 4648 [RFC4648], Section 5, with the (non URL-
      safe) '=' padding characters omitted, as permitted by Section 3.2.
      (See Appendix C of [JWS] for notes on implementing base64url
      encoding without padding.)

   Encoded JWE Header  
      Base64url encoding of the :term:`JWE Protected Header`.

   Encoded JWE Encrypted Key  
      Base64url encoding of the JWE Encrypted
      Key.

   Encoded JWE Initialization Vector  
      Base64url encoding of the JWE
      Initialization Vector.

   Encoded JWE Ciphertext  
      Base64url encoding of the JWE Ciphertext.

   Encoded JWE Authentication Tag  
      Base64url encoding of the JWE
      Authentication Tag.

   JWE Compact Serialization  
      A representation of the JWE as the
      concatenation of the Encoded JWE Header, the Encoded JWE Encrypted
      Key, the Encoded JWE Initialization Vector, the Encoded JWE
      Ciphertext, and the Encoded JWE Authentication Tag in that order,
      with the five strings being separated by four period ('.')
      characters.  This representation is compact and URL-safe.

   JWE JSON Serialization  
      A representation of the JWE as a JSON
      structure containing JWE Header, Encoded JWE Encrypted Key,
      Encoded JWE Initialization Vector, Encoded JWE Ciphertext, and
      Encoded JWE Authentication Tag values.  Unlike the JWE Compact
      Serialization, the JWE JSON Serialization enables the same content
      to be encrypted to multiple parties.  This representation is
      neither compact nor URL-safe.

   Collision Resistant Namespace  
      A namespace that allows names to be
      allocated in a manner such that they are highly unlikely to
      collide with other names.  For instance, collision resistance can
      be achieved through administrative delegation of portions of the
      namespace or through use of collision-resistant name allocation
      functions.  Examples of Collision Resistant Namespaces include:
      Domain Names, Object Identifiers (OIDs) as defined in the ITU-T
      X.660 and X.670 Recommendation series, and Universally Unique
      IDentifiers (UUIDs) [RFC4122].  When using an administratively
      delegated namespace, the definer of a name needs to take
      reasonable precautions to ensure they are in control of the
      portion of the namespace they use to define the name.

   StringOrURI  
      A JSON string value, with the additional requirement
      that while arbitrary string values MAY be used, any value
      containing a ":" character MUST be a URI [RFC3986].  StringOrURI
      values are compared as case-sensitive strings with no
      transformations or canonicalizations applied.

   Key Management Mode  
      A method of determining the Content Encryption
      Key (CEK) value to use.  Each algorithm used for determining the
      CEK value uses a specific Key Management Mode.  Key Management
      Modes employed by this specification are Key Encryption, Key
      Wrapping, Direct Key Agreement, Key Agreement with Key Wrapping,
      and Direct Encryption.

   Key Encryption  
      A Key Management Mode in which the Content Encryption
      Key (CEK) value is encrypted to the intended recipient using an
      asymmetric encryption algorithm.

   Key Wrapping  
      A Key Management Mode in which the Content Encryption
      Key (CEK) value is encrypted to the intended recipient using a
      symmetric key wrapping algorithm.

   Direct Key Agreement  
      A Key Management Mode in which a key agreement
      algorithm is used to agree upon the Content Encryption Key (CEK)
      value.

   Key Agreement with Key Wrapping  
      A Key Management Mode in which a key
      agreement algorithm is used to agree upon a symmetric key used to
      encrypt the Content Encryption Key (CEK) value to the intended
      recipient using a symmetric key wrapping algorithm.

   Direct Encryption  
      A Key Management Mode in which the Content
      Encryption Key (CEK) value used is the secret symmetric key value
      shared between the parties.

( https://tools.ietf.org/html/draft-ietf-jose-json-web-encryption-13#section-2 )
