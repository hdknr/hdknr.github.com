2. Terminology
====================================

.. glossary::

   JSON Web Encryption (JWE)  
   JSON Web Encryption
   JWE
      A data structure representing an encrypted message.  

      The structure consists of five parts: 
      the JWE Header,
      the JWE Encrypted Key, 
      the JWE Initialization Vector, 
      the JWE Ciphertext, and 
      the JWE Integrity Value.

   Plaintext  
      The bytes to be encrypted -- a.k.a., the message.  

      The plaintext can contain an arbitrary sequence of bytes.

   Ciphertext  
      An encrypted representation of the Plaintext.

   Content Encryption Key (CEK)  
   Content Encryption Key
   CEK
      A **symmetric key** used to encrypt the
      :term:`Plaintext` for the recipient to produce the :term:`Ciphertext`.

   Content Integrity Key (CIK)  
   Content Integrity Key
   CIK
      A key used with a :term:`MAC` function 
      to ensure the integrity of the :term:`Ciphertext` 
      and the parameters used to create it.

   Content Master Key (CMK)  
   Content Master Key
   CMK
      A key from which the :term:`CEK` and :term:`CIK` are derived.  
    
      When :term:`key wrapping` or :term:`key encryption` are employed, 
      the CMK is **randomly generated** and encrypted to the recipient 
      as the :term:`JWE Encrypted Key`. 

      When **direct encryption** with a **shared symmetric key** is employed, 
      the CMK is the shared key.  
      When key agreement without key wrapping is employed, 
      the CMK is the result of the :term:`key agreement algorithm`.

   JSON Text Object  
      A UTF-8 encoded text string representing a JSON object; 
      the syntax of JSON objects is defined in Section 2.2 of :term:`[RFC4627]`.

   JWE Header  
      A :term:`JSON Text Object` that describes the encryption operations 
      applied to create 
      the :term:`JWE Encrypted Key`, 
      the :term:`JWE Ciphertext`, 
      and the :term:`JWE Integrity Value`.

   JWE Encrypted Key  
      When :term:`key wrapping` or key encryption are employed,
      the :term:`Content Master Key (CMK)` is encrypted with the intended
      recipient's key and the resulting encrypted content is recorded as
      a byte array, which is referred to as the :term:`JWE Encrypted Key`.

      Otherwise, 
      when :term:`direct encryption` with a shared or agreed upon
      symmetric key is employed, 
      the :term:`JWE Encrypted Key` is the empty byte array.

   JWE Initialization Vector  
      A byte array containing the Initialization Vector 
      used when encrypting the :term:`Plaintext`.

   JWE Ciphertext  
      A byte array containing the :term:`Ciphertext`.

   JWE Integrity Value  
      A byte array containing a MAC value that ensures
      the integrity of the Ciphertext and the parameters used to create it.

   Base64url Encoding  
      The URL- and filename-safe Base64 encoding
      described in RFC 4648 :term:`[RFC4648]`, Section 5, 
      with the (non URL-safe) '=' padding characters omitted, 
      as permitted by Section 3.2.  (See Appendix C of :term:`[JWS]` 
      for notes on implementing base64url encoding without padding.)

   Encoded JWE Header  
      Base64url encoding of the :term:`JWE Header`.

   Encoded JWE Encrypted Key  
      Base64url encoding of the :term:`JWE Encrypted Key`.

   Encoded JWE Initialization Vector  
      Base64url encoding of the :term:`JWE Initialization Vector`.

   Encoded JWE Ciphertext  
      Base64url encoding of the JWE Ciphertext.

   Encoded JWE Integrity Value  
      Base64url encoding of the JWE Integrity Value.

   Header Parameter Name  
      The name of a member of the JWE Header.

   Header Parameter Value  
      The value of a member of the JWE Header.

   JWE Compact Serialization  
      A representation of the JWE as the concatenation of 
      the :term:`Encoded JWE Header`, 
      the :term:`Encoded JWE Encrypted Key`, 
      the :term:`Encoded JWE Initialization Vector`, 
      the :term:`Encoded JWE Ciphertext`, and 
      the :term:`Encoded JWE Integrity Value` in that order,
      with the five strings being separated by four period ('.') characters.

   Authenticated Encryption  
      An Authenticated Encryption algorithm is one 
      that provides an integrated content integrity check.

      Authenticated Encryption algorithms accept two inputs, 
      the plaintext and the "additional authenticated data" value, 
      and produce two outputs, 
      the ciphertext and the "authentication tag" value.  
      AES Galois/Counter Mode (GCM) is one such algorithm.

   Collision Resistant Namespace    
      A namespace that allows names to be
      allocated in a manner such that they are highly unlikely to
      collide with other names.  For instance, collision resistance can
      be achieved through administrative delegation of portions of the
      namespace or through use of collision-resistant name allocation
      functions.  

      Examples of Collision Resistant Namespaces include:
      Domain Names, 
      Object Identifiers (OIDs) as defined in the ITU-T X.660 and X.670 Recommendation series, and 
      Universally Unique IDentifiers (UUIDs) :term:`[RFC4122]`.  

      When using an administratively delegated namespace, 
      the definer of a name needs to take reasonable precautions 
      to ensure they are in control of the portion of the namespace 
      they use to define the name.

   StringOrURI  
      A JSON string value, with the additional requirement
      that while arbitrary string values MAY be used, any value
      containing a ":" character MUST be a URI :term:`[RFC3986]`.  

      StringOrURI values are compared as case-sensitive strings with no
      transformations or canonicalizations applied.

( draft 08, http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption-08#section-2 )
