5.2.  Message Decryption
--------------------------------

The message decryption process is the reverse of the encryption
process.  The order of the steps is not significant in cases where
there are no dependencies between the inputs and outputs of the
steps.  If any of these steps fails, the encrypted content cannot be
validated.

It is an application decision which recipients' encrypted content
must successfully validate for the JWE to be accepted.  In some
cases, encrypted content for all recipients must successfully
validate or the JWE will be rejected.  In other cases, only the
encrypted content for a single recipient needs to be successfully
validated.  However, in all cases, the encrypted content for at least
one recipient MUST successfully validate or the JWE MUST be rejected.

1.   Parse the JWE representation to extract the serialized values
     for the components of the JWE -- when using the JWE Compact
     Serialization, the base64url encoded representations of the JWE
     Protected Header, the JWE Encrypted Key, the JWE Initialization
     Vector, the JWE Ciphertext, and the JWE Authentication Tag, and
     when using the JWE JSON Serialization, also the base64url
     encoded representation of the JWE AAD and the unencoded JWE
     Shared Unprotected Header and JWE Per-Recipient Unprotected
     Header values.  When using the JWE Compact Serialization, the
     JWE Protected Header, the JWE Encrypted Key, the JWE
     Initialization Vector, the JWE Ciphertext, and the JWE
     Authentication Tag are represented as base64url encoded values
     in that order, separated by four period ('.') characters.  The
     JWE JSON Serialization is described in Section 7.2.

2.   The encoded representations of the JWE Protected Header, the JWE
     Encrypted Key, the JWE Initialization Vector, the JWE
     Ciphertext, the JWE Authentication Tag, and the JWE AAD MUST be
     successfully base64url decoded following the restriction that no
     padding characters have been used.

3.   The octet sequence resulting from decoding the encoded JWE
     Protected Header MUST be a UTF-8 encoded representation of a
     completely valid JSON object conforming to [RFC7158], which is
     the JWE Protected Header.

4.   If using the JWE Compact Serialization, let the JWE Header be
     the JWE Protected Header; otherwise, when using the JWE JSON
     Serialization, let the JWE Header be the union of the members of
     the JWE Protected Header, the JWE Shared Unprotected Header and
     the corresponding JWE Per-Recipient Unprotected Header, all of
     which must be completely valid JSON objects.

5.   The resulting JWE Header MUST NOT contain duplicate Header
     Parameter names.  When using the JWE JSON Serialization, this
     restriction includes that the same Header Parameter name also
     MUST NOT occur in distinct JSON object values that together
     comprise the JWE Header.

6.   Verify that the implementation understands and can process all
     fields that it is required to support, whether required by this
     specification, by the algorithms being used, or by the "crit"
     Header Parameter value, and that the values of those parameters
     are also understood and supported.

7.   Determine the Key Management Mode employed by the algorithm
     specified by the "alg" (algorithm) Header Parameter.

8.   Verify that the JWE uses a key known to the recipient.

9.   When Direct Key Agreement or Key Agreement with Key Wrapping are
     employed, use the key agreement algorithm to compute the value
     of the agreed upon key.  When Direct Key Agreement is employed,
     let the Content Encryption Key (CEK) be the agreed upon key.
     When Key Agreement with Key Wrapping is employed, the agreed
     upon key will be used to decrypt the JWE Encrypted Key.

10.  When Key Wrapping, Key Encryption, or Key Agreement with Key
     Wrapping are employed, decrypt the JWE Encrypted Key to produce
     the Content Encryption Key (CEK).  The CEK MUST have a length
     equal to that required for the content encryption algorithm.
     Note that when there are multiple recipients, each recipient
     will only be able decrypt any JWE Encrypted Key values that were
     encrypted to a key in that recipient's possession.  It is
     therefore normal to only be able to decrypt one of the per-
     recipient JWE Encrypted Key values to obtain the CEK value.  To
     mitigate the attacks described in RFC 3218 [RFC3218], the
     recipient MUST NOT distinguish between format, padding, and
     length errors of encrypted keys.  It is strongly recommended, in
     the event of receiving an improperly formatted key, that the
     receiver substitute a randomly generated CEK and proceed to the
     next step, to mitigate timing attacks.

11.  When Direct Key Agreement or Direct Encryption are employed,
     verify that the JWE Encrypted Key value is empty octet sequence.

12.  When Direct Encryption is employed, let the Content Encryption
     Key (CEK) be the shared symmetric key.

13.  If the JWE JSON Serialization is being used, repeat this process
     (steps 4-12) for each recipient contained in the representation
     until the CEK value has been determined.

14.  Compute the Encoded Protected Header value BASE64URL(UTF8(JWE
     Protected Header)).  If the JWE Protected Header is not present
     (which can only happen when using the JWE JSON Serialization and
     no "protected" member is present), let this value be the empty
     string.

15.  Let the Additional Authenticated Data encryption parameter be
     ASCII(Encoded Protected Header).  However if a JWE AAD value is
     present (which can only be the case when using the JWE JSON
     Serialization), instead let the Additional Authenticated Data
     encryption parameter be ASCII(Encoded Protected Header || '.' ||
     BASE64URL(JWE AAD)).

16.  Decrypt the JWE Ciphertext using the CEK, the JWE Initialization
     Vector, the Additional Authenticated Data value, and the JWE
     Authentication Tag (which is the Authentication Tag input to the
     calculation) using the specified content encryption algorithm,
     returning the decrypted plaintext and validating the JWE
     Authentication Tag in the manner specified for the algorithm,
     rejecting the input without emitting any decrypted output if the
     JWE Authentication Tag is incorrect.

17.  If a "zip" parameter was included, uncompress the decrypted
     plaintext using the specified compression algorithm.

18.  If all the previous steps succeeded, output the resulting
     Plaintext.

(draft23)
