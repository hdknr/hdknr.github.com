5.1.  Message Encryption
------------------------------------

The message encryption process is as follows.  The order of the steps
is not significant in cases where there are no dependencies between
the inputs and outputs of the steps.

1.   Determine the Key Management Mode employed by the algorithm used
     to determine the Content Encryption Key (CEK) value.  (This is
     the algorithm recorded in the "alg" (algorithm) Header Parameter
     of the resulting JWE.)

2.   When Key Wrapping, Key Encryption, or Key Agreement with Key
     Wrapping are employed, generate a random Content Encryption Key
     (CEK) value.  See RFC 4086 [RFC4086] for considerations on
     generating random values.  The CEK MUST have a length equal to
     that required for the content encryption algorithm.

3.   When Direct Key Agreement or Key Agreement with Key Wrapping are
     employed, use the key agreement algorithm to compute the value
     of the agreed upon key.  When Direct Key Agreement is employed,
     let the Content Encryption Key (CEK) be the agreed upon key.
     When Key Agreement with Key Wrapping is employed, the agreed
     upon key will be used to wrap the CEK.

4.   When Key Wrapping, Key Encryption, or Key Agreement with Key
     Wrapping are employed, encrypt the CEK to the recipient and let
     the result be the JWE Encrypted Key.

5.   When Direct Key Agreement or Direct Encryption are employed, let
     the JWE Encrypted Key be the empty octet sequence.

6.   When Direct Encryption is employed, let the Content Encryption
     Key (CEK) be the shared symmetric key.


7.   Compute the encoded key value BASE64URL(JWE Encrypted Key).

8.   If the JWE JSON Serialization is being used, repeat this process
     (steps 1-7) for each recipient.

9.   Generate a random JWE Initialization Vector of the correct size
     for the content encryption algorithm (if required for the
     algorithm); otherwise, let the JWE Initialization Vector be the
     empty octet sequence.

10.  Compute the encoded initialization vector value BASE64URL(JWE
     Initialization Vector).

11.  If a "zip" parameter was included, compress the Plaintext using
     the specified compression algorithm.

12.  Serialize the (compressed) Plaintext into an octet sequence M.

13.  Create the JSON object(s) containing the desired set of Header
     Parameters, which together comprise the JWE Header: the JWE
     Protected Header, and if the JWE JSON Serialization is being
     used, the JWE Shared Unprotected Header and the JWE Per-
     Recipient Unprotected Header.

14.  Compute the Encoded Protected Header value BASE64URL(UTF8(JWE
     Protected Header)).  If the JWE Protected Header is not present
     (which can only happen when using the JWE JSON Serialization and
     no "protected" member is present), let this value be the empty
     string.

15.  Let the Additional Authenticated Data encryption parameter be
     ASCII(Encoded Protected Header).  

     However if a JWE AAD value is present 
     (which can only be the case when using the JWE JSON Serialization), 
     instead let the Additional Authenticated Data
     encryption parameter be 
     ASCII(Encoded Protected Header || '.' ||
     BASE64URL(JWE AAD)).

     .. note::
        aad が指定されたら、 AAD = protected + aad           

16.  Encrypt M using the CEK, the JWE Initialization Vector, and the
     Additional Authenticated Data value using the specified content
     encryption algorithm to create the JWE Ciphertext value and the
     JWE Authentication Tag (which is the Authentication Tag output
     from the encryption operation).

17.  Compute the encoded ciphertext value BASE64URL(JWE Ciphertext).

18.  Compute the encoded authentication tag value BASE64URL(JWE
     Authentication Tag).


19.  The five encoded values are used in both the JWE Compact
     Serialization and the JWE JSON Serialization representations.

20.  If a JWE AAD value is present, compute the encoded AAD value
     BASE64URL(JWE AAD).

21.  Create the desired serialized output.  The Compact Serialization
     of this result is the string BASE64URL(UTF8(JWE Protected
     Header)) || '.' || BASE64URL(JWE Encrypted Key) || '.' ||
     BASE64URL(JWE Initialization Vector) || '.' || BASE64URL(JWE
     Ciphertext) || '.' || BASE64URL(JWE Authentication Tag).  The
     JWE JSON Serialization is described in Section 7.2.


(draft23)
