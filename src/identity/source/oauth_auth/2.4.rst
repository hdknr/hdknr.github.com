2.4.  Access Token Response
------------------------------------

.. note::
    - :ref:`OpenID Connect Basic Token Reponse  <basic.token_response>`
    - :ref:`OpenID Connect Basic ID Token <basic.id_token>`

If the access token request is valid and authorized, 
the authorization server issues an access token and 
optional refresh token as described in :ref:`Section 5.1 <oauth.5.1>` [RFC6749]
with the exception that the issuance of access_token is OPTIONAL.  

If the request client authentication failed or is invalid, 
the authorization server returns an error response as described in :ref:`Section 5.2 <oauth.5.2>`.

In addition to the parameters described in :ref:`Section 5 <oauth.5>`, 
a JSON Web Token (JWT) [I-D.ietf-oauth-json-web-token] known as an "id_token" is
returned containing the following possible claims:

.. glossary::

   sub     
           REQUIRED.  An identifier for the authenicated subject.  The
           same identifier MUST be return for the same authenticated
           user on the same client_id.  The authenticated user's "sub"
           value MAY change for different client_id values.

   profile 
           OPTIONAL.  A URL which can be used to access the
           authenticated subject user profile data.  The URL MUST point
           to the same user profile as the one that was authenticated.
           The URL MUST be valid for the duration of the associated
           access token and refresh_tokens lifetimes.  [[Editors note:
           Should this be a structured value to indicate the API type
           (SCIM, OIDC, HTML) and to optionally return multiple API
           representations]]

   amr     
           OPTIONAL.  Authentication Methods References.  JSON array of
           strings that are identifiers for authentication methods used
           in the authentication.  For instance, values might indicate
           that both password and OTP authentication methods were used.
           The definition of particular values to be used in the amr
           Claim is beyond the scope of this specification.  Parties
           using this claim will need to agree upon the meanings of the
           values used, which may be context-specific.  The amr value is
           an array of case sensitive strings.  The following is a list
           of valid values:

           pwd         
                       Password authentication, either by user or
                       service if client_secret is used.

           rsa         
                       If authentication was based on the proof of an
                       rsa key.  This includes if authentication was
                       performed by a self-signed JWT with a service
                       owned x509 certificate.

           rsa         
                       One time password.

           mfa         
                       Multiple factor authentication was used.  When
                       this is used the other authentication methods
                       will also be included.

           fed         
                       A federated authentication assertion (e.g.  JWT
                       or SAML) was used.[[should original federated
                       assertion be attached?]]

           none        
                       No authentication was performed.  [[This would
                       not really be used for the amr, but an equivalent
                       claim that indicates the client authentication
                       method.  So for native clients 'none' would be
                       the auth method]]

   auth_time  
           REQUIRED.  The time at which the subject user was
           authenticated expressed in number of seconds from
           1970-01-01T0:0:0Z as measured in UTC until the date/time.
           See [RFC3339] for details regarding date/times in general and
           UTC in particular. 'lat' MAY be a time earlier than when the
           session information was issued as defined by 'iat".

   iat     
           REQUIRED.  The time at which the response or the session
           token was issued expressed in number of seconds from
           1970-01-01T0:0:0Z as measured in UTC until the date/time.
           See [RFC3339] for details regarding date/times in general and
           UTC in particular.[RFC3339] for details regarding date/times
           in general and UTC in particular.

   exp     
           REQUIRED.  The time at which the user authenticated session
           (login) expires expressed in number of seconds from
           1970-01-01T0:0:0Z as measured in UTC until the date/time.
           See [RFC3339] for details regarding date/times in general and
           UTC in particular.  Note "expires_in" referes to the normal
           access token lifespan whereas "exp" refers to the lifespace
           of the user login session.


   alv     
           OPTIONAL.  The authentication assurance level as described by
           [ISO29115] (see also [NIST_SP-800-63-2]).

   iss     
           REQUIRED for session token.  An identifier representing the
           issuer of the authentication.  MAY be the authorization
           endpoint URL.

   aud     
           REQUIRED for session_token.  Contains the client_id of the
           client receiving the assertion.

An non-normative example successful response using session 
(with carriage returns for readability):

::

        HTTP/1.1 200 OK
        Content-Type: application/json;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache
        {
          "access_token":"2YotnFZFEjr1zCsicMWpAA",
          "token_type":"example",
          "expires_in":3600,
          "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
          "id_token":"eyJhbGciOiJub25lIn0.
           eyAic3ViIjoiNWRlZGNjOGItNzM1Yy00MDVmLWUwMjlmIiwicHJvZmlsZSI6Imh0
           dHBzOi8vZXhhbXBsZS5jb20vVXNlcnMvNWRlZGNjOGItNzM1Yy00MDVmLWUwMjlm
           IiwiYXV0aF90aW1lIjoiMTM2Nzk1NjA5NiIsImV4cCI6IjEzNjgwNDI0OTYiLCJh
           bHYiOiIyIiwiaWF0IjoiMTM2Nzk1NjA5OCIsImlzcyI6Imh0dHBzOi8vc2VydmVy
           LmV4YW1wbGUuY29tIiwiYXVkIjoiczZCaGRSa3F0MyIsImV4YW1wbGVfc2Vzc2lv
           bl9wYXJhbWV0ZXIiOiJleGFtcGxlX3ZhbHVlIn0=."
        }

As per the JWT specification, 
the encoded "id_token" is separated into parts by the ".", 
the first part ("eyJhbGciOiJub25lIn0")
indicates the signature algorithm and in this case decodes as:

.. code-block:: javascript

   {"alg":"none"}

The claimset is then decoded as:

.. code-block:: javascript

   {
     "sub":"5dedcc8b-735c-405f-e029f",
     "profile":"https://example.com/Users/5dedcc8b-735c-405f-e029f",
     "auth_time":"1367956096",
     "exp":"1368042496",
     "alv":"2",
     "iat":"1367956098",
     "iss":"https://server.example.com",
     "aud":"s6BhdRkqt3",
     "example_session_parameter":"example_value"
   }


If the "id_token" contains the claim "alv" and its value is higher
than "2", the "id_token" MUST be signed (has a signature alg value
other than "none) AND validated.

All claims defined above MUST be understood before proceeding.
Additional claims/parameters that are not understood MAY be ignored.

The client MUST confirm the "auth_time" is not future dated and "exp"
is not a date currently in the past.


.. note::

    .. list-table:: ID Token/Session Token
        :widths: 40 30 30


        *   - Claim
            - OIDC(ID Token)
            - OAuth Auth(ID Token/Session Token)
    
        *   - iss(Issuer Identifier)
            - REQUIRED 
            - REQUIRED

        *   - sub(Subject identifier)
            - REQUIRED(String Array/String)
            - REQUIRED(client_id)

        *   - aud(Audience Identifier(s))
            - REQUIRED
            - REQUIRED

        *   - exp(Expiration Time)
            - REQUIRED
            - REQUIRED

        *   - iat(Issued At)
            - REQUIRED
            - REQUIRED

        *   - auth_time
            - REQUIRED
            - REQUIRED

        *   - nonce
            - OPTIONAL
            - N/A 

        *   - at_hash(Access Token hash value)
            - OPTIONAL
            - N/A

        *   - acr(:term:`Authentication Context Class Reference`)
            - OPTIONAL
            - N/A

        *   - amr(Authentication Methods References)
            - OPTIONAL
            - OPTIONAL

        *   - :term:`azp` (Authorized Party)
            - OPTIONAL/REQUIRED
            - N/A

        *   - profile
            - N/A
            - OPTIONAL

        *   - alv(:term:`Authentication Assurance Level`) 
            - N/A
            - OPTIONAL

