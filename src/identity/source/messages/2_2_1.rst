2.2.1.  Client Authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

During :term:`Client Registration`, 
the :term:`Client` MAY register an authentication method. 
If no method is registered, 
the default method of :term:`client_secret_basic` MUST be used.

The Supported options are:

.. glossary::

    client_secret_basic
        :term:`Clients` in possession of a client password authenticate 
        with the :term:`Authorization Server` in accordance with 
        :ref:`section 3.2.1 of OAuth 2.0 <oauth_3_2_1>` [:term:`OAuth2.0`] 
        using HTTP Basic authentication scheme. 

    client_secret_post
        :term:`Clients` in possession of a client password authenticate 
        with the :term:`Authorization Server` in accordance with 
        :ref:`section 3.2.1 of OAuth 2.0 <oauth_3_2_1>` [:term:`OAuth2.0`] 
        by including the client credentials in the request body. 

    client_secret_jwt
        Clients in possession of a client password create a JWT using the HS256 algorithm. The HMAC (Hash-based Message Authentication Code) is calculated using the client_secret as the shared key. The client Authenticates in accordance with section 2.2 of (JWT) Bearer Token Profiles [OAuth.JWT] and OAuth 2.0 Assertion Profile [OAuth.Assertions]. The JWT MUST contain the Claims: 

            iss
                REQUIRED. The iss (issuer) claim. This MUST contain the client_id of the OAuth client. 
            prn
                REQUIRED. The prn (principal) claim. This MUST contain the client_id of the OAuth client. 
            aud
                REQUIRED. The aud (audience) claim. A value that identifies the Authorization Server as the intended audience. The Authorization Server MUST verify that it is an intended audience for the token. The Audience SHOULD be the URL of the Authorization Server's Token Endpoint. 
            jti
                REQUIRED. The jti (JWT ID) claim. A unique identifier for the token. The JWT ID MAY be used by implementations requiring message de-duplication for one-time use assertions. 
            exp
                REQUIRED. The exp (expiration) claim that limits the time window during which the JWT can be used. 
            iat
                OPTIONAL. The iat (issued at) claim that identifies the time at which the JWT was issued. 

        The authentication token MUST be sent as the value of the client_assertion parameter. 
        The value of "client_assertion_type" parameter MUST be "urn:ietf:params:oauth:client-assertion-type:jwt-bearer". 

    private_key_jwt
        Clients that have registered a public key sign a JWT using the RS256 algorithm if a RSA key was registered or the ES256 algorithm if a EC key was registered. The client Authenticates in accordance with section 2.2 of (JWT) Bearer Token Profiles [OAuth.JWT] and OAuth 2.0 Assertion Profile [OAuth.Assertions]. The JWT MUST contain the Claims: 

            iss
                REQUIRED. The iss (issuer) claim. This MUST contain the client_id of the OAuth client. 
            prn
                REQUIRED. The prn (principal) claim. This MUST contain the client_id of the OAuth client. 
            aud
                REQUIRED. The aud (audience) claim. A value that identifies the Authorization Server as the intended audience. The Authorization Server MUST verify that it is an intended audience for the assertion. The Audience SHOULD be the URL of the Authorization Server's Token Endpoint. 
            jti
                REQUIRED. The jti (JWT ID) claim. A unique identifier for the token. The token ID MAY be used by implementations requiring message de-duplication for one-time use assertions. 
            exp
                REQUIRED. The exp (expiration) claim that limits the time window during which the JWT can be used. 
            iat
                OPTIONAL. The iat (issued at) claim that identifies the time at which the JWT was issued. 

        The authentication token MUST be sent as the value of the client_assertion parameter. 
        The value of "client_assertion_type" parameter MUST be "urn:ietf:params:oauth:client-assertion-type:jwt-bearer".

        ::

            For example:
    
            POST /token HTTP/1.1
            Host: server.example.com
            Content-Type: application/x-www-form-urlencoded
    
            grant_type=authorization_code&
            code=i1WsRn1uB1&
            client_id=s6BhdRkqt3&
            client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer&
            client_assertion=PHNhbWxwOl...[omitted for brevity]...ZT

(draft 07)
