2.1.2.1.  OpenID Request Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :term:`OpenID Request Object` is used to provide OpenID request parameters 
that MAY differ from the default ones. 
Implementing support for the :term:`OpenID Request Object` is OPTIONAL. 
Supporting it is necessary for implementations 
that need to request or provide sets of Claims 
other than the default :term:`UserInfo`, and :term:`ID Token` Claim sets.

The OpenID Request Object is a JWS [:term:`JWS`] **signed** :term:`base64url` encoded JSON object 
that is passed as the value of the ":term:`request`" parameter in the :term:`Authorization Request`. 
The OpenID Request Object MAY also be **encrypted** using JWE [:term:`JWE`] 
**after signing**, with nesting performed in the same manner as specified for JWTs [:term:`JWT`]. 

The OpenID Request Object MAY alternatively be sent **by reference** 
using :term:`request_url` parameter. 
Parameters that affect the information returned from the :term:`UserInfo Endpoint` 
are in the ":term:`userinfo`" member. 
Parameters that affect the information returned in the :term:`ID Token` 
are in the ":term:`id_token`" member.

.. note::
    - by value : "request"
    - by reference : "request_url"

:term:`Authorization Request` parameters 
that are included in the OAuth 2.0 Authorization Request 
MAY also be included in the :term:`OpenID Request Object` 
(so that they can be part of the signed request). 
All parameter values that are present both in the OAuth 2.0 Authorization Request 
and in the OpenID Request Object MUST exactly match.

:term:`Authorization Request` parameters that are **OPTIONAL** in the OAuth 2.0 specification 
MAY be included in the OpenID Request Object 
without also passing them as OAuth 2.0 Authorization Request parameters, 
with one exception: 
The :term:`scope` parameter **MUST always be present** 
in OAuth 2.0 Authorization Request parameters 
(so that the OAuth 2.0 implementation has access to the openid scope value). 
However, 
the :term:`request` and :term:`request_uri` parameters MUST NOT be included 
in the OpenID Request Object.

The OpenID Request Object MAY contain other members 
that are not defined by this specification. 
With only one exception, 
OpenID Request Object members MUST be understood by both parties; 
that exception is that OpenID Providers MAY ignore requests for Claims 
they cannot provide or do not understand; 
however, 
Relying Parties MAY also consider it an error condition 
if all requested required Claims are not provided.

The OpenID Request Object MAY be **signed** or **unsigned** (plaintext). 
When it is :term:`plaintext`, 
this is indicated by use of the none algorithm [:term:`JWA`] in the JWS header. 
If signed, 
the OpenID Request Object SHOULD contain the Claims :term:`iss` (:term:`issuer`) 
and :term:`aud` (:term:`audience`) as members, 
with their semantics being the same as defined in the JWT [:term:`JWT`] specification.

The OpenID Request Object members defined by this specification are:

.. glossary::

    userinfo
        OPTIONAL. 

        (UserInfo request): 
        Requests affecting the values to be returned from the UserInfo Endpoint. 
        If not present, the UserInfo Endpoint behaves in the default manner. 

    id_token
        OPTIONAL. 

        (ID Token request): 
        Requests affecting the values to be to be returned in the ID Token. 
        If not present, 
        the default ID Token contents are used. 
        If present, 
        these parameters are used to request additional Claims incremental 
        to the default Claims of the ID Token. 

An example OpenID Request Object body before base64url encoding and JWS signing is as follows:

.. code-block:: javascript

    {
     "response_type": "code id_token",
     "client_id": "s6BhdRkqt3",
     "redirect_uri": "https://client.example.org/cb",
     "scope": "openid profile",
     "state": "af0ifjsldkj",
     "userinfo":
       {
         "claims":
           {
             "name": {"essential": true},
             "nickname": null,
             "email": {"essential": true},
             "email_verified": {"essential": true},
             "picture": null
           }
       },
     "id_token":
       {
         "claims":
           {
            "auth_time": {"essential": true},
            "acr": { "values":["2"] }
           },
         "max_age": 86400,
    
       }
    }
    

(draft 10)

