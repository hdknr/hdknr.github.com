2.1.1.  Authorization Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An Authorization Request is a message sent from an RP 
to the OP's Authorization Endpoint. 
It is an extended OAuth 2.0 [OAuth2.0] Authorization Request. 
:ref:`Section 4.1.1 <oauth.4.1.1>` and :ref:`4.2.1 <oauth.4.2.1>` of OAuth 2.0 [OAuth2.0] 
defines the OAuth 2.0 Authorization Request parameters. 

In this specification, the values to the parameters are defined as follows.

.. node::

    MUST respose_type:

        - code
        - token
        - id_token token
        - 
.. glossary::

    response_type
        This parameter controls the parameters returned in the response from the Authorization Endpoint. 
        The OAuth 2.0 specification documents two response types:

            code
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an Authorization Code as defined in the OAuth 2.0 specification. 

                Both successful and error responses MUST be added as parameters to the query component of the response. 
                All tokens are returned from the Token Endpoint. 
                Authorization Servers MUST support this response_type. 

            token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an Access Token 
                as defined in the OAuth 2.0 specification. 

                Both successful and error responses MUST be fragment-encoded. 

                No ID Token is provided to the Client. 

        OpenID Connect supports these additional response types [OAuth.Responses] that have been registered: 

            id_token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an ID Token. 
                Both successful and error responses SHOULD be fragment-encoded. 
                Authorization Servers SHOULD support this response_type. 

            id_token token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include both an Access Token 
                as well as an ID Token. 

                Both successful and error responses SHOULD be fragment-encoded. 
                Authorization Servers MUST support this response_type. 

            code token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include both an Access Token 
                and an Authorization Code as defined in the OAuth 2.0 specification. 

                Both successful and error responses SHOULD be fragment-encoded. 

            code id_token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include both an Authorization Code 
                as well as an ID Token. 

                Both successful and error responses SHOULD be fragment-encoded. 

            code id_token token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an Authorization Code, an ID Token,  
                and an Access Token. 

                Both successful and error responses SHOULD be fragment-encoded. 

        The Authorization Server MUST support all three of the code, id_token, and id_token token values for response_type. 
        The Client may request any OAuth 2.0 registered response type supported by the Authorization Server. 

    scope
        A space delimited, case sensitive list of ASCII string values. 
        The values specify an additive list of voluntary Claims that are returned from the UserInfo Endpoint. 
        The following scope values are defined:

            openid
                REQUIRED. 

                Informs the Authorization Server that the Client is making an OpenID Connect request. 
                If the openid scope value is not present, 
                the request **MUST NOT** be treated as an OpenID Connect request. 
                This scope value requests access to the user_id Claim at the UserInfo Endpoint. 

            profile
                OPTIONAL. 

                This scope value requests that access to the End-User's default profile Claims 
                at the UserInfo Endpoint be granted by the issued Access Token. 

                These claims are: name, family_name, given_name, middle_name, 
                nickname, preferred_username, profile, picture, website, gender, 
                birthdate, zoneinfo, locale, and updated_time. 

            email
                OPTIONAL. 

                This scope value requests that access to the email and email_verified Claims 
                at the UserInfo Endpoint be granted by the issued Access Token. 

            address
                OPTIONAL. 

                This scope value requests that access to address Claim 
                at the UserInfo Endpoint be granted by the issued Access Token. 

            phone
                OPTIONAL. 

                This scope value requests that access to the phone_number Claim 
                at the UserInfo Endpoint be granted by the issued Access Token. 

Other REQUIRED OAuth 2.0 parameters in the request include:

.. glossary::

    client_id
        The OAuth 2.0 Client Identifier. 

    redirect_uri
        A redirection URI where the response will be sent. 

The request MAY contain the following OAuth 2.0 parameters:

.. glossary::

    state
        RECOMMENDED. 

        An opaque value used to maintain state between the request and the callback; 
        it can serve as a protection against XSRF attacks, among other uses. 

The following extension parameters are also defined:

      
.. glossary::

    nonce
        A random, unique string value used to mitigate replay attacks. 

        Use of the nonce is REQUIRED when using the implicit flow and OPTIONAL when using the code flow. 

        .. note::

            - :term:`implicit` flow <= :term:`nonce` 

    display
        OPTIONAL. 

        An ASCII string value that specifies 
        how the Authorization Server displays the authentication and consent user interface pages to the End-User.

            page
                The Authorization Server SHOULD display authentication 
                and consent UI consistent with a full user-agent page view. 

                If the display parameter is not specified this is the default display mode. 

            popup
                The Authorization Server SHOULD display authentication and consent UI consistent 
                with a popup user-agent window. 

                The popup user-agent window SHOULD be 450 pixels wide and 500 pixels tall. 

            touch
                The Authorization Server SHOULD display authentication and consent UI consistent 
                with a device that leverages a touch interface. 

                The Authorization Server MAY attempt to detect the touch device and further customize the interface. 

            wap
                The Authorization Server SHOULD display authentication and consent UI consistent 
                with a "feature phone" type display. 

    prompt
        OPTIONAL. 

        A space delimited, case sensitive list of ASCII string values that specifies 
        whether the Authorization Server prompts the End-User for reauthentication and consent. 
        The possible values are:

        .. glossary::

            none
                The Authorization Server MUST NOT display any authentication or 
                consent user interface pages. 

                An error is returned if the End-User is not already authenticated or 
                the Client does not have pre-configured consent for the requested scopes. 

                This can be used as a method to check for existing authentication and/or consent. 

            login
                The Authorization Server MUST prompt the End-User for reauthentication. 

            consent
                The Authorization Server MUST prompt the End-User for consent 
                before returning information to the Client. 

            select_account
                The Authorization Server MUST prompt the End-User to select a user account. 
                This allows a user who has multiple accounts at the Authorization Server 
                to select amongst the multiple accounts that they may have current sessions for. 

        The prompt parameter can be used by the Client 
        to make sure that the End-User is still present for the current session 
        or to bring attention to the request. 

        If this parameter contains none with any other value, an error is returned. 

    request
        OPTIONAL. 

        An OpenID Request Object value. 

    request_uri
        OPTIONAL. 

        An URL that points to an OpenID Request Object. This is used to pass an OpenID Request Object by reference. 

    id_token_hint
        OPTIONAL. 

        An ID Token passed to the Authorization server 
        as a hint about the user's current or past authenticated session 
        with the client. 

        This SHOULD be present if prompt=none is sent. 
        The value is a JWS [JWS] encoded ID token as signed by the issuer, 
        the JWS [JWS] may be JWE [JWE] encrypted by the public key 
        of the issuer for additional confidentiality. 

        If the id_token received by the RP was encrypted, 
        the Client MUST decrypt the signed id_token (JWS [JWS]). 

        The Client MAY re-encrypt using the key that the server is capable of decrypting. 

    login_hint
        OPTIONAL. 

        A hint to the authorization service as to the login identifier 
        the user may use to authenticate at the authorization service (if necessary). 

        This hint can be used by an RP if it first asks the user 
        for their email address (or other identifier) and 
        then wants to pass that value as a hint to the discovered authorization service. 

        It is recommended that the hint value match the value used for discovery. 
        The use of this parameter is up to the IdP's discretion. 


(draft 13, http://openid.bitbucket.org/openid-connect-messages-1_0.html#auth_req )
