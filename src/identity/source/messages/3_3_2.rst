3.3.2.  Responses
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If the requested schema is "openid", 
the response MUST return a JSON object that contains the full set or 
subset of claims that are defined below. 
Additional claims (not specified below) MAY also be returned.

The members may be represented in multiple languages and scripts. 
To specify the languages and scripts, BCP47 [:rfc:`5646`] language tags MUST be added 
to each member names delimited by a #, 
e.g., familyName#ja-Kana-JP for expressing Family Name in Katakana in Japanese, 
which is commonly used to index and represent the phonetics of 
the Kanji representation of the same represented as familyName#ja-Hani-JP. 

.. _messages_table1:

Table 1: Reserved Member Definitions 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: userinfo_schema.rst

For privacy reasons, OpenID providers may elect to not provide values for some schema elements as part of the "openid" scope.

The UserInfo endpoint MUST return claims in JSON format 
unless a request for a different format is made by the client in the authorization request. 
The UserInfo endpoint MAY return claims in JWT format which can be signed or encrypted via JWS [:doc:`JWS`] and JWE [:doc:`JWE`] respectively. 
The OpenID Request Object describes how to request a different format.  [#]_
The UserInfo endpoint MUST return a **content-type** header to indicate which format is being returned. 
The following are accepted content types: 

    +-------------------+---------------------------+
    | Content-Type      | Format Returned           |
    +===================+===========================+
    | application/json  | plain text JSON object    |
    +-------------------+---------------------------+
    | application/jwt   | A JWT                     |
    +-------------------+---------------------------+

.. [#] How we should prepare OpenID Request Object to negotiate UserInfo data format?


The following is a non-normative normal claims responses:

.. code-block:: javascript


    {
     "name": "Jane Doe"
     "given_name": "Jane",
     "family_name": "Doe",
     "email": "janedoe@example.com",
     "picture": "http://example.com/janedoe/me.jpg"
    }

