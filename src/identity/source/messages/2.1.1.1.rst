2.1.1.1. Request Parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OpenID Connect uses the following OAuth 2.0 request parameters:

.. glossary::

    response_type
        REQUIRED. 
    
        Value that controls the parameters returned in the response from the Authorization Endpoint.

        The OAuth 2.0 specification defines two response types:

            code
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an Authorization Code as defined in the OAuth 2.0 specification. 

                Both successful and error responses MUST be added as parameters to the query component of the response. 
                All tokens are returned from the Token Endpoint. 

                When used by OpenID Connect, 
                an ID Token is also returned from the Token Endpoint. 

                OpenID Providers that are not Self-Issued OPs MUST support this response_type.

            token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an Access Token as defined in the OAuth 2.0 specification. 

                Both successful and error responses **MUST** be **fragment-encoded**. 
                No ID Token is provided to the Client; therefore, 
                this response_type is not used by OpenID Connect.

        OpenID Connect supports these additional response types [OAuth.Responses], which have been registered with IANA:

            id_token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an ID Token. 

                Both successful and error responses SHOULD be **fragment-encoded**. 
                OpenID Providers MUST support this response_type.

            id_token token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include both an Access Token and an ID Token. 

                Both successful and error responses SHOULD be **fragment-encoded**. 
    
                OpenID Providers MUST support this response_type.

            code token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include both an Access Token and an Authorization Code as defined in the OAuth 2.0 specification. 

                When used by OpenID Connect, 
                an ID Token is also returned from the Token Endpoint. 

                Both successful and error responses SHOULD be **fragment-encoded**.

            code id_token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include both an Authorization Code and an ID Token. 
                Both successful and error responses SHOULD be **fragment-encoded**.

            code id_token token
                When supplied as the value for the response_type parameter, 
                a successful response MUST include an Authorization Code, 
                an ID Token, and an Access Token. 

                Both successful and error responses SHOULD be **fragment-encoded**.

        All OpenID Providers MUST support the :term:`id_token` and :term:`token id_token` response types 
        and all OpenID Providers that are not Self-Issued OPs MUST also support the :term:`code` response type.

        The Client may use any OAuth 2.0 registered response type supported by the OpenID Provider 
        other than token (which provides no ID Token).

    client_id
        REQUIRED. 
        OAuth 2.0 Client Identifier.

    scope
        REQUIRED. 

        Space delimited, 
        case sensitive list of ASCII OAuth 2.0 scope values. 

        OpenID Connect requests MUST contain the openid scope value. 

        OPTIONAL scope values of profile, email, address, phone, and offline_access are also defined. 

        See Section 2.4 for more about the scope values defined by this specification.

    redirect_uri
        REQUIRED. 
        Redirection URI to which the response will be sent. 

        This MUST be pre-registered with the OpenID Provider. 

        If the Client uses the OAuth implicit grant type, 
        the redirection URI MUST NOT use the http scheme unless the Client is a native application, 
        in which case it MAY use the http: scheme with localhost as the hostname. 

        If the Client only uses the OAuth :term:`authorization_code` grant type, 
        the redirection URI MAY use the http scheme, 
        provided that the Client Type is confidential, as defined in Section 2.1 of OAuth 2.0.

    state
        RECOMMENDED. 

        Opaque value used to maintain state between the request and the callback; 
        it can serve as a protection against XSRF attacks, among other uses.

This specification also defines the following request parameters:


.. glossary::

    nonce
        REQUIRED or OPTIONAL. 

        Random, unique string value used to mitigate replay attacks. 

        Use of the nonce is REQUIRED for all requests where an ID Token is returned directly from the Authorization Endpoint. 

        It is OPTIONAL when the ID Token is returned from the Token Endpoint.

    display
        OPTIONAL. 

        ASCII string value that specifies how the Authorization Server displays the authentication 
        and consent user interface pages to the End-User. 

        The defined values are:

            page
                The Authorization Server SHOULD display authentication and consent UI consistent with a full User-Agent page view. 
                If the display parameter is not specified this is the default display mode.

            popup
                The Authorization Server SHOULD display authentication and consent UI consistent with a popup User-Agent window. 
                The popup User-Agent window SHOULD be 450 pixels wide and 500 pixels tall.

            touch
                The Authorization Server SHOULD display authentication and consent UI consistent with a device that leverages a touch interface. 
                The Authorization Server MAY attempt to detect the touch device and further customize the interface.

            wap
                The Authorization Server SHOULD display authentication and consent UI consistent with a "feature phone" type display.

    prompt
        OPTIONAL. 

        Space delimited, case sensitive list of ASCII string values that 
        specifies whether the Authorization Server prompts the End-User for reauthentication and consent. 

        The defined values are:

            none
                The Authorization Server MUST NOT display any authentication or consent user interface pages. 
                An error is returned if the End-User is not already authenticated 
                or the Client does not have pre-configured consent for the requested Claims. 

                This can be used as a method to check for existing authentication and/or consent.

            login
                The Authorization Server MUST prompt the End-User for reauthentication.

            consent
                The Authorization Server MUST prompt the End-User for consent before 
                returning information to the Client.

            select_account
                The Authorization Server MUST prompt the End-User to select a user account. 
                This allows a user who has multiple accounts 
                at the Authorization Server to select amongst the multiple accounts 
                that they may have current sessions for.

        The prompt parameter can be used by the Client to make sure that the End-User is still present 
        for the current session or to bring attention to the request. 

        If this parameter contains :term:`none` with any other value, an error is returned.

    max_age
        OPTIONAL. 

        Maximum Authentication Age. 
        Specifies that the End-User must be actively authenticated if the End-User was authenticated longer ago 
        than the specified number of seconds. 
        (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) 

        When max_age is used, the ID Token returned MUST include an auth_time Claim Value.

    ui_locales
        OPTIONAL. 

        End-User's preferred languages and scripts for the user interface, 
        represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. 

        For instance, 
        the value "fr-CA fr en" represents a preference for French as spoken in Canada, 
        then French (without a region designation), followed by English (without a region designation). 
        An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.

    claims_locales
        OPTIONAL. 
        End-User's preferred languages and scripts for Claims being returned, 
        represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. 

        An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.

    id_token_hint
        OPTIONAL. ( まえに出した事のあるID Token ) 

        Previously issued ID Token [id_token] passed to the Authorization Server as a hint 
        about the End-User's current or past authenticated session with the Client. 

        This SHOULD be present when prompt=none is used. 
        If the End-User identified by the ID Token is logged in or is logged in by the request, 
        then the Authorization Server returns a positive response; otherwise, 
        it SHOULD return a negative response.

        If the ID Token received by the RP is encrypted, 
        the Client MUST decrypt the signed ID Token contained within the encrypted ID Token. 
        The Client MAY re-encrypt the signed ID token 
        to the Authentication Server using a key that enables the server to decrypt the ID Token.

        For a Self-Issued ID Token, 
        the sub (subject) of the signed ID Token MUST be sent as the kid (Key ID) of the JWE.

    login_hint
        OPTIONAL. 

        Hint to the Authorization Server about the login identifier the End-User may use to log in (if necessary). 

        This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) 
        and then wants to pass that value as a hint to the discovered authorization service. 

        It is RECOMMENDED that the hint value match the value used for discovery. 
        This value MAY also be a phone number in the format specified for the phone_number Claim. 

        The use of this parameter is left to the OP's discretion.

    acr_values
        OPTIONAL. 

        Requested Authentication Context Class Reference values. 
        Space-separated string that specifies the acr values that 
        the Authorization Server MUST use for processing requests from this Client. 

        The Authentication Context Class satisfied by the authentication performed is returned 
        as the acr Claim Value, as specified in Section 2.1.2.1.

    claims
        OPTIONAL.  ( クレーム一覧 )

        This parameter is used to request that specific Claims be returned. 
        The value is a JSON object, as specified in Section 2.6.

    registration
        OPTIONAL. 
        This parameter is used by the Client to provide information about itself 
        to a Self-Issued OP that would normally be provided to an OP during Dynamic Client Registration, 
        as specified in Section 7.2.1. 

        The registration parameter SHOULD NOT be used when the OP is not a Self-Issued OP.

    request
        OPTIONAL. 
    
        This parameter enables OpenID Connect requests to be passed in a single, 
        self-contained parameter and to be signed and optionally encrypted. 
        The parameter value is a Request Object. 

        It represents the request as JWT whose Claims are the request parameters above, 
        as specified in Section 2.9.

        When the :term:`request` parameter is used, 
        the OpenID Connect request parameter values contained in the JWT supersede those passed using the OAuth 2.0 request syntax. 
        Even if a scope parameter is present in the Request Object, 
        a scope parameter MUST always be passed using the OAuth 2.0 request syntax containing the :term:`openid` scope value 
        to indicate to the underlying OAuth 2.0 logic that this is an OpenID Connect request.

    request_uri
        OPTIONAL. 
        
        This parameter enables OpenID Connect requests to be passed by reference, 
        rather than by value. 

        The request_uri value is a URL using the https scheme referencing a resource 
        containing a Request Object value, 
        which is a JWT containing the request parameters. 

        This parameter is used identically to the request parameter, 
        other than that the Request Object is retrieved from the specified URL, 
        rather than passed by value. 

        See Section 2.10 for more information on using the request_uri parameter.

(draft 17)
