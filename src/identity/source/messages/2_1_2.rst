2.1.2.  Authorization Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An :term:`Authorization Request` is a message sent from an RP 
to the OP's :term:`Authorization Endpoint`. 
It is an extended OAuth 2.0 [:term:`OAuth2.0`] :term:`Authorization Request`. 

Section :ref:`4.1.1 <oauth_4_1_1>` and :ref:`4.2.1 <oauth_4_2_1>`  
of OAuth 2.0 [:term:`OAuth2.0`] 
defines the OAuth :term:`Authorization Request` parameters. 
In this specification, 
the values to the parameters are defined as follows.

.. note::
    - :term:`Authorization Code` : :ref:`4.1.1 <oauth_4_1_1>` 
    - :term:`Implicit` : :ref:`4.2.1 <oauth_4_2_1>`  

.. glossary::

    response_type
        This parameter controls the parameters returned 
        in the response from the :term:`Authorization Endpoint`.
        The OAuth 2.0 specification documents two response types:

            code                
                When supplied as the value for the :term:`response_type` parameter, 
                a successful response MUST include an :term:`Authorization Code` 
                as defined in the OAuth 2.0 specification. 

                Both successful and error responses MUST be added as parameters 
                to the :term:`query component` of the response. 

                All tokens are returned from the :term:`Token Endpoint`. 

                :term:`Authorization Servers` **MUST** support this :term:`response_type`. 

            token
                When supplied as the value for the :term:`response_type` parameter, 
                a successful response MUST include an :term:`Access Token` 
                as defined in the OAuth 2.0 specification. 

                Both successful and error responses MUST be :term:`fragment-encoded`. 

                No :term:`ID Token` is provided to the Client. 

        OpenID Connect supports these additional response types 
        [:term:`OAuth.Responses`] that have been registered:

            id_token
                When supplied as the value for the :term:`response_type` parameter, 
                a successful response MUST include an :term:`ID Token`. 

                Both successful and error responses SHOULD be :term:`fragment-encoded`. 

                Authorization Servers SHOULD support this response_type.

            id_token token
                When supplied as the value for the :term:`response_type` parameter, 
                a successful response MUST include both an :term:`Access Token` 
                as well as an :term:`ID Token`. 

                Both successful and error responses SHOULD be :term:`fragment-encoded`. 

                Authorization Servers MUST support this response_type.

            code token
                When supplied as the value for the :term:`response_type` parameter, 
                a successful response MUST include both an :term:`Access Token` and an :term:`Authorization Code` 
                as defined in the OAuth 2.0 specification. 

                Both successful and error responses SHOULD be :term:`fragment-encoded`.

            code id_token
                When supplied as the value for the :term:`response_type` parameter, 
                a successful response MUST include both an :term:`Authorization Code` as well as an :term:`ID Token`. 

                Both successful and error responses SHOULD be :term:`fragment-encoded`.

            code id_token token
                When supplied as the value for the :term:`response_type` parameter, 
                a successful response MUST include an :term:`Authorization Code`, 
                an :term:`ID Token`, and an :term:`Access Token`. 

                Both successful and error responses SHOULD be :term:`fragment-encoded`.
            
        The :term:`Authorization Server` MUST support all three of the 
        :term:`code`, :term:`id_token`, and :term:`id_token token` values for :term:`response_type`.

        The Client may request any OAuth 2.0 registered response type 
        supported by the :term:`Authorization Server`.


    scope        
        A **space delimited**, 
        **case sensitive** list of ASCII string values. 

        The values specify an additive list of :term:`voluntary Claims`
        that are returned from the :term:`UserInfo Endpoint`         
        unless the :term:`claims_in_id_token` scope value is used,
        in which case the requested claims are instead returned in the :term:`ID Token`. 

        The following scope values are defined:

            openid
                REQUIRED. 
                Informs the :term:`Authorization Server` that 
                the :term:`Client` is making an OpenID Connect request. 
                If the :term:`openid` scope is not present, 
                the request **MUST NOT be treated as an OpenID Connect request**. 

                This scope value requests access to the :term:`user_id` Claim 
                at the :term:`UserInfo Endpoint`. 


            profile
                OPTIONAL.
                This scope value requests that access to the End-User's default profile Claims
                at the UserInfo Endpoint be granted by the issued Access Token.
                These claims are:
                name, family_name, given_name, middle_name, nickname, profile, picture,
                website, gender, birthday, zoneinfo, locale, and updated_time.

            email
                OPTIONAL. 
                This scope value requests that access to the email and email_verified Claims 
                at the UserInfo Endpoint be granted by the issued Access Token. 

            address
                OPTIONAL. 
                This scope value requests that access to address Claim 
                at the UserInfo Endpoint be granted by the issued Access Token. 

            phone
                OPTIONAL. 
                This scope value requests that access to the phone_number Claim 
                at the UserInfo Endpoint be granted by the issued Access Token. 

            claims_in_id_token
                OPTIONAL. 
                Use of this scope value switches where the Claims requested 
                via other scope values are returned. 

                If this scope value is present, 
                the voluntary claims that are requested with the profile, email, address, 
                and phone scope values are returned in the ID Token, 
                rather than from the UserInfo Endpoint. 

                If finer grained control is required, an OpenID Request Object MUST be used. 

Other REQUIRED OAuth 2.0 parameters in the request include:

.. glossary::

    client_id
        The OAuth 2.0 Client Identifier. 

    redirect_uri
        A redirection URI where the response will be sent. 

The request MAY contain the following OAuth 2.0 parameters:

.. glossary::

    state
        RECOMMENDED. 
        An opaque value used to maintain state between the request and the callback; it can serve as a protection against XSRF attacks, among other uses. 

The following extension parameters are also defined:

.. glossary::

    nonce
        A random, unique string value used to mitigate replay attacks. 
        Use of the nonce is REQUIRED when using the implicit flow and OPTIONAL when using the code flow. 

    display
        OPTIONAL. 
        An ASCII string value that specifies how the Authorization Server displays 
        the authentication and consent user interface pages to the End-User.

            page
                The Authorization Server SHOULD display authentication and consent UI consistent 
                with a full user-agent page view. 
                If the display parameter is not specified this is the default display mode. 

            popup
                The Authorization Server SHOULD display authentication and consent UI consistent 
                with a popup user-agent window. 
                The popup user-agent window SHOULD be 450 pixels wide and 500 pixels tall. 

            touch
                The Authorization Server SHOULD display authentication and consent UI consistent 
                with a device that leverages a touch interface. 

                The Authorization Server MAY attempt to detect the touch device and further customize the interface. 

            wap
                The Authorization Server SHOULD display authentication and consent UI consistent 
                with a "feature phone" type display. 

    prompt
        OPTIONAL. 
        A space delimited, 
        case sensitive list of ASCII string values that specifies 
        whether the Authorization Server prompts the End-User for reauthentication and consent. 

        The possible values are:

            none
                The Authorization Server MUST NOT display any authentication 
                or consent user interface pages. An error is returned 
                if the End-User is not already authenticated 
                or the Client does not have pre-configured consent for the requested scopes. 

                This can be used as a method to check for existing authentication and/or consent. 

            login
                The Authorization Server MUST prompt the End-User for reauthentication. 

            consent
                The Authorization Server MUST prompt the End-User for consent before returning information to the Client. 

            select_account
                The Authorization Server MUST prompt the End-User to select a user account. 
                This allows a user who has multiple accounts at the Authorization Server 
                to select amongst the multiple accounts that they may have current sessions for. 

        The prompt parameter can be used by the Client 
        to make sure that the End-User is still present for the current session 
        or to bring attention to the request. 

        If this parameter contains **none** with any other value, an **error** is returned. 

    request
        OPTIONAL. An OpenID Request Object value. 

    request_uri
        OPTIONAL. An URL that points to an OpenID Request Object. 
        This is used to pass an OpenID Request Object by reference. 

    id_token
        OPTIONAL. 
        An :term:`ID Token` passed to the :term:`Authorization Server` 
        as a hint about the user's current or past authenticated session 
        with the client. 

        This SHOULD be present if **prompt=none** is sent. 

(draft 10)

