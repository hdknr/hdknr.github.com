<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:schaad-jose-serialize" />
<meta name="DC.Description.Abstract" content="This is a fast proposal for doing serialization of JOSE signature," />
<meta name="DC.Creator" content="Jim Schaad &lt;ietf@augustcellars.com&gt;" />
<meta name="DC.Date.Issued" content="2012-06-23" />
<meta name="DC.Title" content="JOSE Serialization Proposal for Multiple People" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-schaad-jose-serialize-00 - JOSE Serialization Proposal for Multiple People</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-schaad-jose-serialize-00.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-schaad-jose-serialize-00.txt" title="PDF version of this document">pdf</a>] [<a href='https://datatracker.ietf.org/doc/draft-schaad-jose-serialize' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="mailto:draft-schaad-jose-serialize@tools.ietf.org?subject=draft-schaad-jose-serialize%20" title="Send email to the document authors">Email</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-schaad-jose-serialize-00.txt" title="Run an idnits check of this document">Nits</a>]                               </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-schaad-jose-serialize-00">00</a>                                                            </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
Network Working Group                                          J. Schaad
Internet-Draft                                   Soaring Hawk Consulting
Intended status: Informational                             June 23, 2012
Expires: December 25, 2012


            <span class="h1">JOSE Serialization Proposal for Multiple People</span>
                     <span class="h1">draft-schaad-jose-serialize-00</span>

Abstract

   This is a fast proposal for doing serialization of JOSE signature,
   authentication and encryption formats.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 25, 2012.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






<span class="grey">Schaad                  Expires December 25, 2012               [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-3">3</a>
     <a href="#section-1.1">1.1</a>.  Constraints and Design Issues  . . . . . . . . . . . . . .  <a href="#page-3">3</a>
   <a href="#section-2">2</a>.  Serialization Formats  . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-2.1">2.1</a>.  JSON Serialization . . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
     <a href="#section-2.2">2.2</a>.  String Serialization . . . . . . . . . . . . . . . . . . .  <a href="#page-4">4</a>
   <a href="#section-3">3</a>.  Header JSON construction . . . . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
   <a href="#section-4">4</a>.  Canonicalization . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
   <a href="#section-5">5</a>.  Signature Processing Steps . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-5.1">5.1</a>.  Signature Creation . . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
   <a href="#section-6">6</a>.  Authentication Processing Steps  . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
     <a href="#section-6.1">6.1</a>.  Authentication Creation  . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
   <a href="#section-7">7</a>.  Encryption Processing Steps  . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-7.1">7.1</a>.  Encryption Creation  . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
   <a href="#section-8">8</a>.  Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
   <a href="#section-9">9</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-12">12</a>
   <a href="#section-10">10</a>. References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-10.1">10.1</a>. Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
     <a href="#section-10.2">10.2</a>. Informative References . . . . . . . . . . . . . . . . . . <a href="#page-13">13</a>
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>






























<span class="grey">Schaad                  Expires December 25, 2012               [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   This is a simple fast proposal for doing serialization of JOSE
   signature, authentication and encryption formats.  The proposal is
   setup to allow for multiple signatures or recipients to be created.

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Constraints and Design Issues</span>

   This is what controlled the format.

   1.  Minimal changes to the other JOSE documents.  This is not to be
       interpreted as an endorsement of those documents but instead is
       to reduce the current set of arguments to a minimum.

   2.  Assume that when creating a signature operation, all signatures
       are to be applied at one time.  If additional signatures are to
       be added it will be done as a nested rather than parallel
       signature.  This avoids the issues of [<a href="./rfc6211" title="&quot;Cryptographic Message Syntax (CMS) Algorithm Identifier Protection Attribute&quot;">RFC6211</a>] which was
       designed to prevent removal of parallel signatures.  Since all of
       the parallel signature information is signed, this cannot be done
       without breaking all of the signatures.

   3.  Assume that when doing an authenticated or encrypted operation,
       all recipients will be defined at the time that the message is
       created.  If new recipients are to be added in the future, then a
       new authentication value will need to be created.

   4.  Long field names are used for the purpose of clarity.  If
       adopted, it is assumed that shorter field names will be used.






















<span class="grey">Schaad                  Expires December 25, 2012               [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Serialization Formats</span>

   This document describes both a version that is encoded as a JSON
   object and also a simple string.

<span class="h3"><a class="selflink" name="section-2.1" href="#section-2.1">2.1</a>.  JSON Serialization</span>

   The JSON serialization format is a JSON object the following fields:

   Header  has a string value that contains the base64 encoded header
      for the JSON security.  The header is either a single entity or a
      multiple entity header value.  This element is REQUIRED.

   Content  has a string value that contains the base64 encoded content
      value.  This element is OPTIONAL.  If this element is present then
      the ContentURI element MUST be absent.

   ContentURI  has a URI for the location of the content.  This element
      is OPTIONAL.  If this element is present then the Content element
      MUST be absent.

   Signatures  contains the signature value(s) associated with the
      header.  The element is either a single string or an array of
      strings.  The string value(s) contain the base64 encoded signature
      value.  This element is OPTIONAL.  It MUST be present if a
      signature operation has been done.

   MAC  has a string value that contains the base64 encoded message
      authentication value.  This element is OPTIONAL.  It MUST be
      present if an authentication or AEAD encryption operation has been
      done.

<span class="h3"><a class="selflink" name="section-2.2" href="#section-2.2">2.2</a>.  String Serialization</span>

   The simple string serialization matches the current serialization
   method.

   A string is constructed by concatenating the following items:

   1.  The Header value from the JSON serialization.

   2.  A period character.

   3.  The Content value from the JSON serialization.  This element MAY
       be omitted if the content is location known.

   4.  A period character.




<span class="grey">Schaad                  Expires December 25, 2012               [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


   5.  Either the Signatures or MAC value from the JSON serialization.


















































<span class="grey">Schaad                  Expires December 25, 2012               [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  Header JSON construction</span>

   The header consists of either a single header object or an array of
   header objects.  If it is a single header, then object is the same as
   in the current documents.  If the header is an array of objects The
   JSON header structure consists of the field headers which is an array
   of objects.  Each of the objects is a SJON header structure from the
   current documents.

   When doing either encryption or authentication, there is one
   additional new field which is placed in the current set of header
   fields.

   wrappedKey  is an OPTIONAL string element.  The value is the base64
      encoded wrapped CMK.  The CMK is then used either as the CEK for
      encryption or the MAC key for authentication.  It is RECOMMENDED
      that this value be used for authentication rather than directly
      using a pre-shared secret.  For encryption this key replaces the
      second field in the simple serialization.  For authentication this
      is a new element.

   When a sender creates a header JSON string, the following rules
   apply:

   1.  The string produce MUST be a well formed JSON string.

   2.  The string MUST NOT have any leading or trailing whitespace.

   3.  For every name-value pair, there MUST NOT be another name-value
       pair with the same name in the same lexical context.

   4.  The canonicalization algorithm in <a href="#section-4">Section 4</a> SHOULD be applied to
       the string.

   When a recipient parses the header JSON string, the following rules
   apply:

   1.  There MUST be no leading or trailing whitespace characters.

   2.  Every character in the string MUST be consumed during parsing.

   3.  Every name in every lexical context MUST be unique.

   If any of these rules fail, then processing of the header MUST fail.







<span class="grey">Schaad                  Expires December 25, 2012               [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  Canonicalization</span>

   This canonicalization algorithm is designed for compactness of
   representation.  This algorithm does not have the same purpose as
   canonicalization algorithms in the XML Digital Signature world where
   it is applied by both the sender and the recipient to produce a
   binary stream for hashing.

   The canonicalization algorithm consists of applying the following
   rules:

   1.  Whitespace preceding and following the brace characters is
       removed.

   2.  Whitespace preceding and following the colon character is
       removed.

   3.  Whitespace preceding the comma character is removed.

   4.  Whitespace is collapsed into a single space character.

   The preceding rules apply only in the syntax space, it does not apply
   to values.




























<span class="grey">Schaad                  Expires December 25, 2012               [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  Signature Processing Steps</span>

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  Signature Creation</span>

   The following steps are descriptive rather than proscriptive.  Any
   other processing that produces the same result is acceptable.

   1.   Create the header object containing all of the desired and
        required parameters.

   2.   Serialize the header to an array of bytes using the UTF8
        Encoding.

   3.   Hash the binary version of the header

   4.   Apply the Base64URL encoding to the binary version of the
        header.

   5.   Create the content to be signed.  If the content is to be
        represented as in JSON , then the object is serialized to a byte
        array using the UTF8 Encoding.

   6.   Hash the content.

   7.   Apply the base64URL encoding to the content.

   8.   Compute the signature(s).

   9.   If there is a single object, then base64URL encode the signature
        value.  If there are multiple signatures then create an object
        with the array of signature values, serialize it to a binary
        stream and base64URL encode the resulting binary stream.

   10.  Apply the appropriate serialization process.

















<span class="grey">Schaad                  Expires December 25, 2012               [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Authentication Processing Steps</span>

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  Authentication Creation</span>

   The following steps are descriptive rather than proscriptive.  Any
   other processing that produces the same result is acceptable.

   1.   Create the header object containing all of the desired and
        required parameters.

        A.  Create a per message key to be used in the authentication
            process.

        B.  For each recipient - wrap the key by a unique key for the
            recipient and identify which key is to be used for
            unwrapping the per message key.

        C.  In some circumstances (one recipient and transient key) a
            shared key can be identified and used as the per message
            key.

   2.   Serialize the header to an array of bytes using the UTF8
        Encoding.

   3.   MAC the binary version of the header

   4.   Apply the Base64URL encoding to the binary version of the
        header.

   5.   Create the content to be authenticated.  If the content is to be
        represented as in JSON , then the object is serialized to a byte
        array using the UTF8 Encoding.

   6.   MAC the content.

   7.   Apply the base64URL encoding to the content.

   8.   Finish computing the MAC value.

   9.   Base64URL encode the resulting MAC value.  (Note there is a
        single MAC value as there is only one message key.)

   10.  Apply the appropriate serialization process.








<span class="grey">Schaad                  Expires December 25, 2012               [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Encryption Processing Steps</span>

<span class="h3"><a class="selflink" name="section-7.1" href="#section-7.1">7.1</a>.  Encryption Creation</span>

   The following steps are descriptive rather than proscriptive.  Any
   other processing that produces the same result is acceptable.

   1.   Create the header object containing all of the desired and
        required parameters.

        A.  Create a per message key to be used in the encryption
            process.

        B.  For each recipient - wrap the key by a unique key for the
            recipient and identify which key is to be used for
            unwrapping the per message key.

        C.  In some circumstances (one recipient and transient key) a
            shared key can be identified and used as the per message
            key.

   2.   Serialize the header to an array of bytes using the UTF8
        Encoding.

   3.   Pass in the header as the auxiliary data to the AEAD algorithm

   4.   Apply the Base64URL encoding to the binary version of the
        header.

   5.   Create the content to be encrypted.  If the content is to be
        represented as in JSON , then the object is serialized to a byte
        array using the UTF8 Encoding.

   6.   Encrypt and authenticate the content.

   7.   Apply the base64URL encoding to the encrypted content.

   8.   Finish computing the MAC value.

   9.   Base64URL encode the resulting MAC value.  (Note there is a
        single MAC value as there is only one message key.)

   10.  Apply the appropriate serialization process.








<span class="grey">Schaad                  Expires December 25, 2012              [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  Security Considerations</span>

   To be supplied
















































<span class="grey">Schaad                  Expires December 25, 2012              [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  IANA Considerations</span>

   No action by IANA is required for this document.
















































<span class="grey">Schaad                  Expires December 25, 2012              [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


<span class="h2"><a class="selflink" name="section-10" href="#section-10">10</a>.  References</span>

<span class="h3"><a class="selflink" name="section-10.1" href="#section-10.1">10.1</a>.  Normative References</span>

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

<span class="h3"><a class="selflink" name="section-10.2" href="#section-10.2">10.2</a>.  Informative References</span>

   [<a name="ref-RFC6211" id="ref-RFC6211">RFC6211</a>]  Schaad, J., "Cryptographic Message Syntax (CMS) Algorithm
              Identifier Protection Attribute", <a href="./rfc6211">RFC 6211</a>, April 2011.








































<span class="grey">Schaad                  Expires December 25, 2012              [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft             JOSE Serialization                  June 2012</span>


Author's Address

   Jim Schaad
   Soaring Hawk Consulting

   Email: ietf@augustcellars.com













































Schaad                  Expires December 25, 2012              [Page 14]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
