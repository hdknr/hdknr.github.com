<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head profile="http://dublincore.org/documents/2008/08/04/dc-html/">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="robots" content="index,follow" />
    <meta name="creator" content="rfcmarkup version 1.101" />
    <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC.Identifier" content="urn:ietf:id:ietf-oauth-json-web-token" />
<meta name="DC.Description.Abstract" content="JSON Web Token (JWT) is a means of representing claims to be" />
<meta name="DC.Creator" content="Bradley, John" />
<meta name="DC.Creator" content="Sakimura, Nat" />
<meta name="DC.Creator" content="Jones, Michael" />
<meta name="DC.Date.Issued" content="2012-07-30" />
<meta name="DC.Title" content="JSON Web Token (JWT)" />

    <link rel="icon" href="/images/id.png" type="image/png" />
    <link rel="shortcut icon" href="/images/id.png" type="image/png" />
    <title>draft-ietf-oauth-json-web-token-02 - JSON Web Token (JWT)</title>
    
    
    <style type="text/css">
	body {
	    margin: 0px 8px;
            font-size: 1em;
	}
        h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
	    font-weight: bold;
            line-height: 0pt;
            display: inline;
            white-space: pre;
            font-family: monospace;
            font-size: 1em;
	    font-weight: bold;
        }
        pre {
            font-size: 1em;
            margin-top: 0px;
            margin-bottom: 0px;
        }
	.pre {
	    white-space: pre;
	    font-family: monospace;
	}
	.header{
	    font-weight: bold;
	}
        .newpage {
            page-break-before: always;
        }
        .invisible {
            text-decoration: none;
            color: white;
        }
        a.selflink {
          color: black;
          text-decoration: none;
        }
        @media print {
            body {
                font-family: monospace;
                font-size: 10.5pt;
            }
            h1, h2, h3, h4, h5, h6 {
                font-size: 1em;
            }
        
            a:link, a:visited {
                color: inherit;
                text-decoration: none;
            }
            .noprint {
                display: none;
            }
        }
	@media screen {
	    .grey, .grey a:link, .grey a:visited {
		color: #777;
	    }
            .docinfo {
                background-color: #EEE;
            }
            .top {
                border-top: 7px solid #EEE;
            }
            .bgwhite  { background-color: white; }
            .bgred    { background-color: #F44; }
            .bggrey   { background-color: #666; }
            .bgbrown  { background-color: #840; }            
            .bgorange { background-color: #FA0; }
            .bgyellow { background-color: #EE0; }
            .bgmagenta{ background-color: #F4F; }
            .bgblue   { background-color: #66F; }
            .bgcyan   { background-color: #4DD; }
            .bggreen  { background-color: #4F4; }

            .legend   { font-size: 90%; }
            .cplate   { font-size: 70%; border: solid grey 1px; }
	}
    </style>
    <!--[if IE]>
    <style>
    body {
       font-size: 13px;
       margin: 10px 10px;
    }
    </style>
    <![endif]-->

    <script type="text/javascript"><!--
    function addHeaderTags() {
	var spans = document.getElementsByTagName("span");
	for (var i=0; i < spans.length; i++) {
	    var elem = spans[i];
	    if (elem) {
		var level = elem.getAttribute("class");
                if (level == "h1" || level == "h2" || level == "h3" || level == "h4" || level == "h5" || level == "h6") {
                    elem.innerHTML = "<"+level+">"+elem.innerHTML+"</"+level+">";		
                }
	    }
	}
    }
    var legend_html = "Colour legend:<br />      <table>         <tr><td>Unknown:</td>          <td><span class='cplate bgwhite'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft:</td>            <td><span class='cplate bgred'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Informational:</td>    <td><span class='cplate bgorange'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Experimental:</td>     <td><span class='cplate bgyellow'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Best Common Practice:</td><td><span class='cplate bgmagenta'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Proposed Standard:</td><td><span class='cplate bgblue'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Draft Standard:</td>   <td><span class='cplate bgcyan'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Standard:</td>         <td><span class='cplate bggreen'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Historic:</td>         <td><span class='cplate bggrey'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>         <tr><td>Obsolete:</td>         <td><span class='cplate bgbrown'>&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>     </table>";
    function showElem(id) {
        var elem = document.getElementById(id);
        elem.innerHTML = eval(id+"_html");
        elem.style.visibility='visible';
    }
    function hideElem(id) {
        var elem = document.getElementById(id);
        elem.style.visibility='hidden';        
        elem.innerHTML = "";
    }
    // -->
    </script>
</head>
<body onload="addHeaderTags()">
   <div style="height: 13px;">
      <div onmouseover="this.style.cursor='pointer';"
         onclick="showElem('legend');"
         onmouseout="hideElem('legend')"
	 style="height: 6px; position: absolute;"
         class="pre noprint docinfo bgred"
         title="Click for colour legend." >                                                                        </div>
      <div id="legend"
           class="docinfo noprint pre legend"
           style="position:absolute; top: 4px; left: 4ex; visibility:hidden; background-color: white; padding: 4px 9px 5px 7px; border: solid #345 1px; "
           onmouseover="showElem('legend');"
           onmouseout="hideElem('legend');">
      </div>
   </div>
<span class="pre noprint docinfo top">[<a href="../html/" title="Document search and retrieval page">Docs</a>] [<a href="http://tools.ietf.org/id/draft-ietf-oauth-json-web-token-02.txt" title="Plaintext version of this document">txt</a>|<a href="/pdf/draft-ietf-oauth-json-web-token-02.txt" title="PDF version of this document">pdf</a>|<a href="/id/draft-ietf-oauth-json-web-token-02.xml" title="XML source for this document">xml</a>|<a href="/id/draft-ietf-oauth-json-web-token-02.html" title="HTML version of this document, from XML2RFC">html</a>] [<a href='https://datatracker.ietf.org/doc/draft-ietf-oauth-json-web-token' title='IESG Datatracker information for this document'>Tracker</a>] [<a href="../wg/oauth" title="The working group handling this document">WG</a>] [<a href="mailto:draft-ietf-oauth-json-web-token@tools.ietf.org?subject=draft-ietf-oauth-json-web-token%20" title="Send email to the document authors">Email</a>] [<a href="/rfcdiff?difftype=--hwdiff&amp;url2=draft-ietf-oauth-json-web-token-02.txt" title="Inline diff (wdiff)">Diff1</a>] [<a href="/rfcdiff?url2=draft-ietf-oauth-json-web-token-02.txt" title="Side-by-side diff">Diff2</a>] [<a href="/idnits?url=http://tools.ietf.org/id/draft-ietf-oauth-json-web-token-02.txt" title="Run an idnits check of this document">Nits</a>] </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<span class="pre noprint docinfo">Versions: <a href="./draft-ietf-oauth-json-web-token-00">00</a> <a href="./draft-ietf-oauth-json-web-token-01">01</a> <a href="./draft-ietf-oauth-json-web-token-02">02</a> <a href="./draft-ietf-oauth-json-web-token-03">03</a>                                                   </span><br />
<span class="pre noprint docinfo">                                                                        </span><br />
<pre>
OAuth Working Group                                             M. Jones
Internet-Draft                                                 Microsoft
Intended status: Standards Track                              J. Bradley
Expires: January 17, 2013                                  Ping Identity
                                                             N. Sakimura
                                                                     NRI
                                                           July 16, 2012


                          <span class="h1">JSON Web Token (JWT)</span>
                   <span class="h1">draft-ietf-oauth-json-web-token-02</span>

Abstract

   JSON Web Token (JWT) is a means of representing claims to be
   transferred between two parties.  The claims in a JWT are encoded as
   a JavaScript Object Notation (JSON) object that is digitally signed
   or MACed using JSON Web Signature (JWS) and/or encrypted using JSON
   Web Encryption (JWE).

   The suggested pronunciation of JWT is the same as the English word
   "jot".

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of <a href="./bcp78">BCP 78</a> and <a href="./bcp79">BCP 79</a>.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at <a href="http://datatracker.ietf.org/drafts/current/">http://datatracker.ietf.org/drafts/current/</a>.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 17, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to <a href="./bcp78">BCP 78</a> and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (<a href="http://trustee.ietf.org/license-info">http://trustee.ietf.org/license-info</a>) in effect on the date of



<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 1]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-2" id="page-2" href="#page-2" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in <a href="#section-4">Section 4</a>.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.













































<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 2]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-3" id="page-3" href="#page-3" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


Table of Contents

   <a href="#section-1">1</a>.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
     <a href="#section-1.1">1.1</a>.  Notational Conventions . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
   <a href="#section-2">2</a>.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-5">5</a>
   <a href="#section-3">3</a>.  JSON Web Token (JWT) Overview  . . . . . . . . . . . . . . . .  <a href="#page-6">6</a>
     <a href="#section-3.1">3.1</a>.  Example JWT  . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-7">7</a>
   <a href="#section-4">4</a>.  JWT Claims . . . . . . . . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
     <a href="#section-4.1">4.1</a>.  Reserved Claim Names . . . . . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-4.1.1">4.1.1</a>.  "exp" (Expiration Time) Claim  . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-4.1.2">4.1.2</a>.  "nbf" (Not Before) Claim . . . . . . . . . . . . . . .  <a href="#page-8">8</a>
       <a href="#section-4.1.3">4.1.3</a>.  "iat" (Issued At) Claim  . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
       <a href="#section-4.1.4">4.1.4</a>.  "iss" (Issuer) Claim . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
       <a href="#section-4.1.5">4.1.5</a>.  "aud" (Audience) Claim . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
       <a href="#section-4.1.6">4.1.6</a>.  "prn" (Principal) Claim  . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
       <a href="#section-4.1.7">4.1.7</a>.  "jti" (JWT ID) Claim . . . . . . . . . . . . . . . . .  <a href="#page-9">9</a>
       <a href="#section-4.1.8">4.1.8</a>.  "typ" (Type) Claim . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-4.2">4.2</a>.  Public Claim Names . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-4.3">4.3</a>.  Private Claim Names  . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
   <a href="#section-5">5</a>.  JWT Header . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-5.1">5.1</a>.  "typ" (Type) Header Parameter  . . . . . . . . . . . . . . <a href="#page-10">10</a>
     <a href="#section-5.2">5.2</a>.  "cty" (Content Type) Header Parameter  . . . . . . . . . . <a href="#page-11">11</a>
   <a href="#section-6">6</a>.  Plaintext JWTs . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
     <a href="#section-6.1">6.1</a>.  Example Plaintext JWT  . . . . . . . . . . . . . . . . . . <a href="#page-11">11</a>
   <a href="#section-7">7</a>.  Rules for Creating and Validating a JWT  . . . . . . . . . . . <a href="#page-12">12</a>
   <a href="#section-8">8</a>.  Cryptographic Algorithms . . . . . . . . . . . . . . . . . . . <a href="#page-14">14</a>
   <a href="#section-9">9</a>.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
     <a href="#section-9.1">9.1</a>.  JSON Web Token Claims Registry . . . . . . . . . . . . . . <a href="#page-15">15</a>
       <a href="#section-9.1.1">9.1.1</a>.  Registration Template  . . . . . . . . . . . . . . . . <a href="#page-15">15</a>
       <a href="#section-9.1.2">9.1.2</a>.  Initial Registry Contents  . . . . . . . . . . . . . . <a href="#page-16">16</a>
     9.2.  Sub-Namespace Registration of
           urn:ietf:params:oauth:token-type:jwt . . . . . . . . . . . <a href="#page-17">17</a>
       <a href="#section-9.2.1">9.2.1</a>.  Registry Contents  . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
     9.3.  JSON Web Signature and Encryption Type Values
           Registration . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
       <a href="#section-9.3.1">9.3.1</a>.  Registry Contents  . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
     <a href="#section-9.4">9.4</a>.  Media Type Registration  . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
       <a href="#section-9.4.1">9.4.1</a>.  Registry Contents  . . . . . . . . . . . . . . . . . . <a href="#page-17">17</a>
   <a href="#section-10">10</a>. Security Considerations  . . . . . . . . . . . . . . . . . . . <a href="#page-18">18</a>
   <a href="#section-11">11</a>. Open Issues  . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
   <a href="#section-12">12</a>. References . . . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-12.1">12.1</a>. Normative References . . . . . . . . . . . . . . . . . . . <a href="#page-19">19</a>
     <a href="#section-12.2">12.2</a>. Informative References . . . . . . . . . . . . . . . . . . <a href="#page-20">20</a>
   <a href="#appendix-A">Appendix A</a>.  Example Encrypted JWT . . . . . . . . . . . . . . . . <a href="#page-21">21</a>
   <a href="#appendix-B">Appendix B</a>.  Relationship of JWTs to SAML Tokens . . . . . . . . . <a href="#page-22">22</a>
   <a href="#appendix-C">Appendix C</a>.  Relationship of JWTs to Simple Web Tokens (SWTs)  . . <a href="#page-22">22</a>
   <a href="#appendix-D">Appendix D</a>.  Acknowledgements  . . . . . . . . . . . . . . . . . . <a href="#page-22">22</a>
   <a href="#appendix-E">Appendix E</a>.  Document History  . . . . . . . . . . . . . . . . . . <a href="#page-23">23</a>



<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 3]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-4" id="page-4" href="#page-4" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . <a href="#page-23">23</a>


















































<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 4]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-5" id="page-5" href="#page-5" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


<span class="h2"><a class="selflink" name="section-1" href="#section-1">1</a>.  Introduction</span>

   JSON Web Token (JWT) is a compact token format intended for space
   constrained environments such as HTTP Authorization headers and URI
   query parameters.  JWTs encode claims to be transmitted as a
   JavaScript Object Notation (JSON) [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>] object that is base64url
   encoded and digitally signed or MACed and/or encrypted.  Signing and
   MACing is performed using JSON Web Signature (JWS) [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>].  Encryption
   is performed using JSON Web Encryption (JWE) [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>].

   The suggested pronunciation of JWT is the same as the English word
   "jot".

<span class="h3"><a class="selflink" name="section-1.1" href="#section-1.1">1.1</a>.  Notational Conventions</span>

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in Key words for use in
   RFCs to Indicate Requirement Levels [<a href="./rfc2119" title="&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;">RFC2119</a>].


<span class="h2"><a class="selflink" name="section-2" href="#section-2">2</a>.  Terminology</span>

   JSON Web Token (JWT)  A string representing a set of claims as a JSON
      object that is digitally signed or MACed and/or encrypted.  The
      string consists of multiple parts, the first being the Encoded JWT
      Header, plus additional parts depending upon the contents of the
      header, with the parts being separated by period ('.') characters,
      and each part containing base64url encoded content.

   Base64url Encoding  The URL- and filename-safe Base64 encoding
      described in <a href="./rfc4648">RFC 4648</a> <a href="./rfc4648#section-5">[RFC4648], Section&nbsp;5</a>, with the (non URL-
      safe) '=' padding characters omitted, as permitted by <a href="#section-3.2">Section 3.2</a>.
      (See <a href="#appendix-C">Appendix C</a> of [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>] for notes on implementing base64url
      encoding without padding.)

   JWT Header  A string representing a JSON object that describes the
      cryptographic operations applied to the JWT.  When the JWT is
      digitally signed or MACed, the JWT Header is a JWS Header.  When
      the JWT is encrypted, the JWT Header is a JWE Header.

   Header Parameter Name  The name of a member of the JSON object
      representing a JWT Header.

   Header Parameter Value  The value of a member of the JSON object
      representing a JWT Header.





<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 5]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-6" id="page-6" href="#page-6" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   JWT Claims Set  A string representing a JSON object that contains the
      claims conveyed by the JWT.  When the JWT is digitally signed or
      MACed, the bytes of the UTF-8 representation of the JWT Claims Set
      are base64url encoded to create the Encoded JWS Payload.  When the
      JWT is encrypted, the bytes of the UTF-8 representation of the JWT
      Claims Set are used as the JWE Plaintext.

   Claim Name  The name of a member of the JSON object representing a
      JWT Claims Set.

   Claim Value  The value of a member of the JSON object representing a
      JWT Claims Set.

   Encoded JWT Header  Base64url encoding of the bytes of the UTF-8
      [<a href="./rfc3629" title="&quot;UTF-8, a transformation format of ISO 10646&quot;">RFC3629</a>] representation of the JWT Header.

   Collision Resistant Namespace  A namespace that allows names to be
      allocated in a manner such that they are highly unlikely to
      collide with other names.  For instance, collision resistance can
      be achieved through administrative delegation of portions of the
      namespace or through use of collision-resistant name allocation
      functions.  Examples of Collision Resistant Namespaces include:
      Domain Names, Object Identifiers (OIDs) as defined in the ITU-T
      X.660 and X.670 Recommendation series, and Universally Unique
      IDentifiers (UUIDs) [<a href="./rfc4122" title="&quot;A Universally Unique IDentifier (UUID) URN Namespace&quot;">RFC4122</a>].  When using an administratively
      delegated namespace, the definer of a name needs to take
      reasonable precautions to ensure they are in control of the
      portion of the namespace they use to define the name.

   StringOrURI  A JSON string value, with the additional requirement
      that while arbitrary string values MAY be used, any value
      containing a ":" character MUST be a URI [<a href="./rfc3986" title="&quot;Uniform Resource Identifier (URI): Generic Syntax&quot;">RFC3986</a>].

   IntDate  A JSON numeric value representing the number of seconds from
      1970-01-01T0:0:0Z UTC until the specified UTC date/time.  See <a href="./rfc3339">RFC</a>
      <a href="./rfc3339">3339</a> [<a href="./rfc3339" title="&quot;Date and Time on the Internet: Timestamps&quot;">RFC3339</a>] for details regarding date/times in general and UTC
      in particular.


<span class="h2"><a class="selflink" name="section-3" href="#section-3">3</a>.  JSON Web Token (JWT) Overview</span>

   JWTs represent a set of claims as a JSON object that is base64url
   encoded and digitally signed or MACed and/or encrypted.  The JWT
   Claims Set represents this JSON object.  As per <a href="./rfc4627">RFC 4627</a> <a href="./rfc4627#section-2.2">[RFC4627]
   Section&nbsp;2.2</a>, the JSON object consists of zero or more name/value
   pairs (or members), where the names are strings and the values are
   arbitrary JSON values.  These members are the claims represented by
   the JWT.



<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 6]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-7" id="page-7" href="#page-7" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   The member names within the JWT Claims Set are referred to as Claim
   Names.  The corresponding values are referred to as Claim Values.

   The bytes of the UTF-8 representation of the JWT Claims Set are
   digitally signed or MACed in the manner described in JSON Web
   Signature (JWS) [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>] and/or encrypted in the manner described in
   JSON Web Encryption (JWE) [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>].

   The contents of the JWT Header describe the cryptographic operations
   applied to the JWT Claims Set. If the JWT Header is a JWS Header, the
   claims are digitally signed or MACed.  If the JWT Header is a JWE
   Header, the claims are encrypted.

   A JWT is represented as a JWS or JWE.  The number of parts is
   dependent upon the representation of the resulting JWS or JWE.

<span class="h3"><a class="selflink" name="section-3.1" href="#section-3.1">3.1</a>.  Example JWT</span>

   The following example JWT Header declares that the encoded object is
   a JSON Web Token (JWT) and the JWT is MACed using the HMAC SHA-256
   algorithm:
   {"typ":"JWT",
    "alg":"HS256"}

   Base64url encoding the bytes of the UTF-8 representation of the JWT
   Header yields this Encoded JWS Header value, which is used as the
   Encoded JWT Header:
   eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

   The following is an example of a JWT Claims Set:
   {"iss":"joe",
    "exp":1300819380,
    "http://example.com/is_root":true}

   Base64url encoding the bytes of the UTF-8 representation of the JSON
   Claims Set yields this Encoded JWS Payload (with line breaks for
   display purposes only):
   eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly
   9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ

   Signing the Encoded JWS Header and Encoded JWS Payload with the HMAC
   SHA-256 algorithm and base64url encoding the signature in the manner
   specified in [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>], yields this Encoded JWS Signature:
   dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk

   Concatenating these parts in this order with period characters
   between the parts yields this complete JWT (with line breaks for
   display purposes only):



<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 7]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-8" id="page-8" href="#page-8" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
   .
   eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
   cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
   .
   dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk

   This computation is illustrated in more detail in [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>], <a href="#appendix-A.1">Appendix</a>
   <a href="#appendix-A.1">A.1</a>.  See <a href="#appendix-A">Appendix A</a> for an example of an encrypted JWT.


<span class="h2"><a class="selflink" name="section-4" href="#section-4">4</a>.  JWT Claims</span>

   The JWT Claims Set represents a JSON object whose members are the
   claims conveyed by the JWT.  The Claim Names within this object MUST
   be unique; JWTs with duplicate Claim Names MUST be rejected.  Note
   however, that the set of claims that a JWT must contain to be
   considered valid is context-dependent and is outside the scope of
   this specification.  When used in a security-related context,
   implementations MUST understand and support all of the claims
   present; otherwise, the JWT MUST be rejected for processing.

   There are three classes of JWT Claim Names: Reserved Claim Names,
   Public Claim Names, and Private Claim Names.

<span class="h3"><a class="selflink" name="section-4.1" href="#section-4.1">4.1</a>.  Reserved Claim Names</span>

   The following claim names are reserved.  None of the claims defined
   below are intended to be mandatory, but rather, provide a starting
   point for a set of useful, interoperable claims.  All the names are
   short because a core goal of JWTs is for the tokens to be compact.
   Additional reserved claim names MAY be defined via the IANA JSON Web
   Token Claims registry <a href="#section-9.1">Section 9.1</a>.

<span class="h4"><a class="selflink" name="section-4.1.1" href="#section-4.1.1">4.1.1</a>.  "exp" (Expiration Time) Claim</span>

   The "exp" (expiration time) claim identifies the expiration time on
   or after which the token MUST NOT be accepted for processing.  The
   processing of the "exp" claim requires that the current date/time
   MUST be before the expiration date/time listed in the "exp" claim.
   Implementers MAY provide for some small leeway, usually no more than
   a few minutes, to account for clock skew.  Its value MUST be a number
   containing an IntDate value.  This claim is OPTIONAL.

<span class="h4"><a class="selflink" name="section-4.1.2" href="#section-4.1.2">4.1.2</a>.  "nbf" (Not Before) Claim</span>

   The "nbf" (not before) claim identifies the time before which the
   token MUST NOT be accepted for processing.  The processing of the



<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 8]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-9" id="page-9" href="#page-9" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   "nbf" claim requires that the current date/time MUST be after or
   equal to the not-before date/time listed in the "nbf" claim.
   Implementers MAY provide for some small leeway, usually no more than
   a few minutes, to account for clock skew.  Its value MUST be a number
   containing an IntDate value.  This claim is OPTIONAL.

<span class="h4"><a class="selflink" name="section-4.1.3" href="#section-4.1.3">4.1.3</a>.  "iat" (Issued At) Claim</span>

   The "iat" (issued at) claim identifies the time at which the JWT was
   issued.  This claim can be used to determine the age of the token.
   Its value MUST be a number containing an IntDate value.  This claim
   is OPTIONAL.

<span class="h4"><a class="selflink" name="section-4.1.4" href="#section-4.1.4">4.1.4</a>.  "iss" (Issuer) Claim</span>

   The "iss" (issuer) claim identifies the principal that issued the
   JWT.  The processing of this claim is generally application specific.
   The "iss" value is a case sensitive string containing a StringOrURI
   value.  This claim is OPTIONAL.

<span class="h4"><a class="selflink" name="section-4.1.5" href="#section-4.1.5">4.1.5</a>.  "aud" (Audience) Claim</span>

   The "aud" (audience) claim identifies the audience that the JWT is
   intended for.  The principal intended to process the JWT MUST be
   identified with the value of the audience claim.  If the principal
   processing the claim does not identify itself with the identifier in
   the "aud" claim value then the JWT MUST be rejected.  The
   interpretation of the audience value is generally application
   specific.  The "aud" value is a case sensitive string containing a
   StringOrURI value.  This claim is OPTIONAL.

<span class="h4"><a class="selflink" name="section-4.1.6" href="#section-4.1.6">4.1.6</a>.  "prn" (Principal) Claim</span>

   The "prn" (principal) claim identifies the subject of the JWT.  The
   processing of this claim is generally application specific.  The
   "prn" value is a case sensitive string containing a StringOrURI
   value.  This claim is OPTIONAL.

<span class="h4"><a class="selflink" name="section-4.1.7" href="#section-4.1.7">4.1.7</a>.  "jti" (JWT ID) Claim</span>

   The "jti" (JWT ID) claim provides a unique identifier for the JWT.
   The identifier value MUST be assigned in a manner that ensures that
   there is a negligible probability that the same value will be
   accidentally assigned to a different data object.  The "jti" claim
   can be used to prevent the JWT from being replayed.  The "jti" value
   is a case sensitive string.  This claim is OPTIONAL.





<span class="grey">Jones, et al.           Expires January 17, 2013                [Page 9]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-10" id="page-10" href="#page-10" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


<span class="h4"><a class="selflink" name="section-4.1.8" href="#section-4.1.8">4.1.8</a>.  "typ" (Type) Claim</span>

   The "typ" (type) claim is used to declare a type for the contents of
   this JWT Claims Set. The "typ" value is a case sensitive string.
   This claim is OPTIONAL.

   The values used for the "typ" claim come from the same value space as
   the "typ" header parameter, with the same rules applying.

<span class="h3"><a class="selflink" name="section-4.2" href="#section-4.2">4.2</a>.  Public Claim Names</span>

   Claim names can be defined at will by those using JWTs.  However, in
   order to prevent collisions, any new claim name SHOULD either be
   registered in the IANA JSON Web Token Claims registry <a href="#section-9.1">Section 9.1</a> or
   be a URI that contains a Collision Resistant Namespace.

<span class="h3"><a class="selflink" name="section-4.3" href="#section-4.3">4.3</a>.  Private Claim Names</span>

   A producer and consumer of a JWT may agree to any claim name that is
   not a Reserved Name <a href="#section-4.1">Section 4.1</a> or a Public Name <a href="#section-4.2">Section 4.2</a>.  Unlike
   Public Names, these private names are subject to collision and should
   be used with caution.


<span class="h2"><a class="selflink" name="section-5" href="#section-5">5</a>.  JWT Header</span>

   The members of the JSON object represented by the JWT Header describe
   the cryptographic operations applied to the JWT and optionally,
   additional properties of the JWT.  The member names within the JWT
   Header are referred to as Header Parameter Names.  These names MUST
   be unique; JWTs with duplicate Header Parameter Names MUST be
   rejected.  The corresponding values are referred to as Header
   Parameter Values.

   Implementations MUST understand the entire contents of the header;
   otherwise, the JWT MUST be rejected for processing.

   JWS Header Parameters are defined by [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>].  JWE Header Parameters
   are defined by [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>].  This specification further specifies the use
   of the following header parameter in both the cases where the JWT is
   a JWS and where it is a JWE.

<span class="h3"><a class="selflink" name="section-5.1" href="#section-5.1">5.1</a>.  "typ" (Type) Header Parameter</span>

   The "typ" (type) header parameter is used to declare the type of this
   object.  If present, it is RECOMMENDED that its value be either "JWT"
   or "urn:ietf:params:oauth:token-type:jwt" to indicate that this
   object is a JWT.  The "typ" value is a case sensitive string.  This



<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 10]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-11" id="page-11" href="#page-11" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   header parameter is OPTIONAL.

<span class="h3"><a class="selflink" name="section-5.2" href="#section-5.2">5.2</a>.  "cty" (Content Type) Header Parameter</span>

   The "cty" (content type) header parameter is used to declare
   structural information about the JWT.  Its value MUST be a string.

   In the normal case where nested signing or encryption operations are
   not employed, the use of this header parameter is NOT RECOMMENDED.
   In the case that nested signing or encryption is employed, the use of
   this header parameter is REQUIRED; in this case, the value MUST be
   "JWT", to indicate that a nested JWT is carried in this JWT.

   The values used for the "cty" header parameter come from the same
   value space as the "typ" header parameter, with the same rules
   applying.


<span class="h2"><a class="selflink" name="section-6" href="#section-6">6</a>.  Plaintext JWTs</span>

   To support use cases where the JWT content is secured by a means
   other than a signature and/or encryption contained within the token
   (such as a signature on a data structure containing the token), JWTs
   MAY also be created without a signature or encryption.  A plaintext
   JWT is a JWS using the "none" JWS "alg" header parameter value
   defined in JSON Web Algorithms (JWA) [<a href="#ref-JWA" title="&quot;JSON Web Algorithms (JWA)&quot;">JWA</a>]; it is a JWS with an empty
   JWS Signature value.

<span class="h3"><a class="selflink" name="section-6.1" href="#section-6.1">6.1</a>.  Example Plaintext JWT</span>

   The following example JWT Header declares that the encoded object is
   a Plaintext JWT:
   {"alg":"none"}

   Base64url encoding the bytes of the UTF-8 representation of the JWT
   Header yields this Encoded JWT Header:
   eyJhbGciOiJub25lIn0

   The following is an example of a JWT Claims Set:
   {"iss":"joe",
    "exp":1300819380,
    "http://example.com/is_root":true}

   Base64url encoding the bytes of the UTF-8 representation of the JSON
   Claims Set yields this Encoded JWS Payload (with line breaks for
   display purposes only):
   eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
   cGxlLmNvbS9pc19yb290Ijp0cnVlfQ



<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 11]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-12" id="page-12" href="#page-12" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   The Encoded JWS Signature is the empty string.

   Concatenating these parts in this order with period characters
   between the parts yields this complete JWT (with line breaks for
   display purposes only):
   eyJhbGciOiJub25lIn0
   .
   eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
   cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
   .


<span class="h2"><a class="selflink" name="section-7" href="#section-7">7</a>.  Rules for Creating and Validating a JWT</span>

   To create a JWT, one MUST perform these steps.  The order of the
   steps is not significant in cases where there are no dependencies
   between the inputs and outputs of the steps.

   1.  Create a JWT Claims Set containing the desired claims.  Note that
       white space is explicitly allowed in the representation and no
       canonicalization is performed before encoding.

   2.  Let the Message be the bytes of the UTF-8 representation of the
       JWT Claims Set.

   3.  Create a JWT Header containing the desired set of header
       parameters.  The JWT MUST conform to either the [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>] or [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>]
       specifications.  Note that white space is explicitly allowed in
       the representation and no canonicalization is performed before
       encoding.

   4.  Base64url encode the bytes of the UTF-8 representation of the JWT
       Header.  Let this be the Encoded JWT Header.

   5.  Depending upon whether the JWT is a JWS or JWE, there are two
       cases:

       *  If the JWT is a JWS, create a JWS using the JWT Header as the
          JWS Header and the Message as the JWS Payload; all steps
          specified in [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>] for creating a JWS MUST be followed.

       *  Else, if the JWT is a JWE, create a JWE using the JWT Header
          as the JWE Header and the Message as the JWE Plaintext; all
          steps specified in [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>] for creating a JWE MUST be followed.

   6.  If a nested signing or encryption operation will be performed,
       let the Message be the JWS or JWE, and return to Step 3, using a
       "cty" (content type) value of "JWT" in the new JWT Header created



<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 12]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-13" id="page-13" href="#page-13" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


       in that step.

   7.  Otherwise, let the resulting JWT be the JWS or JWE.

   When validating a JWT the following steps MUST be taken.  The order
   of the steps is not significant in cases where there are no
   dependencies between the inputs and outputs of the steps.  If any of
   the listed steps fails then the token MUST be rejected for
   processing.

   1.   The JWT MUST contain at least one period character.

   2.   Let the Encoded JWT Header be the portion of the JWT before the
        first period character.

   3.   The Encoded JWT Header MUST be successfully base64url decoded
        following the restriction given in this specification that no
        padding characters have been used.

   4.   The resulting JWT Header MUST be completely valid JSON syntax
        conforming to <a href="./rfc4627">RFC 4627</a> [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>].

   5.   The resulting JWT Header MUST be validated to only include
        parameters and values whose syntax and semantics are both
        understood and supported.

   6.   Determine whether the JWT is a JWS or a JWE by examining the
        "alg" (algorithm) header value and optionally, the "enc"
        (encryption method) header value, if present.

   7.   Depending upon whether the JWT is a JWS or JWE, there are two
        cases:

        *  If the JWT is a JWS, all steps specified in [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>] for
           validating a JWS MUST be followed.  Let the Message be the
           result of base64url decoding the JWS Payload.

        *  Else, if the JWT is a JWE, all steps specified in [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>] for
           validating a JWE MUST be followed.  Let the Message be the
           JWE Plaintext.

   8.   If the JWT Header contains a "cty" (content type) value of
        "JWT", then the Message contains a JWT that was the subject of
        nested signing or encryption operations.  In this case, return
        to Step 1, using the Message as the JWT.

   9.   Otherwise, let the JWT Claims Set be the Message.




<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 13]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-14" id="page-14" href="#page-14" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   10.  The JWT Claims Set MUST be completely valid JSON syntax
        conforming to <a href="./rfc4627">RFC 4627</a> [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>].

   11.  When used in a security-related context, the JWT Claims Set MUST
        be validated to only include claims whose syntax and semantics
        are both understood and supported.

   Processing a JWT inevitably requires comparing known strings to
   values in the token.  For example, in checking what the algorithm is,
   the Unicode string encoding "alg" will be checked against the member
   names in the JWT Header to see if there is a matching header
   parameter name.  A similar process occurs when determining if the
   value of the "alg" header parameter represents a supported algorithm.

   Comparisons between JSON strings and other Unicode strings MUST be
   performed as specified below:

   1.  Remove any JSON applied escaping to produce an array of Unicode
       code points.

   2.  Unicode Normalization [<a href="#ref-USA15" title="&quot;Unicode Normalization Forms&quot;">USA15</a>] MUST NOT be applied at any point to
       either the JSON string or to the string it is to be compared
       against.

   3.  Comparisons between the two strings MUST be performed as a
       Unicode code point to code point equality comparison.


<span class="h2"><a class="selflink" name="section-8" href="#section-8">8</a>.  Cryptographic Algorithms</span>

   JWTs use JSON Web Signature (JWS) [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>] and JSON Web Encryption (JWE)
   [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>] to sign and/or encrypt the contents of the JWT.

   Of the JWS signing algorithms, only HMAC SHA-256 and "none" MUST be
   implemented by conforming JWT implementations.  It is RECOMMENDED
   that implementations also support the RSA SHA-256 and ECDSA P-256
   SHA-256 algorithms.  Support for other algorithms and key sizes is
   OPTIONAL.

   If an implementation provides encryption capabilities, of the JWE
   encryption algorithms, only RSA-PKCS1-1.5 with 2048 bit keys, AES-
   128-KW, AES-256-KW, AES-128-CBC, and AES-256-CBC MUST be implemented
   by conforming implementations.  It is RECOMMENDED that
   implementations also support ECDH-ES with 256 bit keys, AES-128-GCM,
   and AES-256-GCM.  Support for other algorithms and key sizes is
   OPTIONAL.





<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 14]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-15" id="page-15" href="#page-15" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


<span class="h2"><a class="selflink" name="section-9" href="#section-9">9</a>.  IANA Considerations</span>

<span class="h3"><a class="selflink" name="section-9.1" href="#section-9.1">9.1</a>.  JSON Web Token Claims Registry</span>

   This specification establishes the IANA JSON Web Token Claims
   registry for reserved JWT Claim Names.  The registry records the
   reserved Claim Name and a reference to the specification that defines
   it.  This specification registers the Claim Names defined in
   <a href="#section-4.1">Section 4.1</a>.

   Values are registered with a Specification Required [<a href="./rfc5226" title="&quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;">RFC5226</a>] after a
   two week review period on the [TBD]@ietf.org mailing list, on the
   advice of one or more Designated Experts.  However, to allow for the
   allocation of values prior to publication, the Designated Expert(s)
   may approve registration once they are satisfied that such a
   specification will be published.

   Registration requests must be sent to the [TBD]@ietf.org mailing list
   for review and comment, with an appropriate subject (e.g., "Request
   for access token type: example"). [[ Note to RFC-EDITOR: The name of
   the mailing list should be determined in consultation with the IESG
   and IANA.  Suggested name: claims-reg-review. ]]

   Within the review period, the Designated Expert(s) will either
   approve or deny the registration request, communicating this decision
   to the review list and IANA.  Denials should include an explanation
   and, if applicable, suggestions as to how to make the request
   successful.

   IANA must only accept registry updates from the Designated Expert(s),
   and should direct all requests for registration to the review mailing
   list.

<span class="h4"><a class="selflink" name="section-9.1.1" href="#section-9.1.1">9.1.1</a>.  Registration Template</span>

   Claim Name:
      The name requested (e.g., "example").  This name is case
      sensitive.  Names that match other registered names in a case
      insensitive manner SHOULD NOT be accepted.

   Change Controller:
      For standards-track RFCs, state "IETF".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      e-mail address, home page URI) may also be included.







<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 15]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-16" id="page-16" href="#page-16" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   Specification Document(s):
      Reference to the document that specifies the parameter, preferably
      including a URI that can be used to retrieve a copy of the
      document.  An indication of the relevant sections may also be
      included, but is not required.

<span class="h4"><a class="selflink" name="section-9.1.2" href="#section-9.1.2">9.1.2</a>.  Initial Registry Contents</span>

   o  Claim Name: "exp"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1.1">Section 4.1.1</a> of [[ this document ]]

   o  Claim Name: "nbf"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1.2">Section 4.1.2</a> of [[ this document ]]

   o  Claim Name: "iat"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1.3">Section 4.1.3</a> of [[ this document ]]

   o  Claim Name: "iss"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1.4">Section 4.1.4</a> of [[ this document ]]

   o  Claim Name: "aud"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1.5">Section 4.1.5</a> of [[ this document ]]

   o  Claim Name: "prn"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1.6">Section 4.1.6</a> of [[ this document ]]

   o  Claim Name: "jti"

   o  Change Controller: IETF




<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 16]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-17" id="page-17" href="#page-17" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   o  Specification Document(s): <a href="#section-4.1.7">Section 4.1.7</a> of [[ this document ]]

   o  Claim Name: "typ"

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-4.1.8">Section 4.1.8</a> of [[ this document ]]

<span class="h3"><a class="selflink" name="section-9.2" href="#section-9.2">9.2</a>.  Sub-Namespace Registration of urn:ietf:params:oauth:token-type:jwt</span>

<span class="h4"><a class="selflink" name="section-9.2.1" href="#section-9.2.1">9.2.1</a>.  Registry Contents</span>

   This specification registers the value "token-type:jwt" in the IANA
   urn:ietf:params:oauth registry established in An IETF URN Sub-
   Namespace for OAuth [<a href="#ref-I-D.ietf-oauth-urn-sub-ns">I-D.ietf-oauth-urn-sub-ns</a>].

   o  URN: urn:ietf:params:oauth:token-type:jwt

   o  Common Name: JSON Web Token (JWT) Token Type

   o  Change Controller: IETF

   o  Specification Document(s): [[this document]]

<span class="h3"><a class="selflink" name="section-9.3" href="#section-9.3">9.3</a>.  JSON Web Signature and Encryption Type Values Registration</span>

<span class="h4"><a class="selflink" name="section-9.3.1" href="#section-9.3.1">9.3.1</a>.  Registry Contents</span>

   This specification registers the "JWT" type value in the IANA JSON
   Web Signature and Encryption Type Values registry [<a href="#ref-JWS" title="&quot;JSON Web Signature (JWS)&quot;">JWS</a>]:

   o  "typ" Header Parameter Value: "JWT"

   o  Abbreviation for MIME Type: application/jwt

   o  Change Controller: IETF

   o  Specification Document(s): <a href="#section-5.1">Section 5.1</a> of [[ this document ]]

<span class="h3"><a class="selflink" name="section-9.4" href="#section-9.4">9.4</a>.  Media Type Registration</span>

<span class="h4"><a class="selflink" name="section-9.4.1" href="#section-9.4.1">9.4.1</a>.  Registry Contents</span>

   This specification registers the "application/jwt" Media Type
   [<a href="./rfc2046" title="&quot;Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types&quot;">RFC2046</a>] in the MIME Media Type registry [<a href="./rfc4288" title="&quot;Media Type Specifications and Registration Procedures&quot;">RFC4288</a>] to indicate that
   the content is a JWT.





<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 17]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-18" id="page-18" href="#page-18" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   o  Type Name: application

   o  Subtype Name: jwt

   o  Required Parameters: n/a

   o  Optional Parameters: n/a

   o  Encoding considerations: JWT values are encoded as a series of
      base64url encoded values (some of which may be the empty string)
      separated by period ('.') characters

   o  Security Considerations: See the Security Considerations section
      of this document

   o  Interoperability Considerations: n/a

   o  Published Specification: [[ this document ]]

   o  Applications that use this media type: OpenID Connect, Mozilla
      Browser ID, Salesforce, Google, numerous others

   o  Additional Information: Magic number(s): n/a, File extension(s):
      n/a, Macintosh file type code(s): n/a

   o  Person &amp; email address to contact for further information: Michael
      B. Jones, mbj@microsoft.com

   o  Intended Usage: COMMON

   o  Restrictions on Usage: none

   o  Author: Michael B. Jones, mbj@microsoft.com

   o  Change Controller: IETF


<span class="h2"><a class="selflink" name="section-10" href="#section-10">10</a>.  Security Considerations</span>

   All of the security issues faced by any cryptographic application
   must be faced by a JWT/JWS/JWE/JWK agent.  Among these issues are
   protecting the user's private key, preventing various attacks, and
   helping the user avoid mistakes such as inadvertently encrypting a
   message for the wrong recipient.  The entire list of security
   considerations is beyond the scope of this document, but some
   significant concerns are listed here.

   All the security considerations in the JWS specification also apply



<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 18]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-19" id="page-19" href="#page-19" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   to JWT, as do the JWE security considerations when encryption is
   employed.  In particular, the JWS JSON Security Considerations and
   Unicode Comparison Security Considerations apply equally to the JWT
   Claims Set in the same manner that they do to the JWS Header.


<span class="h2"><a class="selflink" name="section-11" href="#section-11">11</a>.  Open Issues</span>

   [[ to be removed by the RFC editor before publication as an RFC ]]

   The following items remain to be considered or done in this draft:

   o  Track changes to the underlying JOSE specifications.


<span class="h2"><a class="selflink" name="section-12" href="#section-12">12</a>.  References</span>

<span class="h3"><a class="selflink" name="section-12.1" href="#section-12.1">12.1</a>.  Normative References</span>

   [<a name="ref-I-D.ietf-oauth-urn-sub-ns" id="ref-I-D.ietf-oauth-urn-sub-ns">I-D.ietf-oauth-urn-sub-ns</a>]
              Campbell, B. and H. Tschofenig, "An IETF URN Sub-Namespace
              for OAuth", <a href="./draft-ietf-oauth-urn-sub-ns-05">draft-ietf-oauth-urn-sub-ns-05</a> (work in
              progress), June 2012.

   [<a name="ref-JWA" id="ref-JWA">JWA</a>]      Jones, M., "JSON Web Algorithms (JWA)", July 2012.

   [<a name="ref-JWE" id="ref-JWE">JWE</a>]      Jones, M., Rescorla, E., and J. Hildebrand, "JSON Web
              Encryption (JWE)", July 2012.

   [<a name="ref-JWS" id="ref-JWS">JWS</a>]      Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", July 2012.

   [<a name="ref-RFC2046" id="ref-RFC2046">RFC2046</a>]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part Two: Media Types", <a href="./rfc2046">RFC 2046</a>,
              November 1996.

   [<a name="ref-RFC2119" id="ref-RFC2119">RFC2119</a>]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", <a href="./bcp14">BCP 14</a>, <a href="./rfc2119">RFC 2119</a>, March 1997.

   [<a name="ref-RFC3339" id="ref-RFC3339">RFC3339</a>]  Klyne, G., Ed. and C. Newman, "Date and Time on the
              Internet: Timestamps", <a href="./rfc3339">RFC 3339</a>, July 2002.

   [<a name="ref-RFC3629" id="ref-RFC3629">RFC3629</a>]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, <a href="./rfc3629">RFC 3629</a>, November 2003.

   [<a name="ref-RFC3986" id="ref-RFC3986">RFC3986</a>]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              <a href="./rfc3986">RFC 3986</a>, January 2005.



<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 19]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-20" id="page-20" href="#page-20" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


   [<a name="ref-RFC4288" id="ref-RFC4288">RFC4288</a>]  Freed, N. and J. Klensin, "Media Type Specifications and
              Registration Procedures", <a href="./bcp13">BCP 13</a>, <a href="./rfc4288">RFC 4288</a>, December 2005.

   [<a name="ref-RFC4627" id="ref-RFC4627">RFC4627</a>]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", <a href="./rfc4627">RFC 4627</a>, July 2006.

   [<a name="ref-RFC4648" id="ref-RFC4648">RFC4648</a>]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", <a href="./rfc4648">RFC 4648</a>, October 2006.

   [<a name="ref-RFC5226" id="ref-RFC5226">RFC5226</a>]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", <a href="./bcp26">BCP 26</a>, <a href="./rfc5226">RFC 5226</a>,
              May 2008.

   [<a name="ref-USA15" id="ref-USA15">USA15</a>]    Davis, M., Whistler, K., and M. Duerst, "Unicode
              Normalization Forms", Unicode Standard Annex 15, 09 2009.

<span class="h3"><a class="selflink" name="section-12.2" href="#section-12.2">12.2</a>.  Informative References</span>

   [<a name="ref-CanvasApp" id="ref-CanvasApp">CanvasApp</a>]
              Facebook, "Canvas Applications", 2010.

   [<a name="ref-JSS" id="ref-JSS">JSS</a>]      Bradley, J. and N. Sakimura (editor), "JSON Simple Sign",
              September 2010.

   [<a name="ref-MagicSignatures" id="ref-MagicSignatures">MagicSignatures</a>]
              Panzer (editor), J., Laurie, B., and D. Balfanz, "Magic
              Signatures", January 2011.

   [<a name="ref-OASIS.saml-core-2.0-os" id="ref-OASIS.saml-core-2.0-os">OASIS.saml-core-2.0-os</a>]
              Cantor, S., Kemp, J., Philpott, R., and E. Maler,
              "Assertions and Protocol for the OASIS Security Assertion
              Markup Language (SAML) V2.0", OASIS Standard saml-core-
              2.0-os, March 2005.

   [<a name="ref-RFC3275" id="ref-RFC3275">RFC3275</a>]  Eastlake, D., Reagle, J., and D. Solo, "(Extensible Markup
              Language) XML-Signature Syntax and Processing", <a href="./rfc3275">RFC 3275</a>,
              March 2002.

   [<a name="ref-RFC4122" id="ref-RFC4122">RFC4122</a>]  Leach, P., Mealling, M., and R. Salz, "A Universally
              Unique IDentifier (UUID) URN Namespace", <a href="./rfc4122">RFC 4122</a>,
              July 2005.

   [<a name="ref-SWT" id="ref-SWT">SWT</a>]      Hardt, D. and Y. Goland, "Simple Web Token (SWT)",
              Version 0.9.5.1, November 2009.

   [<a name="ref-W3C.CR-xml11-20021015" id="ref-W3C.CR-xml11-20021015">W3C.CR-xml11-20021015</a>]
              Cowan, J., "Extensible Markup Language (XML) 1.1", W3C
              CR CR-xml11-20021015, October 2002.



<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 20]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-21" id="page-21" href="#page-21" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


<span class="h2"><a class="selflink" name="appendix-A" href="#appendix-A">Appendix A</a>.  Example Encrypted JWT</span>

   This example encrypts the same claims as used in <a href="#section-3.1">Section 3.1</a> to the
   recipient using RSAES-PKCS1-V1_5 and AES CBC.  AES CBC does not have
   an integrated integrity check, so a separate integrity check
   calculation is performed using HMAC SHA-256, with separate encryption
   and integrity keys being derived from a master key using the Concat
   KDF with the SHA-256 digest function.

   The following example JWE Header (with line breaks for display
   purposes only) declares that:

   o  the Content Master Key is encrypted to the recipient using the
      RSAES-PKCS1-V1_5 algorithm to produce the JWE Encrypted Key,

   o  the Plaintext is encrypted using the AES CBC algorithm with a 128
      bit key to produce the Ciphertext,

   o  the JWE Integrity Value safeguarding the integrity of the
      Ciphertext and the parameters used to create it was computed with
      the HMAC SHA-256 algorithm, and

   o  the 128 bit Initialization Vector (IV) with the base64url encoding
      "AxY8DCtDaGlsbGljb3RoZQ" was used.

   {"alg":"RSA1_5","enc":"A128CBC","int":"HS256","iv":"AxY8DCtDaGls
   bGljb3RoZQ"}

   Other than using the bytes of the UTF-8 representation of the JSON
   Claims Set from <a href="#section-3.1">Section 3.1</a> as the plaintext value, the computation
   of this JWT is identical to the computation of the JWE in <a href="#appendix-A.2">Appendix</a>
   <a href="#appendix-A.2">A.2</a> of [<a href="#ref-JWE" title="&quot;JSON Web Encryption (JWE)&quot;">JWE</a>], including the keys used.

   The final result in this example (with line breaks for display
   purposes only) is:

   eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDIiwiaW50IjoiSFMyNTYiLCJp
   diI6IkF4WThEQ3REYUdsc2JHbGpiM1JvWlEifQ.
   VjBkk22MjrFUMUl8ItbS8CjKjku4HQz4RiHD0eVG4dir-7XbDkPr1q6YtnN1X-av
   1EKmEnsrbhSxTvqtY4oEbWKLoEQ7zVm_0BW-rnwxdwrj4QJrhXGnqIL6bC4waZVJ
   qYhVQIahVWSQsCRcS1oYXA-2GhT6rk91y118DUkhGDsvdK2_hQsNGE6BQVN1i-Xw
   Uoz5sM6_0PRQ1FsYnJATMjVZfa4otHiooZ_KcOlSWIDxhMDqfPOu60--1ej0eZBy
   O7Ar_IZvzPAWqJ9agGFQIVGRZviXhN0WeErq9fVTcgeSUPsmurRSTYhTrNFLojqP
   qqk8pI61kn8GmZxA80-RUQ.
   7kLQQst655TUxmDzysjRLXnD-nfLK5EQK7ODAUkwxc0aRb9NOgu0EMJgOR6Vz8eN
   baf8six_OP6BRyUTYrCkH73-inD6Rc-7vc9eC5fcfSM.
   COyXNSm-CdfAL22WIKcoyCgQwb85aLW3ttDkzNj_1Wg




<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 21]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-22" id="page-22" href="#page-22" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


<span class="h2"><a class="selflink" name="appendix-B" href="#appendix-B">Appendix B</a>.  Relationship of JWTs to SAML Tokens</span>

   SAML 2.0 [<a href="#ref-OASIS.saml-core-2.0-os">OASIS.saml-core-2.0-os</a>] provides a standard for creating
   tokens with much greater expressivity and more security options than
   supported by JWTs.  However, the cost of this flexibility and
   expressiveness is both size and complexity.  In addition, SAML's use
   of XML [<a href="#ref-W3C.CR-xml11-20021015">W3C.CR-xml11-20021015</a>] and XML DSIG [<a href="./rfc3275" title="&quot;(Extensible Markup Language) XML-Signature Syntax and Processing&quot;">RFC3275</a>] only
   contributes to the size of SAML tokens.

   JWTs are intended to provide a simple token format that is small
   enough to fit into HTTP headers and query arguments in URIs.  It does
   this by supporting a much simpler token model than SAML and using the
   JSON [<a href="./rfc4627" title="&quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;">RFC4627</a>] object encoding syntax.  It also supports securing
   tokens using Message Authentication Codes (MACs) and digital
   signatures using a smaller (and less flexible) format than XML DSIG.

   Therefore, while JWTs can do some of the things SAML tokens do, JWTs
   are not intended as a full replacement for SAML tokens, but rather as
   a compromise token format to be used when space is at a premium.


<span class="h2"><a class="selflink" name="appendix-C" href="#appendix-C">Appendix C</a>.  Relationship of JWTs to Simple Web Tokens (SWTs)</span>

   Both JWTs and Simple Web Tokens SWT [<a href="#ref-SWT" title="&quot;Simple Web Token (SWT)&quot;">SWT</a>], at their core, enable sets
   of claims to be communicated between applications.  For SWTs, both
   the claim names and claim values are strings.  For JWTs, while claim
   names are strings, claim values can be any JSON type.  Both token
   types offer cryptographic protection of their content: SWTs with HMAC
   SHA-256 and JWTs with a choice of algorithms, including HMAC SHA-256,
   RSA SHA-256, and ECDSA P-256 SHA-256.


<span class="h2"><a class="selflink" name="appendix-D" href="#appendix-D">Appendix D</a>.  Acknowledgements</span>

   The authors acknowledge that the design of JWTs was intentionally
   influenced by the design and simplicity of Simple Web Tokens [<a href="#ref-SWT" title="&quot;Simple Web Token (SWT)&quot;">SWT</a>]
   and ideas for JSON tokens that Dick Hardt discussed within the OpenID
   community.

   Solutions for signing JSON content were previously explored by Magic
   Signatures [<a href="#ref-MagicSignatures">MagicSignatures</a>], JSON Simple Sign [<a href="#ref-JSS" title="&quot;JSON Simple Sign&quot;">JSS</a>], and Canvas
   Applications [<a href="#ref-CanvasApp">CanvasApp</a>], all of which influenced this draft.  Dirk
   Balfanz, Yaron Y. Goland, John Panzer, and Paul Tarjan all made
   significant contributions to the design of this specification.







<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 22]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-23" id="page-23" href="#page-23" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


<span class="h2"><a class="selflink" name="appendix-E" href="#appendix-E">Appendix E</a>.  Document History</span>

   [[ to be removed by the RFC editor before publication as an RFC ]]

   -02

   o  Added an example of an encrypted JWT.

   o  Added this language to Registration Templates: "This name is case
      sensitive.  Names that match other registered names in a case
      insensitive manner SHOULD NOT be accepted."

   o  Applied editorial suggestions.

   -01

   o  Added the "cty" (content type) header parameter for declaring type
      information about the secured content, as opposed to the "typ"
      (type) header parameter, which declares type information about
      this object.  This significantly simplified nested JWTs.

   o  Moved description of how to determine whether a header is for a
      JWS or a JWE from the JWT spec to the JWE spec.

   o  Changed registration requirements from RFC Required to
      Specification Required with Expert Review.

   o  Added Registration Template sections for defined registries.

   o  Added Registry Contents sections to populate registry values.

   o  Added "Collision Resistant Namespace" to the terminology section.

   o  Numerous editorial improvements.

   -00

   o  Created the initial IETF draft based upon
      <a href="./draft-jones-json-web-token-10">draft-jones-json-web-token-10</a> with no normative changes.












<span class="grey">Jones, et al.           Expires January 17, 2013               [Page 23]</span>
</pre><!--NewPage--><pre class='newpage'><a name="page-24" id="page-24" href="#page-24" class="invisible"> </a>
<span class="grey">Internet-Draft            JSON Web Token (JWT)                 July 2012</span>


Authors' Addresses

   Michael B. Jones
   Microsoft

   Email: mbj@microsoft.com
   URI:   <a href="http://self-issued.info/">http://self-issued.info/</a>


   John Bradley
   Ping Identity

   Email: ve7jtb@ve7jtb.com


   Nat Sakimura
   Nomura Research Institute

   Email: n-sakimura@nri.co.jp
































Jones, et al.           Expires January 17, 2013               [Page 24]

</pre><br />
<span class="noprint"><small><small>Html markup produced by rfcmarkup 1.101, available from
<a href="http://tools.ietf.org/tools/rfcmarkup/">http://tools.ietf.org/tools/rfcmarkup/</a>
</small></small></span>
</body></html>
