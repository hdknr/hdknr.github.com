:orphan:

8. Example of Registering Resource Sets
============================================

.. note::
    - UX Only 
    - Internal Only

The following example illustrates the intent and usage of 
:term:`resource set descriptions` 
and :term:`scope type descriptions` 
as part of resource set registration 
for the purposes of User-Managed Access (:doc:`UMA <uma_core>`).

This example contains some steps 
that are exclusively in the realm of user experience 
rather than web protocol, to achieve realistic illustration.  
These steps are labeled "**User experience only**".  
Some other steps are exclusively internal to the operation of the entity being discussed.  
These are labeled "**Internal only**".

A :term:`resource owner`, Alice Adams, has just uploaded a photo 
of her new puppy to a :term:`resource server`, Photoz.example.com, 
and wants to ensure that this specific photo is not publicly accessible.

Alice has already introduced this resource server to her authorization server, 
CopMonkey.example.com, 
and thus Photoz has already obtained a PAT from CopMonkey.  
However, 
Alice has not previously instructed Photoz to use CopMonkey 
to protect any other photos of hers.

Alice has previously visited CopMonkey to map a default 
"**do not share with anyone**" policy to any :term:`resource sets` 
registered by Photoz, 
until such time as she maps some other more permissive policies 
to those resources.  

    (
    **User experience only**.  
    
    This may have been done at the time Alice introduced the resource server 
    to the authorization server, 
    and/or it could have been a global or resource server-specific preference setting.  
    A different constraint or no constraint at all might be associated 
    with newly protected resources.
    
    )  

Other kinds of policies she may eventually map to particular photos or
albums might be "**Share only with husband@email.example.net**" 
or "**Share only with people in my 'family' group**".

Photoz itself has a publicly documented application-specific API 
that offers two dozen different methods that apply to single photos, 
such as "addTags" and "getSizes", 
but rolls them up into two photo-related :term:`scope types` of access: 
"**view**" (consisting of various read-only operations) and 
"**all**" (consisting of various reading, editing, and printing operations).  

It defines two :term:`scope type descriptions` that represent these :term:`scope types`, 
which it is able to reuse for all of its users (not just Alice), 
and ensures that these scope type description documents are available 
through HTTP GET requests that may be made by authorization servers.

The "name" property values are intended to be seen by Alice 
when she maps authorization constraints to specific :term:`resource sets` 
and actions while visiting CopMonkey, 
such that Alice would see the strings "**View Photo and Related Info**" 
and "**All Actions**", 
likely accompanied by the referenced icons, in the CopMonkey interface.  

    (Other users of Photoz might similarly see the same labels at CopMonkey 
    or whatever other authorization server they use.  

    Photoz could distinguish natural-language labels per user 
    if it wishes, by pointing to scopes with differently translated names.)

Example of the viewing-related :term:`scope type description document`
available at http://photoz.example.com/dev/scopes/view with a
Content-Type of **application/intro-scope+json**:

.. code-block:: javascript

   {
     "name": "View Photo and Related Info",
     "icon_uri": "http://www.example.com/icons/reading-glasses.png"
   }

Example of the broader :term:`scope type description document` available at
http://photoz.example.com/dev/scopes/all, 
likewise with a Content- Type of **application/intro-scope+json**:

.. code-block:: javascript

   {
     "name": "All Actions",
     "icon_uri": "http://www.example.com/icons/galaxy.png"
   }

While visiting Photoz, 
Alice selects a link or button that instructs the site to "**Protect**" or "**Share**" 
this single photo. 

    (**user experience only**; 

    Photoz could have made this a default or preference setting)

As a result, 
Photoz defines for itself a :term:`resource set` that represents this photo.

    (**internal only**; 

    Photoz is the only application that knows how to map a particular photo to a particular resource set
    )

Photoz also prepares the following :term:`resource set description`, 
which is specific to Alice and her photo.  
The "name" property value is intended to be seen by Alice in mapping authorization policies 
to specific :term:`resource sets` and actions when she visits CopMonkey.  
Alice would see the string "**Steve the puppy!**", 
likely accompanied by the referenced icon, in the CopMonkey interface.  
The possible scopes of access on this :term:`resource set` are indicated with URI references 
to the scope descriptions, as shown just above.

.. code-block:: javascript

   {
     "name": "Steve the puppy!",
     "icon_uri": "http://www.example.com/icons/flower",
     "scopes": [
       "http://photoz.example.com/dev/scopes/view",
       "http://photoz.example.com/dev/scopes/all"
     ]
   }

Photoz uses the "**create resource set description**" method of 
CopMonkey's standard UMA :term:`resource set registration API`, 
presenting its Alice-specific PAT there, 
to register and assign an identifier to the resource set description.

::

   PUT /resource_set/112210f47de98100 HTTP/1.1
   Content-Type: application/intro-resource-set+json
   ...

   {
     "name": "Steve the puppy!",
     "icon_uri": "http://www.example.com/icons/flower.png",
     "scopes": [
       "http://photoz.example.com/dev/scopes/view",
       "http://photoz.example.com/dev/scopes/all"
     ]
   }

If the registration attempt succeeds, 
CopMonkey responds in the following fashion.

::

   HTTP/1.1 201 Created
   Content-Type: application/intro-status+json
   ETag: "1"
   ...

   {
     "status": "created",
     "_id":  "112210f47de98100",
     "_rev": "1"
   }

At the time Alice indicates she would like this photo protected,
Photoz can choose to redirect Alice to CopMonkey for further policy setting, 
access auditing, and other authorization server-related tasks (**user experience only**).

Once it has successfully registered this description, 
Photoz is responsible for outsourcing to CopMonkey all questions of
authorization for access attempts made to this photo.

Over time, 
as Alice uploads other photos and creates and organizes photo albums, 
and as Photoz makes new action functionality available,
Photoz can use additional methods of the :term:`resource set registration API` to ensure 
that CopMonkey's understanding of Alice's protected resources matches its own.

For example, 
if Photoz suspects that somehow its understanding of the resource set has gotten out of sync with CopMonkey's, 
it can ask to read the resource set description as follows.

::

   GET /resource_set/112210f47de98100 HTTP/1.1
   Host: as.example.com
   ...

CopMonkey responds with the full content of the :term:`resource set description`, 
including its **_id** and its current **_rev**, as follows:

Example of an HTTP response to a "**read resource set description**" request, 
containing a :term:`resource set description` from the authorization server:

::

   HTTP/1.1 200 OK
   Content-Type: application/intro-resource-set+json
   ETag: "1"
   ...

   {
     "_id":  "112210f47de98100",
     "_rev": "1",
     "name": "Photo album",
     "icon_uri": "http://www.example.com/icons/flower.png",
     "scopes": [
       "http://photoz.example.com/dev/scopes/view",
       "http://photoz.example.com/dev/scopes/all"
     ]
   }

If for some reason Photoz and CopMonkey have gotten dramatically out of sync, 
Photoz can ask for the list of resource set identifiers CopMonkey currently knows about:

::

   GET /resource_set HTTP/1.1
   Host: as.example.com
   ...

CopMonkey's response might look as follows:

::

   HTTP/1.1 200 OK
   ...

   [ "112210f47de98100", "34234df47eL95300" ]

If Alice later changes the photo's title (user experience only) on Photoz 
from "Steve the puppy!" to "Steve on October 14, 2011", 
Photoz would use the "**update resource set description**" method to ensure that
Alice's experience of policy-setting at CopMonkey remains consistent with 
what she sees at Photoz.  

Following is an example of this request.

::

   PUT /resource_set/112210f47de98100 HTTP/1.1
   Content-Type: application/intro-resource-set+json
   Host: as.example.com
   If-Match: "1"
   ...

   {
     "name": "Steve on October 14, 2011",
     "icon_uri": "http://www.example.com/icons/flower.png",
     "scopes": [
       "http://photoz.example.com/dev/scopes/view",
       "http://photoz.example.com/dev/scopes/all"
     ]
   }

CopMonkey would respond as follows.

::

   HTTP/1.1 201 Created
   Content-Type: application/intro-status+json
   ETag: "2"
   ...

   {
     "status": "updated",
     "_id":  "112210f47de98100",
     "_rev": "2"
   }

There are other reasons Photoz might want to update :term:`resource set descriptions`, 
having nothing to do with Alice's actions or wishes.

For example, 
it might extend its API to include new features, 
and want to add new scopes to all of Alice's and other users' :term:`resource set descriptions`.

if Alice later decides to entirely remove sharing protection 
(**user experience only**) on this photo while visiting Photoz, 
ensuring that the public can get access without any UMA-based protection, 
Photoz is responsible for deleting the relevant :term:`resource set registration`, 
as follows:

::

   DELETE /resource_set/112210f47de98100 HTTP/1.1
   Host: as.example.com
   If-Match: "2"
   ...

( draft 00, http://tools.ietf.org/html/draft-hardjono-oauth-resource-reg-00#section-8 )
