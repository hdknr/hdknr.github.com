:orphan:


1. Introduction
===========================


There are various circumstances under which an OAuth 2.0 :term:`[OAuth2]`
resource server needs to communicate to its authorization server
information about its protected resources.  
A resource server and authorization server may need to communicate 
with each other about resources in one of several circumstances:

   -  In some OAuth 2.0 deployments, the resource server and
      authorization server are operated by the same organization and
      deployed in the same domain, 
      but many resource servers share a single authorization server 
      (a security token service (STS) component).  

      Thus, even though the trust between these two is
      typically tightly bound, 
      there is value in defining a singular standardized resource protection communications interface 
      between the authorization server and each of the resource servers.

   -  In some deployments of OpenID Connect, which has a dependency on OAuth 2.0, 
      the OpenID Provider (OP) component is a specialized version of an OAuth authorization server 
      that brokers availability of user attributes by dealing 
      with with an ecosystem of attribute providers (APs).  
  
      These APs effectively function as third-party resource servers.  
      Thus, there is value in defining a mechanism by
      which all of the third-party APs can communicate with a central OP, 
      as well as ensuring that trust between the authorization server 
      and resource servers is able to be established in a dynamic, loosely coupled fashion.

   -  In some deployments of User-Managed Access (UMA), 
      which has a dependency on OAuth 2.0, 
      an end-user resource owner (the "user" in UMA) 
      may choose their own authorization server as an independent "CloudOS" authorization service, 
      along with using any number of resource servers that make up their "personal cloud".  

      Thus, there is value in defining a mechanism by which all of the third-party
      resource servers can outsource resource protection 
      (and potentially discovery) to a central authorization server, 
      as well as ensuring that trust between the authorization server and
      resource servers is able to be established by the resource owner
      in a dynamic, loosely coupled fashion.

This specification defines an API through which the resource server
can register information about resource sets with the authorization server.

( draft 00, http://tools.ietf.org/html/draft-hardjono-oauth-resource-reg-00#section-1 )
