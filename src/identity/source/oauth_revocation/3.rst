3.  Implementation Note
================================================

OAuth 2.0 allows deployment flexibility with respect to the style of
access tokens.  The access tokens may be self-contained so that a
resource server needs no further interaction with an authorization
server issuing these tokens to perform an authorization decision of
the client requesting access to a protected resource.  A system
design may, however, instead use access tokens that are handles
referring to authorization data stored at the authorization server.
This consequently requires a resource server to issue a request to
the respective authorization server to retrieve the content of the
access token every time a client presents an access token.

While these are not the only options, they illustrate the
implications for revocation.  In the latter case, the authorization
server is able to revoke an access token previously issued to a
client when the resource server relays a received access token.  In
the former case, some (currently non-standardized) backend
interaction between the authorization server and the resource server
may be used when immediate access token revocation is desired.
Another design alternative is to issue short-lived access tokens,
which can be refreshed at any time using the corresponding refresh
tokens.  This allows the authorization server to impose a limit on
the time revoked when access tokens are in use.

Which approach of token revocation is chosen will depend on the
overall system design and on the application service provider's risk
analysis.  The cost of revocation in terms of required state and
communication overhead is ultimately the result of the desired
security properties.


( http://tools.ietf.org/html/rfc7009#section-3 )
