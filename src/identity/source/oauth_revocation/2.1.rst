.. _oauth_revocation.request:

2.1.  Revocation Request
----------------------------------------

The client constructs the request by including the following parameters 
using the "**application/x-www-form-urlencoded**" format 
in the HTTP request entity-body:

.. glossary::

   token   
        REQUIRED.  

        The token that the client wants to get revoked.

   token_type_hint  

        OPTIONAL.  

        A hint about the type of the token submitted for revocation.  

        Clients MAY pass this parameter in order to help the authorization server 
        to optimize the token lookup.  

        If the server is unable to locate the token using the given hint, 
        it MUST extend its search across all of its supported token types.  
    
        An authorization server MAY ignore this parameter, 
        particularly if it is able to detect the token type automatically.  
        
        This specification defines two such values:

           * access_token: An access token as defined in [RFC6749], Section 1.4

           * refresh_token: A refresh token as defined in [RFC6749], Section 1.5

        Specific implementations, profiles, and extensions of this
        specification MAY define other values for this parameter
        using the registry defined in :ref:`Section 4.1.2 <oauth_revocation.4.1.2>`.

        .. seealso::
            :ref:`oauth_introspect.request`

The client also includes its authentication credentials as described
in Section 2.3. of [RFC6749].

For example, a client may request the revocation of a refresh token
with the following request::

    POST /revoke HTTP/1.1
    Host: server.example.com
    Content-Type: application/x-www-form-urlencoded
    Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

    token=45ghiukldjahdnhzdauz&token_type_hint=refresh_token

The authorization server first validates the client credentials (in
case of a confidential client) and then verifies whether the token
was issued to the client making the revocation request.  If this
validation fails, the request is refused and the client is informed
of the error by the authorization server as described below.

In the next step, the authorization server invalidates the token.
The invalidation takes place immediately, and the token cannot be
used again after the revocation.  In practice, there could be a
propagation delay, for example, in which some servers know about the
invalidation while others do not.  Implementations should minimize
that window, and clients must not try to use the token after receipt
of an HTTP 200 response from the server.

Depending on the authorization server's revocation policy, the
revocation of a particular token may cause the revocation of related
tokens and the underlying authorization grant.  If the particular
token is a refresh token and the authorization server supports the
revocation of access tokens, then the authorization server SHOULD
also invalidate all access tokens based on the same authorization
grant (see Implementation Note).  If the token passed to the request
is an access token, the server MAY revoke the respective refresh
token as well.

Note: A client compliant with [RFC6749] must be prepared to handle
unexpected token invalidation at any time.  Independent of the
revocation mechanism specified in this document, resource owners may
revoke authorization grants, or the authorization server may
invalidate tokens in order to mitigate security threats.  Thus,
having different server policies with respect to cascading the
revocation of tokens should not pose interoperability problems.

( http://tools.ietf.org/html/rfc7009#section-2.1)
