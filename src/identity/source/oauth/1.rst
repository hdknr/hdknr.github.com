1.  Introduction
==========================

In the traditional client-server authentication model, 
the client requests an access restricted resource (protected resource) 
on the server by authenticating with the server 
using the resource owner's credentials.  

In order to provide third-party applications access to restricted resources, 
the resource owner shares its credentials with the third-party.  

This creates several problems and limitations:

   o  Third-party applications are required to store the resource
      owner's credentials for future use, typically a password in clear-text.

   o  Servers are required to support password authentication, despite
      the security weaknesses created by passwords.

   o  Third-party applications gain overly broad access to the resource
      owner's protected resources, leaving resource owners without any
      ability to restrict duration or access to a limited subset of
      resources.

   o  Resource owners cannot revoke access to an individual third-party
      without revoking access to all third-parties, and must do so by
      changing their password.

   o  Compromise of any third-party application results in compromise of
      the end-user's password and all of the data protected by that
      password.

OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource owner.  
In OAuth, 
the client requests access to resources controlled by the resource owner 
and hosted by the resource server, 
and is issued a different set of credentials than those of the resource owner.

Instead of using the resource owner's credentials to access protected resources, 
the client obtains an access token - 
a string denoting a specific scope, lifetime, and other access attributes.  
:term:`Access tokens` are issued to third-party clients 
by an authorization server with the approval of the resource owner.  
The client uses the :term:`access token` to access the protected resources 
hosted by the resource server.

For example, an :term:`end-user` (:term:`resource owner`) can grant 
a printing service (:term:`client`) access to her protected photos stored 
at a photo sharing service (:term:`resource server`), 
without sharing her username and password with the printing service.  

Instead, she authenticates directly with a server 
trusted by the photo sharing service (:term:`authorization server`) 
which issues the printing service delegation-specific credentials (:term:`access token`).

This specification is designed for use with HTTP [:term:`RFC2616`].  
The use of OAuth with any transport protocol other than HTTP is undefined.

(v.22)
