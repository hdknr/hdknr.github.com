2.1. Client Types
------------------------------------

.. note::

    - no assumption for client type. must check 

    .. glossry::

        Client Type
        Client Types
            - confidential : web server
            - public : javascript, smartphone application

        Client Profile
        Client Profiles
            - web application (:term:`confidential` / web application )
            - user-agent-based application (:term:`public` / javascript, RIA on the HTML )
            - native application (:term:`public` / smart phone or desktop application )
    
OAuth defines two :term:`client types`, 
based on their ability to authenticate securely 
with the :term:`authorization server` 
(i.e., ability to maintain the confidentiality of their client credentials):

.. glossary::

    confidential
       Clients capable of maintaining the confidentiality of their
       credentials (e.g., client implemented on a secure server with
       restricted access to the client credentials), or capable of secure
       client authentication using other means.
    
    public
       Clients incapable of maintaining the confidentiality of their
       credentials (e.g., clients executing on the device used by the
       resource owner, such as an installed native application or a web
       browser-based application), and incapable of secure client
       authentication via any other means.

The :term:`client type` designation is based on 
the authorization server's definition of secure authentication 
and its acceptable exposure levels of client credentials.  
The authorization server SHOULD NOT make assumptions about the client type.

A client may be implemented as a distributed set of components, 
each with a different client type and security context 
(e.g., a distributed client with both a confidential server-based component
and a public browser-based component).  
If the authorization server does not provide support 
for such clients or does not provide guidance 
with regard to their registration, 
the client SHOULD register each component as a separate client.

This specification has been designed around the following :term:`client profiles`:

.. glossary::

    web application
       A web application is a :term:`confidential` client 
       running on a web server.  

       Resource owners access the client via an HTML user
       interface rendered in a user-agent on the device used by the
       resource owner.  

       The client credentials as well as any access token 
       issued to the client are stored on the web server and 
       are not exposed to or accessible by the resource owner.
    
    user-agent-based application
       A user-agent-based application is a :term:`public` client in which the
       client code is downloaded from a web server and executes within a
       user-agent (e.g., web browser) on the device used by the resource
       owner.  Protocol data and credentials are easily accessible (and
       often visible) to the resource owner.  Since such applications
       reside within the user-agent, they can make seamless use of the
       user-agent capabilities when requesting authorization.
    
    native application
       A native application is a :term:`public` client 
       installed and executed on the device used by the resource owner.  

       Protocol data and credentials are accessible to the resource owner.  
       It is assumed that any client authentication credentials included in the
       application can be extracted.  On the other hand, dynamically
       issued credentials such as access tokens or refresh tokens can
       receive an acceptable level of protection.  At a minimum, these
       credentials are protected from hostile servers with which the
       application may interact.  On some platforms, these credentials
       might be protected from other applications residing on the same
       device.

( http://tools.ietf.org/html/rfc6749.html#section-2.1 )
