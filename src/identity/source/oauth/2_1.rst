2.1. Client Types
--------------------------------

OAuth defines two client types, 
based on their ability to authenticate securely with the :term:`authorization server` 
(i.e. ability to maintain the confidentiality of their client credentials):

.. glossary::

   confidential
      Clients capable of maintaining the confidentiality of their
      credentials (e.g. client implemented on a secure server with
      restricted access to the client credentials), or capable of secure
      client authentication using other means.

   public
      Clients incapable of maintaining the confidentiality of their
      credentials (e.g. clients executing on the resource owner's device
      such as an installed native application or a web browser-based
      application), and incapable of secure client authentication via
      any other means.

The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.

This specification has been designed around the following client profiles:


.. glossary::

   web application
      A web application is a :term:`confidential` client running on a web server.  
      :term:`Resource owners` access the :term:`client` via an HTML user interface rendered 
      in a user-agent on the :term:`resource owner`'s device.
      The :term:`client credentials` as well as any :term:`access token` issued to the :term:`client` 
      are stored on the :term:`web server` and are not exposed to or accessible by the :term:`resource owner`.

   user-agent-based application
      A user-agent-based application is a :term:`public` client 
      in which the client code is downloaded from a web server and executes within a
      user-agent (e.g. web browser) on the resource owner's device.
      Protocol data and credentials are easily accessible (and often visible) to the resource owner.  
      Since such applications reside within the user-agent, 
      they can make seamless use of the user-agent capabilities when requesting authorization.


   native application
      A native application is a :term:`public` client installed and executed on the resource owner's device.  
      Protocol data and credentials are accessible to the resource owner.  
      It is assumed that any client authentication credentials included in the application can be extracted.  
      On the other hand, dynamically issued credentials such access tokens or 
      refresh tokens can receive an acceptable level of protection.  
      At a minimum, these credentials are protected from hostile servers which the application may interact with.  
      On some platform these credentials might be protected from other applications residing on the same device.

(v.23)

.. note::

    .. list-table::
    
        *   -   client profile
            -   :term:`confidential`
            -   :term:`public`
    
        *   -   :term:`web application`
            -   ○
            -
    
        *   -   :term:`user-agent-based application` 
            -       
            -   ○
    
        *   -   :term:`native application`
            -       
            -   ○
    
