7.  Error Responses
==============================

If an assertion is not valid or has expired, 
the :term:`Authorization Server` MUST construct an error response 
as defined in :doc:`OAuth 2.0 [I-D.ietf.oauth-v2] <oauth>`.  
The value of the error parameter MUST be the ":term:`invalid_grant`" error code.  
The :term:`authorization server` MAY include additional information 
regarding the reasons the assertion was considered invalid 
using the ":term:`error_description`" or ":term:`error_uri`" parameters.

For example:

::

   HTTP/1.1 400 Bad Request
   Content-Type: application/json
   Cache-Control: no-store

   {
   "error":"invalid_grant",
   "error_description":"Audience validation failed"
   }

A :term:`client` MUST NOT include :term:`client credentials` using more than one mechanism.  
:term:`Token endpoints` can differentiate between assertion based credentials 
and other :term:`client credential types` by looking for the presence of the :term:`client_assertion` 
and :term:`client_assertion_type` attributes which will only be present 
when using assertions for **client authentication**.  

If more than one mechanism is used, 
the :term:`Authorization Server` MUST construct an error response as defined in :doc:`OAuth 2.0 [I-D.ietf.oauth-v2] <oauth>`.  
The value of the error parameter MUST be the ":term:`invalid_client`" error code.  
The :term:`authorization server` MAY include additional information 
regarding the reasons the client was considered invalid using the ":term:`error_description`" or ":term:`error_uri`" parameters.

For example:

::

   HTTP/1.1 400 Bad Request
   Content-Type: application/json
   Cache-Control: no-store

   {
   "error":"invalid_client"
   "error_description":"Multiple Credentials Not Allowed"
   }

