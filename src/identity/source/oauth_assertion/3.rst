3.  Framework
====================================================

An assertion is a package of information that allows identity and
security information to be shared across security domains.  An
assertion typically contains information about a subject or
principal, information about the party that issued the assertion and
when was it issued, as well as the conditions under which the
assertion is to be considered valid, such as when and where it can be
used.

The entity that creates and signs the assertion is typically known as
the "Issuer" and the entity that consumes the assertion and relies on
its information is typically known as the "Relying Party".  In the
context of this document, the authorization server acts as a relying
party.

Assertions used in the protocol exchanges defined by this
specification MUST always be protected against tampering using a
digital signature or a keyed message digest applied by the issuer.
An assertion MAY additionally be encrypted, preventing unauthorized
parties from inspecting the content.

Although this document does not define the processes by which the
client obtains the assertion (prior to sending it to the
authorization server), there are two common patterns described below.


Third Party Created Assertion
------------------------------------------

In the first pattern, depicted in Figure 1, 
the client obtains an assertion from a third party entity capable of issuing, 
renewing, transforming, and validating security tokens.  
Typically such an entity is known as a ":term:`Security Token Service`" (:term:`STS`) or 
just ":term:`Token Service`" and a trust relationship 
(usually manifested in the exchange of some kind of key material) 
exists between the token service and the relying party.  
The token service is the assertion issuer; its role is 
to fulfill requests from clients, 
which present various credentials, 
and mint assertions as requested, fill them with appropriate information, 
and sign them.  

WS-Trust [OASIS.WS-Trust] is one available standard 
for requesting security tokens (assertions).


::

    Relying
    Party                     Client                   Token Service
    |                          |                         |
    |                          |  1) Request Assertion   |
    |                          |------------------------>|
    |                          |                         |
    |                          |  2) Assertion           |
    |                          |<------------------------|
    |    3) Assertion          |                         |
    |<-------------------------|                         |
    |                          |                         |
    |    4) OK or Failure      |                         |
    |------------------------->|                         |
    |                          |                         |
    |                          |                         |

Figure 1: Third Party Created Assertion

Self-Issued Assertion
------------------------------------

In the second pattern, 
depicted in Figure 2, 
the client creates assertions locally.  
To sign the assertions, 
it has to obtain key material: 
either symmetric keys or asymmetric key pairs.  
The mechanisms for obtaining this key material are beyond the scope of
this specification.

Although assertions are usually used to convey identity and security information, 
self-issued assertions can also serve a different purpose.  
They can be used to demonstrate knowledge of some secret,
such as a client secret, without actually communicating the secret
directly in the transaction.  In that case, additional information
included in the assertion by the client itself will be of limited
value to the relying party and, for this reason, only a bare minimum
of information is typically included in such an assertion, such as
information about issuing and usage conditions.

::

    Relying
    Party                     Client
    |                          |
    |                          | 1) Create
    |                          |    Assertion
    |                          |--------------+
    |                          |              |
    |                          | 2) Assertion |
    |                          |<-------------+
    |    3) Assertion          |
    |<-------------------------|
    |                          |
    |    4) OK or Failure      |
    |------------------------->|
    |                          |
    |                          |


Figure 2: Self-Issued Assertion

Deployments need to determine the appropriate variant to use based on
the required level of security, the trust relationship between the
entities, and other factors.

Assertion Types(Bearer/HoK)
------------------------------------------------

From the perspective of what must be done by the entity presenting
the assertion, there are two general types of assertions:

1.  :term:`Bearer Assertions`: Any entity in possession of a bearer assertion
(e.g. the bearer) can use it to get access to the associated
resources (without demonstrating possession of a cryptographic
key).  To prevent misuse, bearer assertions need to be protected
from disclosure in storage and in transport.  A secure
communication channel is required between all entities to avoid
leaking the assertion to unauthorized parties.

2.  :term:`Holder-of-Key Assertions`: To access the associated resources, the
entity presenting the assertion must demonstrate possession of
additional cryptographic material.  The token service thereby
binds a key identifier to the assertion and the client has to
demonstrate to the relying party that it knows the key
corresponding to that identifier when presenting the assertion.
This mechanism provides additional security properties.

The protocol parameters and processing rules defined in this document
are intended to support a client presenting a bearer assertion to an
authorization server.  The use of holder-of-key assertions are not
precluded by this document, but additional protocol details would
need to be specified.


( http://tools.ietf.org/html/draft-ietf-oauth-assertions-09#section-3 )
