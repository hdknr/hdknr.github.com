4.1.  Using Assertions for Client Authentication
------------------------------------------------------------

In scenarios 
where one wants to avoid sending secrets, 
one wants to send values derived from the secret 
that prove to the receiver that the sender is in **possession of the secret** 
without actually sending the secret.

For example, 
a client can establish a secret using an out-of-band mechanism with a :term:`resource server`.  
As part of this out-of-band communication the client and :term:`resource server` agree 
that the client will authenticate itself using an assertion with agreed upon parameters 
that will be signed by the provisioned secret.  
Later on, the client might send an access token request to the token endpoint 
for the resource server that includes an authorization code, 
as well as a :term:`client_assertion` 
that is signed with the previously agreed key and parameters.  
The :term:`client_assertion` proves to the :ref:`token endpoint` the **identity of the client** 
and the :term:`authorization code` provides the link to the end-user authorization.

The following section defines the use of assertions as :term:`client credentials` 
as an extension of :ref:`Section 3.2 of OAuth 2.0 [I-D.ietf.oauth-v2] <oauth_3_2>`.  
When using assertions as client credentials,
the :term:`client` MUST include the assertion 
using the following HTTP request parameters:

.. glossary::

   client_id  
        OPTIONAL.  
        The :term:`client identifier` as described in :ref:`Section 3 of OAuth 2.0 [I-D.ietf.oauth-v2] <oauth_3>`.

   client_assertion_type  
        REQUIRED.  
        The **format** of the assertion as defined by the :term:`authorization server`.  
        The value MUST be an :term:`absolute URI`.

   client_assertion  
        REQUIRED.  
        The assertion being used to authenticate the client.  
        Specific serialization of the assertion is defined by profile documents.  
        The serialization MUST be encoded for transport within HTTP forms.  
        It is RECOMMENDED that **base64url** be used.

The following non-normative example demonstrates 
a :term:`client` authenticating using an assertion during an :term:`Authorization Code` 
:term:`Access Token Request` as defined in :ref:`Section 4.1.3 of OAuth 2.0 [I-D.ietf.oauth-v2] <oauth_4_1_3>`. 
(line breaks are for display purposes only):

:: 

    POST /token HTTP/1.1
    Host: server.example.com
    Content-Type: application/x-www-form-urlencoded
    
    grant_type=authorization_code&
    code=i1WsRn1uB1&
    client_id=s6BhdRkqt3&
    client_assertion_type=urn%3Aoasis%3Anames%sAtc%3ASAML%3A2.0%3Aassertion&
    client_assertion=PHNhbWxwOl...[omitted for brevity]...ZT

The :term:`client` MUST NOT include the :term:`client_credential` using more than one mechanism.  
Token endpoints can differentiate between client assertion credentials 
and other client credential types by looking for the presence of the :term:`client_assertion` and 
:term:`client_assertion_type` attributes which will only be present with client assertion credentials.  
See :ref:`section 7 <oauth_assertion.7>` for more details
