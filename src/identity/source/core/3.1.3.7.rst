3.1.3.7.  ID Token Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clients MUST validate the ID Token in the Token Response in the following manner:

    1.  If the ID Token is encrypted, 
        decrypt it using the keys and algorithms that the Client specified 
        during Registration that the OP was to use to encrypt the ID Token. 
        If encryption was negotiated with the OP at Registration time 
        and the ID Token is not encrypted, the RP SHOULD reject it.

    2.  The Issuer Identifier for the OpenID Provider 
        (which is typically obtained during Discovery) 
        MUST exactly match the value of the iss (issuer) Claim.

    3.  The Client MUST validate that the aud (audience) 
        Claim contains its client_id value registered at the Issuer 
        identified by the iss (issuer) Claim as an audience. 

        The aud (audience) Claim MAY contain an array with more than one element. 

        The ID Token MUST be rejected if the ID Token does not list the Client 
        as a valid audience, 
        or if it contains additional audiences not trusted by the Client.

    4.  If the ID Token contains multiple audiences, 
        the Client SHOULD verify that an :term:`azp` Claim is present.

    5.  If an :term:`azp` (authorized party) Claim is present, 
        the Client SHOULD verify that its :term:`client_id` is the Claim Value.

    6.  If the ID Token is received via direct communication 
        between the Client and the Token Endpoint 
        (which it is in this flow), 
        the TLS server validation MAY be used to validate the issuer 
        in place of checking the token signature. 

        The Client MUST validate the signature of 
        all other ID Tokens according to JWS [JWS] 
        using the algorithm specified in the JWT alg header parameter. 

        The Client MUST use the keys provided by the Issuer.

    7.  The :term:`alg` value SHOULD be the default of RS256 
        or the algorithm sent by the Client 
        in the :term:`id_token_signed_response_alg` parameter 
        during :doc:`Registration <reg>`.

    8.  If the JWT :term:`alg` header parameter uses a MAC based algorithm 
        such as HS256, HS384, or HS512, 
        the octets of the UTF-8 representation of the :term:`client_secret` 
        corresponding to the :term:`client_id` contained 
        in the :term:`aud` (audience) Claim are used as the key 
        to validate the signature. 

        For MAC based algorithms, 
        the behavior is unspecified if the :term:`aud` is multi-valued 
        or if an :term:`azp` value is present that is different than the aud value.

    9.  The current time MUST be    
        before the time represented by the :term:`exp` Claim.

    10. The :term:`iat` Claim can be used to reject tokens 
        that were issued too far away from the current time, 
        limiting the amount of time that nonces need to be stored 
        to prevent attacks. 

        The acceptable range is Client specific.

    11. If a :term:`nonce` value was sent in the Authentication Request, 
        a nonce Claim MUST be present and its value checked 
        to verify that it is the same value as the one 
        that was sent in the Authentication Request. 

        The Client SHOULD check the :term:`nonce` value for :term:`replay attacks`. 

        The precise method for detecting replay attacks is Client specific.

    12. If the :term:`acr` Claim was requested, 
        the Client SHOULD check that the asserted Claim Value is appropriate. 

        The meaning and processing of acr Claim Values is 
        out of scope for this specification.

    13. If the :term:`auth_time` Claim was requested, 
        either through a specific request for this Claim 
        or by using the :term:`max_age` parameter, 
        the Client SHOULD check the :term:`auth_time` Claim value 
        and request re-authentication 
        if it determines too much time has elapsed 
        since the last End-User authentication.
    

(draft17)
