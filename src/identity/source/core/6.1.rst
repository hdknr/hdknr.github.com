6.1.  Passing a Request Object by Value
------------------------------------------------

The request Authorization Request parameter enables 
OpenID Connect requests to be passed in a single, self-contained parameter 
and to be optionally signed and/or encrypted. 

It represents the request as a JWT 
whose Claims are the request parameters specified in :ref:`Section 3.1.2 <core.3.1.2>`. 

This JWT is called a Request Object.



Support for the request parameter is OPTIONAL. 
The :term:`request_parameter_supported` :doc:`Discovery <discovery>` result 
indicates whether the OP supports this parameter. 
Should an OP not support this parameter and an RP uses it, 
the OP MUST return the :term:`request_not_supported` error.

When the request parameter is used, 
the OpenID Connect request parameter values contained 
in the JWT supersede those passed using the OAuth 2.0 request syntax. 

However, 
parameters MAY also be passed using the OAuth 2.0 request syntax 
even when a Request Object is used; 
this would typically be done to enable a cached, pre-signed 
(and possibly pre-encrypted) Request Object value 
to be used containing the fixed request parameters, 
while parameters that can vary with each request, 
such as state and nonce, 
are passed as OAuth 2.0 parameters.

.. note::
    - request_uri でパラメータを事前共有しても、 nonce, stateは必ず送る事
    - OPはRequest Objectを処理したあとでAuthReqのパラメータでオーバーライドすること(?)



So that the request is a valid OAuth 2.0 Authorization Request, 
values for the :term:`response_type` and :term:`client_id` parameters 
MUST be included using the OAuth 2.0 request syntax, 
since they are REQUIRED by OAuth 2.0. 
The values for these parameters MUST match those in the Request Object, 
if present.

Even if a :term:`scope` parameter is present in the Request Object value, 
a :term:`scope` parameter MUST always be passed 
using the OAuth 2.0 request syntax containing the **openid** scope value 
to indicate to the underlying OAuth 2.0 logic 
that this is an OpenID Connect request.

.. note::
    - request / request_uri があればOpenID Connectだとわかりそうな気はしますが。。。

The Request Object MAY be signed or unsigned (plaintext). 

When it is **plaintext**, 
this is indicated by use of the :term:`none` algorithm :term:`[JWA]` 
in the JWS header. 

.. node::
    - 署名されている場合、

        - iss: RP
        - aud: OP

If **signed**, 
the Request Object SHOULD contain the Claims 
:term:`iss` (issuer) and :term:`aud` (audience) as members. 
The :term:`iss` value SHOULD be the Client ID of the RP, 
unless it was signed by a different party than the RP. 
The :term:`aud` value SHOULD be or include the OP's Issuer Identifier URL.

The Request Object MAY also be encrypted using JWE [JWE] 
and MAY be encrypted without also being signed. 
If both signing and encryption are performed, 
it MUST be signed then encrypted, 
with the result being a Nested JWT, 
as defined in [JWT].

:term:`request` and :term:`request_uri` parameters 
MUST NOT be included in Request Objects.

The following is a non-normative example of the Claims 
in a Request Object before base64url encoding and signing:

.. code-block:: javascript

  {
   "iss": "s6BhdRkqt3",
   "aud": "https://server.example.com",
   "response_type": "code id_token",
   "client_id": "s6BhdRkqt3",
   "redirect_uri": "https://client.example.org/cb",
   "scope": "openid",
   "state": "af0ifjsldkj",
   "nonce": "n-0S6_WzA2Mj",
   "max_age": 86400,
   "claims":
    {
     "userinfo":
      {
       "given_name": {"essential": true},
       "nickname": null,
       "email": {"essential": true},
       "email_verified": {"essential": true},
       "picture": null
      },
     "id_token":
      {
       "gender": null,
       "birthdate": {"essential": true},
       "acr": {"values": ["urn:mace:incommon:iap:silver"]}
      }
    }
  }

Signing it with the RS256 algorithm results in this Request Object value 
(with line wraps within values for display purposes only):

::

  eyJhbGciOiJSUzI1NiIsImtpZCI6ImsyYmRjIn0.ew0KICJpc3MiOiAiczZCaGRSa3
  F0MyIsDQogImF1ZCI6ICJodHRwczovL3NlcnZlci5leGFtcGxlLmNvbSIsDQogInJl
  c3BvbnNlX3R5cGUiOiAiY29kZSBpZF90b2tlbiIsDQogImNsaWVudF9pZCI6ICJzNk
  JoZFJrcXQzIiwNCiAicmVkaXJlY3RfdXJpIjogImh0dHBzOi8vY2xpZW50LmV4YW1w
  bGUub3JnL2NiIiwNCiAic2NvcGUiOiAib3BlbmlkIiwNCiAic3RhdGUiOiAiYWYwaW
  Zqc2xka2oiLA0KICJub25jZSI6ICJuLTBTNl9XekEyTWoiLA0KICJtYXhfYWdlIjog
  ODY0MDAsDQogImNsYWltcyI6IA0KICB7DQogICAidXNlcmluZm8iOiANCiAgICB7DQ
  ogICAgICJnaXZlbl9uYW1lIjogeyJlc3NlbnRpYWwiOiB0cnVlfSwNCiAgICAgIm5p
  Y2tuYW1lIjogbnVsbCwNCiAgICAgImVtYWlsIjogeyJlc3NlbnRpYWwiOiB0cnVlfS
  wNCiAgICAgImVtYWlsX3ZlcmlmaWVkIjogeyJlc3NlbnRpYWwiOiB0cnVlfSwNCiAg
  ICAgInBpY3R1cmUiOiBudWxsDQogICAgfSwNCiAgICJpZF90b2tlbiI6IA0KICAgIH
  sNCiAgICAgImdlbmRlciI6IG51bGwsDQogICAgICJiaXJ0aGRhdGUiOiB7ImVzc2Vu
  dGlhbCI6IHRydWV9LA0KICAgICAiYWNyIjogeyJ2YWx1ZXMiOiBbInVybjptYWNlOm
  luY29tbW9uOmlhcDpzaWx2ZXIiXX0NCiAgICB9DQogIH0NCn0.nwwnNsk1-Zkbmnvs
  F6zTHm8CHERFMGQPhos-EJcaH4Hh-sMgk8ePrGhw_trPYs8KQxsn6R9Emo_wHwajyF
  KzuMXZFSZ3p6Mb8dkxtVyjoy2GIzvuJT_u7PkY2t8QU9hjBcHs68PkgjDVTrG1uRTx
  0GxFbuPbj96tVuj11pTnmFCUR6IEOXKYr7iGOCRB3btfJhM0_AKQUfqKnRlrRscc8K
  ol-cSLWoYE9l5QqholImzjT_cMnNIznW9E7CDyWXTsO70xnB4SkG6pXfLSjLLlxmPG
  iyon_-Te111V8uE83IlzCYIb_NMXvtTIVc1jpspnTSD7xMbpL-2QgwUsAlMGzw

The following RSA public key, 
represented in JWK format, 
can be used to validate the Request Object signature in this 
and subsequent Request Object examples 
(with line wraps within values for display purposes only):

.. code-block:: javascript

  {
   "kty":"RSA",
   "kid":"k2bdc",
   "n":"y9Lqv4fCp6Ei-u2-ZCKq83YvbFEk6JMs_pSj76eMkddWRuWX2aBKGHAtKlE5P
        7_vn__PCKZWePt3vGkB6ePgzAFu08NmKemwE5bQI0e6kIChtt_6KzT5OaaXDF
        I6qCLJmk51Cc4VYFaxgqevMncYrzaW_50mZ1yGSFIQzLYP8bijAHGVjdEFgZa
        ZEN9lsn_GdWLaJpHrB3ROlS50E45wxrlg9xMncVb8qDPuXZarvghLL0HzOuYR
        adBJVoWZowDNTpKpk2RklZ7QaBO7XDv3uR7s_sf2g-bAjSYxYUGsqkNA9b3xV
        W53am_UZZ3tZbFTIh557JICWKHlWj5uzeJXaw",
   "e":"AQAB"
  }

(draft17)

