9.  Client Authentication
===================================

This section defines a set of Client Authentication methods that are used by Clients to authenticate to the Authorization Server when using the Token Endpoint. During Client Registration, the RP (Client) MAY register a Client Authentication method. If no method is registered, the default method is client_secret_basic.

These Client Authentication methods are:

.. glossary::

    client_secret_basic
        Clients that have received a :term:`client_secret` value 
        from the Authorization Server authenticate with the Authorization Server 
        in accordance with :ref:`Section 3.2.1 of OAuth 2.0 <oauth.3.2.1>` :term:`[RFC6749]` 
        using the HTTP :term:`Basic authentication` scheme.

    client_secret_post
        Clients that have received a :term:`client_secret` value from the Authorization Server, 
        authenticate with the Authorization Server 
        in accordance with Section :ref:`3.2.1 of OAuth 2.0 <oauth.3.2.1>` :term:`[RFC6749]` 
        by including the :term:`Client Credentials` in the :term:`request body`.

    client_secret_jwt
        Clients that have received a :term:`client_secret` value 
        from the Authorization Server create a JWT 
        using an HMAC SHA algorithm, such as HMAC SHA-256. 

        The HMAC (Hash-based Message Authentication Code) is calculated 
        using the octets of the UTF-8 representation of 
        the client_secret as the shared key.

        The Client authenticates in accordance with JSON Web Token (JWT) Profile 
        for OAuth 2.0 Client Authentication and Authorization Grants [OAuth.JWT] 
        and Assertion Framework for OAuth 2.0 Client Authentication 
        and Authorization Grants [OAuth.Assertions]. 

        The JWT MUST contain the following REQUIRED Claim Values 
        and MAY contain the following OPTIONAL Claim Values:

            iss
                REQUIRED. 

                Issuer. 

                This MUST contain the :term:`client_id` of the OAuth Client.

            sub
                REQUIRED. Subject. 


                This MUST contain the :term:`client_id` of the OAuth Client.
    
            aud
                REQUIRED. Audience. 
    
                The aud (audience) Claim. 
                Value that identifies the Authorization Server as an intended audience. 

                The Authorization Server MUST verify that it is an intended audience 
                for the token. 

                The Audience SHOULD be the URL of 
                the Authorization Server's :term:`Token Endpoint`.

            jti
                REQUIRED. 

                JWT ID. 

                A unique identifier for the token, 
                which can be used to prevent reuse of the token. 

                These tokens MUST only be used once, 
                unless conditions for reuse were negotiated between the parties; 
                any such negotiation is beyond the scope of this specification.

            exp
                REQUIRED. 

                Expiration time on or after 
                which the ID Token MUST NOT be accepted for processing.

            iat
                OPTIONAL. 

                Time at which the JWT was issued.

        The JWT MAY contain other Claims. 

        Any Claims used that are not understood MUST be ignored.

        The authentication token MUST be sent 
        as the value of the :term:`[OAuth.Assertions]` :term:`client_assertion` parameter.

        The value of the [OAuth.Assertions] :term:`client_assertion_type` parameter MUST 
        be "urn:ietf:params:oauth:client-assertion-type:jwt-bearer", per :term:`[OAuth.JWT]`.

    private_key_jwt
        Clients that have registered a public key sign a JWT 
        using that key. 

        The Client authenticates in accordance with JSON Web Token (JWT) Profile 
        for OAuth 2.0 Client Authentication and Authorization Grants [OAuth.JWT] 
        and Assertion Framework for OAuth 2.0 Client Authentication 
        and Authorization Grants [OAuth.Assertions]. 


        The JWT MUST contain the following REQUIRED Claim Values 
        and MAY contain the following OPTIONAL Claim Values:

            iss
                REQUIRED. Issuer. This MUST contain the client_id of the OAuth Client.

            sub
                REQUIRED. Subject. This MUST contain the client_id of the OAuth Client.

            aud
                REQUIRED. Audience. The aud (audience) Claim. 

                Value that identifies the Authorization Server as an intended audience. 

                The Authorization Server MUST verify that it is an intended audience for the token. 

                The Audience SHOULD be the URL of the Authorization Server's Token Endpoint.

            jti
                REQUIRED. JWT ID. A unique identifier for the token, 
                which can be used to prevent reuse of the token. 

                These tokens MUST only be used once, unless conditions 
                for reuse were negotiated between the parties; 
                any such negotiation is beyond the scope of this specification.

            exp
                REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.

            iat
                OPTIONAL. Time at which the JWT was issued.
                The JWT MAY contain other Claims. 

                Any Claims used that are not understood MUST be ignored.
                The authentication token MUST be sent as the value of the :term:`[OAuth.Assertions]` :term:`client_assertion` parameter.
                The value of the [OAuth.Assertions] client_assertion_type parameter MUST be "urn:ietf:params:oauth:client-assertion-type:jwt-bearer", per [OAuth.JWT].

            For example (with line wraps within values for display purposes only):

            ::
            
              POST /token HTTP/1.1
              Host: server.example.com
              Content-Type: application/x-www-form-urlencoded
            
              grant_type=authorization_code&
                code=i1WsRn1uB1&
                client_id=s6BhdRkqt3&
                client_assertion_type=
                urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer&
                client_assertion=PHNhbWxwOl ... ZT

    none
        The Client does not authenticate itself at the Token Endpoint, 
        either because it uses only the Implicit Flow 
        (and so does not use the Token Endpoint) 
        or because it is a Public Client 
        with no Client Secret or other authentication mechanism.
    
    
(draft17)
