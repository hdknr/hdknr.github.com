1. Introduction
========================

This specification defines the :term:`HTTP MAC access authentication scheme`,
providing a method for making authenticated HTTP requests 
with partial cryptographic verification of the request, 
covering the HTTP method, request URI, and host.

Similar to the :term:`HTTP Basic access authentication scheme` [RFC2617], 
the :term:`MAC scheme` utilizes a set of :term:`client credentials` 
which include an identifier and key.  
However, 
in contrast with the :term:`Basic scheme`, 
the key is never included in authenticated requests 
but is used to calculate the request :term:`MAC value` 
which is included instead.

The :term:`MAC scheme` requires 
the establishment of a :term:`shared symmetric key` 
between the :term:`client` and the :term:`server`.  
This specification offers one
such method for issuing a set of :term:`MAC credentials` 
to the :term:`client` using
:term:`OAuth 2.0` in the form of a :term:`MAC-type access token`.

The primary design goal of this mechanism is 
to simplify and improve HTTP authentication 
for services **that are unwilling or unable to employ TLS for every request**.  
In particular, 
this mechanism leverage an initial TLS setup phase 
to establish a shared secret between the client and the server.  
The shared secret is then used over an insecure channel 
to provide protection against a passive network attacker.

In particular, 
when a :term:`server` uses this mechanism, 
a :term:`passive network attacker` will be unable 
to "steal" the user's :term:`session token`, 
as is possible today with :term:`cookies` and other :term:`bearer tokens`.  
In addition, 
this mechanism helps secure the session token against leakage 
when sent over a secure channel to the wrong server.  
For example, 
when the client uses some form of dynamic configuration 
to determine where to send an authenticated request, 
or when the client fails to properly validate the server's identity 
as part of its TLS handshake.

Unlike the :term:`HTTP Digest authentication scheme`, 
this mechanism does not require interacting with the server 
to prevent :term:`replay attacks`.
Instead, the :term:`client` provides 
both a :term:`nonce` and a :term:`timestamp`, 
which the :term:`server` can use to prevent :term:`replay attacks` 
using a bounded amount of storage.  
Also unlike :term:`Digest <Digest scheme>`, 
this mechanism is not intended 
to protect the user's password itself 
because the :term:`client` and :term:`server` 
both have access to the key material in the clear.  
Instead, 
servers should issue a **short-lived derivative credential** 
for this mechanism during the initial TLS setup phase.

http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01#section-1

.. note::
    - TLS/SSL is required only when "token" is exchanged.
    - nonce and timestamp prevent replay attacks
