1.1. Example
----------------------------


The :term:`client` attempts to access a :term:`protected resource` without
authentication, making the following HTTP request to the resource
server:

::

     GET /resource/1?b=1&a=2 HTTP/1.1
     Host: example.com


The resource server returns the following authentication challenge:


::

     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: MAC


The :term:`client` has previously obtained a set of :ref:`MAC credentials` 
for accessing resources on the "http://example.com/" server.  
The :term:`MAC credentials` issued to the :term:`client` include the following attributes:

::

   MAC key identifier:  h480djs93hd8
   MAC key:  489dks293j39
   MAC algorithm:  hmac-sha-1

The :term:`client` constructs the authentication header 
by calculating a :term:`timestamp` 
(e.g. the number of seconds since January 1, 1970 00:00:00 GMT) 
and generating a random string used as a :term:`nonce`:

::

   Timestamp:  1336363200
   Nonce:  dj83hs9s

The client constructs the normalized request string 
(the new line separator character is represented by "\n" for display purposes only;
the trailing new line separator signify that no extension value is
included with the request, explained below):


::

     1336363200\n
     dj83hs9s\n
     GET\n
     /resource/1?b=1&a=2\n
     example.com\n
     80\n
     \n


The request MAC is calculated using the specified MAC algorithm
"hmac-sha-1" and the MAC key over the normalized request string.  
The result is base64-encoded to produce the request MAC:

::

     bhCQXTVyfj5cmA9uKkPFx1zeOXM=


The client includes the MAC key identifier, nonce, and request MAC
with the request using the "Authorization" request header field:

::

     GET /resource/1?b=1&a=2 HTTP/1.1
     Host: example.com
     Authorization: MAC id="h480djs93hd8",
                        ts="1336363200",
                        nonce="dj83hs9s",
                        mac="bhCQXTVyfj5cmA9uKkPFx1zeOXM="


The server validates the request by calculating the request MAC again
based on the request received and verifies the validity and scope of
the MAC credentials.  If valid, the server responds with the
requested resource representation.

(Draft 01 , http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01#section-1.1)
