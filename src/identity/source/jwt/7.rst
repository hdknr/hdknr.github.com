7.  Rules for Creating and Validating a JWT
====================================================

.. note::
    - :doc:`jws` : [:term:`Encoded JWS Header`].[:term:`Encoded JWS Payload`].[:term:`Encoded JWS Signature`] 
    - :doc:`jwe` - [:term:`Encoded JWE Header`].[:term:`Encoded JWE Encrypted Key`].[:term:`Encoded JWE Ciphertext`] 
    - **plaintext** - [:term:`Encoded JWT Header`].[:term:`Message`] 

.. glossary::
    Message
         UTF-8 representation of the :term:`JWT Claims Object`

To create a JWT, one MUST follow these steps:

    1.  Create a :term:`JWT Claims Set` containing the desired claims. 
        Note that :term:`white space` is explicitly allowed 
        in the representation and no canonicalization is performed 
        before encoding.

    2.  Let the :term:`Message` be the bytes 
        of the UTF-8 representation of the :term:`JWT Claims Set`.

    3.  Create a JWT Header containing the desired set of 
        Header Parameters.  

        The JWT MUST conform to either the [JWS] or [JWE]
        specifications.  

        Note that white space is explicitly allowed 
        in the representation and 
        no canonicalization need be performed before encoding.
 

    4.  Depending upon whether the JWT is a JWS or JWE, 
        there are two cases:

       *  If the JWT is a JWS, 
          create a JWS using the JWT Header 
          as the JWS Header and the Message as the JWS Payload; 
          all steps specified in :term:`[JWS]` 
          for creating a JWS MUST be followed.

       *  Else, 
          if the JWT is a JWE, 
          create a JWE using the JWT Header
          as the JWE Header and the Message as the JWE Plaintext; 
          all steps specified in :term:`[JWE]` 
          for creating a JWE MUST be followed.

    5.  If a nested signing or encryption operation will be performed,
        let the Message be the JWS or JWE, 
        and return to Step 3, 
        using a :ref:`"cty" (content type) <jwt.cty>` value of "JWT" 
        in the new JWT Header created in that step.

    6.  Otherwise, 
        let the resulting JWT be the JWS or JWE.

When validating a JWT, 
the following steps MUST be taken.  

The order of the steps is not significant in cases 
where there are no dependencies 
between the inputs and outputs of the steps.  

If any of the listed steps fails 
then the JWT MUST be rejected for processing.


    1.  The JWT MUST contain at least one period ('.') character.

    2.  Let the Encoded JWT Header be the portion of the JWT 
        before the first period ('.') character.

    3.  The Encoded JWT Header MUST be successfully :term:`base64url decoded`
        following the restriction given in this specification 
        that no padding characters have been used.

    4.  The resulting JWT Header MUST be completely valid JSON syntax
        conforming to :rfc:`7159` [RFC7159].

    5.  The resulting JWT Header MUST be validated 
        to only include parameters and values whose syntax 
        and semantics are both understood and supported 
        or that are specified as being ignored when not understood.

    6.  Determine whether the JWT is a JWS or a JWE 
        using any of the methods described in Section 9 of [JWE].

    7.  Depending upon whether the JWT is a JWS or JWE, 
        there are two cases:

        *  If the JWT is a JWS, 
           all steps specified in [JWS] 
           for validating a JWS MUST be followed.  

           Let the Message be the result of 
           base64url decoding the JWS Payload.

        *  Else, if the JWT is a JWE, 
           all steps specified in [JWE] for
           validating a JWE MUST be followed.  

           Let the Message be the JWE Plaintext.

    8.  If the JWT Header contains a "cty" (content type) value of "JWT", 
        then the Message is a JWT that was the subject of 
        nested signing or encryption operations.  

        In this case, 
        return to Step 1, using the Message as the JWT.

    9.  Otherwise, 
        let the JWT Claims Set be the Message.

    10. The JWT Claims Set MUST be completely valid JSON syntax
        conforming to :rfc:`7159` [RFC7159].

(draft30)
