.. _webfinger.rel:

4.3.  The "rel" Parameter
--------------------------------

When issuing a request to a WebFinger resource, the client MAY
utilize the "rel" parameter to request only a subset of the
information that would otherwise be returned without the "rel"
parameter.  When the "rel" parameter is used and accepted, only the
link relation types that match the link relation type provided via
the "rel" parameter are included in the array of links returned in
the JRD.  If there are no matching link relation types defined for
the resource, the "links" array in the JRD will be either absent or
empty.  All other information present in a resource descriptor
remains present, even when "rel" is employed.

The "rel" parameter MAY be included multiple times in order to
request multiple link relation types.

The purpose of the "rel" parameter is to return a subset of "link
relation objects" (see Section 4.4.4) that would otherwise be
returned in the resource descriptor.  Use of the parameter might
reduce processing requirements on either the client or server, and it
might also reduce the bandwidth required to convey the partial
resource descriptor, especially if there are numerous link relation
values to convey for a given "resource" value.  Note that if a client
requests a particular link relation type for which the server has no
information, the server MAY return a JRD with an empty "links" array
or no "links" array.

WebFinger resources SHOULD support the "rel" parameter.  If the
resource does not support the "rel" parameter, it MUST ignore the
parameter and process the request as if no "rel" parameter values
were present.

The following example uses the "rel" parameter to request links for
two link relation types:

::

    GET /.well-known/webfinger?
        resource=acct%3Abob%40example.com&
        rel=http%3A%2F%2Fwebfinger.example%2Frel%2Fprofile-page&
        rel=http%3A%2F%2Fwebfinger.example%2Frel%2Fbusinesscard HTTP/1.1
    Host: example.com

In this example, the client requests the link relations of type
"http://webfinger.example/rel/profile-page" and
"http://webfinger.example/rel/businesscard".  The server then
responds with a message like this:

::

     HTTP/1.1 200 OK
     Access-Control-Allow-Origin: *
     Content-Type: application/jrd+json

     {
       "subject" : "acct:bob@example.com",
       "aliases" :
       [
         "https://www.example.com/~bob/"
       ],
       "properties" :
       {
           "http://example.com/ns/role" : "employee"
       },
       "links" :
       [
         {
           "rel" : "http://webfinger.example/rel/profile-page",
           "href" : "https://www.example.com/~bob/"
         },
         {
           "rel" : "http://webfinger.example/rel/businesscard",
           "href" : "https://www.example.com/~bob/bob.vcf"
         }
       ]
     }


As you can see in the response, the resource representation contains
only the links of the types requested by the client and for which the
server had information, but the other parts of the JRD are still
present.  Note also in the above example that the links returned in
the "links" array all use HTTPS, which is important if the data
indirectly obtained via WebFinger needs to be returned securely.

( http://tools.ietf.org/html/rfc7033#section-4.3 )
