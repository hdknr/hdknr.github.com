5.7.  Web Cryptography
--------------------------

The W3C Web Cryptography API defines a standard cryptographic API for
the Web :term:`[WebCrypto]`.  

If a browser exposes this API, 
then JavaScript provided as part of a Web page can ask 
the browser to perform cryptographic operations, 
such as digest, MAC, encryption, or digital signing.

One of the key reasons to have the browser perform cryptographic
operations is to avoid 
allowing JavaScript code to access the **keying material** 
used for these operations.  

For example, 
this separation would prevent code injected 
through a cross-site scripting (XSS) attack 
from reading and exfiltrating keys stored within a browser.

While the malicious code could still use the key 
while running in the browser, 
this vulnerability can only be exercised 
while the vulnerable page is active in a user's browser.


However, 
the WebCryptography API also provides a key export functionality, 
which can allow JavaScript to extract a key from the API in wrapped form.  

For example, 
the JavaScript might provide a public key 
for which the corresponding private key is held by another device.  

The wrapped key provided by the API could then be used to
safely transport the key to the new device.  

While this could potentially allow malicious code to export a key, 
the need for an explicit export operation provides a control point, 
allowing for user notification or consent verification.

The Web Cryptography API also allows browsers to impose limitations
on the usage of the keys it handles.  
For example, 
a symmetric key might be marked as usable only for encryption, 
and not for MAC.  

When a key is exported in wrapped form, 
these attributes should be carried along with it.

The Web Cryptography API thus requires formats to express several forms of keys.  
Obviously, 
the public key from an asymmetric key pair can be freely imported to 
and exported from the browser, 
so there needs to be a format for public keys.  
There is also a need for a format to express private keys and symmetric keys.  

For non-public keys, 
the primary need is for a wrapped form, 
where the confidentiality and integrity of the key is assured
cryptographically; 
these protections should also apply to any attributes of the key.  

It may also be useful to define a direct,
unwrapped format, 
for use within a security boundary.

(draft06)
