2.  Definitions
=========================

This document makes extensive use of standard security terminology :term:`[RFC4949]`.  

In addition, 
because the use cases for JOSE and CMS are similar, 
we will sometimes make analogies to some CMS concepts :term:`[RFC5652]`.


The JOSE working group charter calls for the group to define three
basic JSON object formats:

1.  Confidentiality-protected object format

2.  Integrity-protected object format

3.  A format for expressing keys

In this document, 
we will refer to these as the "**encrypted object format**", 
the "**signed object format**", and the "**key format**",
respectively.  

The JOSE working group items intended to describe these formats are 
:doc:`JSON Web Signature <jws>` (JWS), 
:doc:`JSON Web Encryption <jwe>` (JWE), and 
:doc:`JSON Web Key <jwk>` (JWK), 
respectively 
[I-D.ietf-jose-json-web-signature]
[I-D.ietf-jose-json-web-encryption] 
[I-D.ietf-jose-json-web-key].

Algorithms and algorithm identifiers used by JWS, JWE, and JWK are
defined in :doc:`JSON Web Algorithms <jwa>` (JWA)
[I-D.ietf-jose-json-web-algorithms].


In general, 
where there is no need to distinguish 
between asymmetric and symmetric operations, 
we will use the terms "signing", "signature", etc. 
to denote both true digital signatures involving
asymmetric cryptography 
as well as message authentication codes using symmetric keys (MACs).

In the lifespan of a secure object, 
there are two basic roles, 
an entity that creates the object 
(e.g., encrypting or signing a payload), 
and an entity that uses the object (decrypting, verifying).

We will refer to these roles as "**sender**" and "**recipient**",
respectively.  

Note that while some requirements and use cases may
refer to these as single entities, 
each object may have multiple entities in each role.  

For example, 
a message may be signed by
multiple senders, or decrypted by multiple recipients.

(draft06)
