5.8.1.  Example: MAC based on ECDH-derived key
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Suppose a small, 
low power device maker has decided on 
using the output of the JOSE working group 
as their encryption and authentication framework.  

The device maker has a limited budget for both gates and power.  
For this reason there are a number of short
cuts and design decisions that have been made in order to minimize these needs.

The design team has determined that 
the use of message authentication codes (MAC) is going to be sufficient 
to provide the necessary authentication.  

However, 
although a MAC is going to be used, 
they do not want to use a single long term shared secret.  

Instead they have adopted the following proposal 
for computing a shared secret that can be validated:

-  An Elliptic-Curve Diffie-Hellman (ECDH) key is generated for the
   device at the time of manufacturing.  

   (Or as part of the configuration process during installation.)

-  An ECDH public key for the controller is configured at the time of
   configuration.

-  The configuration system performs the ECDH computation and
   configures the device with the resulting shared secret.  

   This process eliminates the need for the device to be able 
   to perform the required exponentiation processing.  

   The security requirements 
   on protecting this computed shared secret are the same 
   as the requirements on protecting the private ECDH key.

-  A counter and an increment value are configured onto the device.

-  When a message is to be sent by the device, 
   the counter is incremented and a new MAC key is computed from the ECDH secret 
   and the counter value.  

   A custom Key Derivation Function (KDF) function based on the AES-CBC 
   is used to derive the required MAC key.  

   The MAC key is then used to compute the MAC value for the message.

In a similar manner the KDF function can used 
to compute an AEAD algorithm key 
when the system needs to provide confidentially for the message.  

The controller, 
being a larger device will perform the exponentiation step 
and use a random number generator to generate the sender nonce value.

(draft06)
