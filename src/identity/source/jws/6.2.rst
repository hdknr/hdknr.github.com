6.2.  Creating a JWS with RSA SHA-256, RSA SHA-384, or RSA SHA-512
---------------------------------------------------------------------------

This section defines the use of the :term:`RSASSA-PKCS1-v1_5` signature algorithm 
as defined in RFC 3447 [:rfc:`3447`], Section 8.2 (commonly known as PKCS#1), 
using SHA-256, SHA-384, or SHA-512 as the hash function. 

The RSASSA-PKCS1-v1_5 algorithm is described in FIPS 186-3 [FIPS.186‑3], Section 5.5, 
and the SHA-256, SHA-384, and SHA-512 cryptographic hash functions are defined in FIPS 180-3 [FIPS.180‑3]. 

The reserved :term:`alg` header parameter values 
RS256, RS384, and RS512 are used in the :term:`JWS Header` to indicate 
that the :term:`Encoded JWS Signature` contains a base64url encoded RSA signature 
using the respective hash function.

The public keys employed may be retrieved 
using Header Parameter methods described in :ref:`Section 4.1 <jws.4.1>` or 
may be distributed using methods that are outside the scope of this specification.

A **2048-bit or longer key length** MUST be used with this algorithm.

The RSA SHA-256 signature is generated as follows:

    1.  Generate a digital signature of the UTF-8 representation of 
        the :term:`JWS Signing Input` using RSASSA-PKCS1-V1_5-SIGN and 
        the SHA-256 hash function with the desired private key. 
        The output will be a byte array.
    2.  Base64url encode the byte array, as defined in this specification.

The output is the :term:`Encoded JWS Signature` for that JWS.

The RSA SHA-256 signature for a JWS is validated as follows:

    1.  Take the :term:`Encoded JWS Signature` and base64url decode it into a byte array. 
        If decoding fails, the signed content MUST be rejected.
    2.  Submit the UTF-8 representation of the :term:`JWS Signing Input` and the public key 
        corresponding to the private key used by the signer to the RSASSA-PKCS1-V1_5-VERIFY algorithm 
        using SHA-256 as the hash function.
    3.  If the validation fails, the signed content MUST be rejected.

Signing with the RSA SHA-384 and RSA SHA-512 algorithms is performed identically to the procedure for RSA SHA-256 - 
just with correspondingly longer key and result values. 

(v.03)
