.. _jws_rules:

5.  Rules for Creating and Validating a JWS
===================================================

To create a JWS, one MUST follow these steps:

    1.  Create the content to be used as the :term:`JWS Payload`.
    2.  Base64url encode the JWS Payload. 
        This encoding becomes the :term:`Encoded JWS Payload`.
    3.  Create a JSON object containing a set of desired header parameters. 
        Note that white space is explicitly allowed 
        in the representation and no canonicalization is performed before encoding.
    4.  Translate this JSON object's Unicode code points into UTF-8, 
        as defined in RFC 3629 [RFC3629].
    5.  Base64url encode the UTF-8 representation of this JSON object 
        as defined in this specification (without padding). 
        This encoding becomes the :term:`Encoded JWS Header`.
    6.  Compute the :term:`JWS Signature` in the manner 
        defined for the particular algorithm being used. 
        The :term:`JWS Signing Input` is always the concatenation of the :term:`Encoded JWS Header`, 
        a **period** ('.') character, 
        and the :term:`Encoded JWS Payload`. 
        The :term:`alg` header parameter MUST be present in the :term:`JSON Header`, 
        with the algorithm value accurately representing the algorithm used to construct the :term:`JWS Signature`.
    7.  Base64url encode the representation of the :term:`JWS Signature` to create the :term:`Encoded JWS Signature`.

When validating a JWS, the following steps MUST be taken. 
If any of the listed steps fails, then the signed content MUST be rejected.

    1.  The :term:`Encoded JWS Payload` MUST be successfully base64url decoded 
        following the restriction given in this specification 
        that **no padding characters** have been used.
    2.  The :term:`Encoded JWS Header` MUST be successfully base64url decoded 
        following the restriction given in this specification that **no padding characters** have been used.
    3.  The :term:`JWS Header` MUST be completely valid JSON syntax conforming to RFC 4627 [RFC4627].
    4.  The :term:`Encoded JWS Signature` MUST be successfully base64url decoded 
        following the restriction given in this specification that **no padding characters** have been used.
    5.  The :term:`JWS Header` MUST be validated to only include parameters 
        and values whose syntax and semantics are both understood and supported.
    6.  The :term:`JWS Signature` MUST be successfully validated 
        against the :term:`JWS Header` and :term:`JWS Payload` 
        in the manner defined for the algorithm being used, 
        which MUST be accurately represented by the value of the :term:`alg` header parameter, 
        which MUST be present.

Processing a JWS inevitably requires comparing known strings to values in the header. 
For example, 
in checking what the algorithm is, 
the Unicode string encoding :term:`alg` will be checked against the member names 
in the :term:`JWS Header` to see if there is a matching header parameter name. 
A similar process occurs 
when determining 
if the value of the :term:`alg` header parameter represents a supported algorithm. 
Comparing Unicode strings, however, has significant security implications, as per :ref:`Section 8 <jws.8>`.

Comparisons between JSON strings and other Unicode strings MUST be performed as specified below:

    1.  Remove any JSON applied escaping to produce an array of Unicode code points.
    2.  Unicode Normalization [USA15] MUST NOT be applied at any point 
        to either the JSON string or to the string it is to be compared against.
    3.  Comparisons between the two strings MUST be performed 
        as a Unicode code point to code point equality comparison.

(v.03 http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-03#section-5)
