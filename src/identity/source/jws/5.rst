.. _jws_rules:


5. Rules for Creating and Validating a JWS
==================================================================

To create a JWS, one MUST perform these steps.  The order of the
steps is not significant in cases where there are no dependencies
between the inputs and outputs of the steps.

   1.  Create the content to be used as the JWS Payload.

   2.  Base64url encode the bytes of the JWS Payload.  This encoding
       becomes the Encoded JWS Payload.

   3.  Create a JWS Header containing the desired set of header
       parameters.  Note that white space is explicitly allowed in the
       representation and no canonicalization need be performed before
       encoding.

   4.  Base64url encode the bytes of the UTF-8 representation of the JWS
       Header to create the Encoded JWS Header.

   5.  Compute the JWS Signature in the manner defined for the
       particular algorithm being used.  The JWS Secured Input is always
       the concatenation of the Encoded JWS Header, a period ('.')
       character, and the Encoded JWS Payload.  The "alg" (algorithm)
       header parameter MUST be present in the JSON Header, with the
       algorithm value accurately representing the algorithm used to
       construct the JWS Signature.

   6.  Base64url encode the representation of the JWS Signature to
       create the Encoded JWS Signature.

   7.  The three encoded parts, taken together, are the result.  The
       Compact Serialization of this result is the concatenation of the
       Encoded JWS Header, the Encoded JWS Payload, and the Encoded JWS
       Signature in that order, with the three strings being separated
       by two period ('.') characters.

When validating a JWS, the following steps MUST be taken.  The order
of the steps is not significant in cases where there are no
dependencies between the inputs and outputs of the steps.  If any of
the listed steps fails, then the JWS MUST be rejected.

   1.  Parse the three parts of the input (which are separated by period
       ('.') characters when using the JWS Compact Serialization) into
       the Encoded JWS Header, the Encoded JWS Payload, and the Encoded
       JWS Signature.

   2.  The Encoded JWS Header MUST be successfully base64url decoded
       following the restriction given in this specification that no
       padding characters have been used.

   3.  The resulting JWS Header MUST be completely valid JSON syntax
       conforming to RFC 4627 [RFC4627].

   4.  The resulting JWS Header MUST be validated to only include
       parameters and values whose syntax and semantics are both
       understood and supported.

   5.  The Encoded JWS Payload MUST be successfully base64url decoded
       following the restriction given in this specification that no
       padding characters have been used.

   6.  The Encoded JWS Signature MUST be successfully base64url decoded
       following the restriction given in this specification that no
       padding characters have been used.

   7.  The JWS Signature MUST be successfully validated against the JWS
       Secured Input (the concatenation of the Encoded JWS Header, a
       period ('.') character, and the Encoded JWS Payload) in the
       manner defined for the algorithm being used, which MUST be
       accurately represented by the value of the "alg" (algorithm)
       header parameter, which MUST be present.

Processing a JWS inevitably requires comparing known strings to
values in the header.  For example, in checking what the algorithm
is, the Unicode string encoding "alg" will be checked against the
member names in the JWS Header to see if there is a matching header
parameter name.  A similar process occurs when determining if the
value of the "alg" header parameter represents a supported algorithm.

Comparisons between JSON strings and other Unicode strings MUST be
performed as specified below:

   1.  Remove any JSON applied escaping to produce an array of Unicode
       code points.

   2.  Unicode Normalization [USA15] MUST NOT be applied at any point to
       either the JSON string or to the string it is to be compared
       against.

   3.  Comparisons between the two strings MUST be performed as a
       Unicode code point to code point equality comparison.

(v.06 http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-06#section-5)
