5.2.  Message Signature or MAC Validation
------------------------------------------------------------------

When validating a JWS, the following steps MUST be taken.  The order
of the steps is not significant in cases where there are no
dependencies between the inputs and outputs of the steps.  If any of
the listed steps fails, then the signature or MAC cannot be
validated.

It is an application decision which signatures, MACs, or plaintext
values must successfully validate for the JWS to be accepted.  In
some cases, all must successfully validate or the JWS will be
rejected.  In other cases, only a specific signature, MAC, or
plaintext value needs to be successfully validated.  However, in all
cases, at least one signature, MAC, or plaintext value MUST
successfully validate or the JWS MUST be rejected.

1.   Parse the JWS representation to extract the serialized values
     for the components of the JWS -- when using the JWS Compact
     Serialization, the base64url encoded representations of the JWS
     Protected Header, the JWS Payload, and the JWS Signature, and
     when using the JWS JSON Serialization, also the unencoded JWS
     Unprotected Header value.  When using the JWS Compact
     Serialization, the JWS Protected Header, the JWS Payload, and
     the JWS Signature are represented as base64url encoded values in
     that order, separated by two period ('.') characters.  The JWS
     JSON Serialization is described in Section 7.2.

2.   The encoded representation of the JWS Protected Header MUST be
     successfully base64url decoded following the restriction that no
     padding characters have been used.

3.   The resulting octet sequence MUST be a UTF-8 encoded
     representation of a completely valid JSON object conforming to
     [RFC7159], which is the JWS Protected Header.

4.   If using the JWS Compact Serialization, let the JWS Header be
     the JWS Protected Header; otherwise, when using the JWS JSON
     Serialization, let the JWS Header be the union of the members of
     the corresponding JWS Protected Header and JWS Unprotected
     Header, all of which must be completely valid JSON objects.

5.   The resulting JWS Header MUST NOT contain duplicate Header
     Parameter names.  When using the JWS JSON Serialization, this
     restriction includes that the same Header Parameter name also
     MUST NOT occur in distinct JSON object values that together
     comprise the JWS Header.

6.   Verify that the implementation understands and can process all
     fields that it is required to support, whether required by this
     specification, by the algorithm being used, or by the "crit"
     Header Parameter value, and that the values of those parameters
     are also understood and supported.

7.   The encoded representation of the JWS Payload MUST be
     successfully base64url decoded following the restriction that no
     padding characters have been used.

8.   The encoded representation of the JWS Signature MUST be
     successfully base64url decoded following the restriction that no
     padding characters have been used.

9.   The JWS Signature MUST be successfully validated against the JWS
     Signing Input ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.'
     || BASE64URL(JWS Payload)) in the manner defined for the
     algorithm being used, which MUST be accurately represented by
     the value of the "alg" (algorithm) Header Parameter, which MUST
     be present.

10.  If the JWS JSON Serialization is being used, repeat this process
     (steps 4-9) for each digital signature or MAC value contained in
     the representation.


(draft27)


