2.1.  Client Registration Request
---------------------------------------------------------

Clients MUST send requests encoded as a POST with the following parameters added to the HTTP request entity-body using "application/x-www-form-urlencoded" format:

.. glossary::

    type
        REQUIRED. Values are client_associate (for new registrations) and client_update (for updating parameters of an existing client_id). 

    client_id
        OPTIONAL. The registered parameters for this client_id are updated. Used with client_update. 

    client_secret
        OPTIONAL. The client_secret used to authenticate requests that have client_update as the value of the type parameter. 

    access_token
        OPTIONAL. An Access Token obtained out of band to authorize the registrant. This parameter is only used if the Client is provided the Access Token out of band. This parameter MUST NOT be sent if the Access Token is sent in the HTTP Authorization header as described in Section 7.1 of OAuth 2.0 [OAuth2.0]. Access Tokens sent in the authorization header must be Bearer Tokens [OAuth.Bearer]. 

    contacts
        OPTIONAL. Space delimited list of email addresses for people allowed to administer the information for this Client. This is used by some providers to enable a web UI to modify the Client information. 

    application_type
        OPTIONAL. native or web. 

    application_name
        OPTIONAL. Name of the Client to be presented to the user. 

    logo_url
        OPTIONAL. A URL that references a logo for the Client application. 

    redirect_uris
        RECOMMENDED for Clients using the code flow with a query parameter encoded response. REQUIRED for Clients requesting implicit flow fragment encoded responses as defined in OAuth 2.0 [OAuth2.0]. A space-delimited list of redirect URIs. One of the URL MUST match the Scheme, Host, and Path segments of the redirect_uri in the authorization request. 

    token_endpoint_auth_type
        OPTIONAL. The requested authentication type for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 2.2.1 of OpenID Connect Messages 1.0 [OpenID.Messages]. Other Authentication methods may be defined by extension. If unspecified or omitted, the default is client_secret_basic HTTP Basic Authentication Scheme as specified in section 2.3.1 of OAuth 2.0 [OAuth2.0]. 

    policy_url
        OPTIONAL. A URL location that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The OpenID Provider SHOULD display this URL to the End-User if it is given. 

    jwk_url
        OPTIONAL. URL for the Client's JSON Web Key [JWK] document that is used for signing Token Endpoint Requests and OpenID Request Objects. If jwk_encryption_url is not provided it is also used to encrypt the ID Token and User Info Endpoint Responses to the Client. If the Client registers both x509_url and jwk_url, the keys contained in both formats SHOULD be the same. 

    jwk_encryption_url
        OPTIONAL. URL for the Client's JSON Web Key [JWK] that is used to encrypt the ID Token and User Info Endpoint Responses to the Client. If the Client registers both jwk_encryption_url and x509_encryption_url, the keys contained in both formats SHOULD be the same. 

    x509_url
        OPTIONAL. 
        URL for the Client's :term:`PEM` encoded X.509 Certificate or Certificate chain 
        that is used for signing :term:`Token Endpoint Requests` and :term:`OpenID Request Objects`. 
        If :term:`x509_encryption_url` is not provided, 
        :term:`x509_url` it is also used to encrypt the :term:`ID Token` and :term:`User Info Endpoint Responses` to the Client. 
        If the Client registers both :term:`x509_url` and :term:`jwk_url`, 
        the keys contained in both formats SHOULD be the **same**. 

    x509_encryption_url
        OPTIONAL. 
        URL for the Client's :term:`PEM` encoded X.509 Certificate or Certificate chain 
        that is used to encrypt the :term:`ID Token` and :term:`User Info Endpoint Responses` to the Client. 
        If the Client registers both :term:`jwk_encryption_url` and :term:`x509_encryption_url`, 
        the keys contained in both formats SHOULD be the same. 

    sector_identifier_url
        OPTIONAL. A HTTPS scheme URL to be used in calculating Pseudonymous Identifiers by the OP. The URL contains a file with a single JSON array of redirect_uri values. Please see Section 2.1.1. 

    user_id_type
        OPTIONAL. 
        The :term:`user_id_type` requested for responses to this :term:`client_id`. 
        The :term:`user_id_types_supported` element of :doc:`discovery` contains 
        a list of the supported :term:`user_id_type` values for this server. 

        Valid types include **pairwise** and **public**. 

    require_signed_request_object
        OPTIONAL. The JWS [JWS] alg algorithm [JWA] that MUST be required by the Authorization Server. The valid values are listed in JWA Section 3, Table 1. [JWA] All OpenID Request Objects from this client_id MUST be rejected if not signed by this algorithm. 

    userinfo_signed_response_alg
        OPTIONAL. The JWS alg algorithm [JWA] required for UserInfo responses. The valid values are listed in JWA Section 3, Table 1. [JWA] If this is specified the response will be JWT [JWT] serialized, and signed using JWS. 

    userinfo_encrypted_response_alg
        OPTIONAL. The JWE [JWE] alg algorithm [JWA] required for encrypting UserInfo responses. The valid values are listed in JWA Section 4, Table 2. [JWA] If this is requested in combination with signing the response will be signed then encrypted. If this is specified the response will be JWT [JWT] serialized, and encrypted using JWE. 

    userinfo_encrypted_response_enc
        OPTIONAL. The JWE enc algorithm [JWA] required for symmetric encryption of UserInfo responses. The valid values are listed in JWA Section 4, Table 3. [JWA] If "userinfo_encrypted_response_alg" is specified the default for this value is A128CBC. If this is requested in combination with signing the response will be signed then encrypted. If this is specified the response will be JWT [JWT] serialized, and encrypted using JWE. 

    userinfo_encrypted_response_int
        OPTIONAL. The JWE int algorithm [JWA] required for integrity of UserInfo responses. The valid HMAC values are listed in JWA Section 3, Table 1. [JWA] If "userinfo_encrypted_response_alg" is specified and the "userinfo_encrypted_response_enc" is not an AEAD algorithm, the default for this value is HS256. If this is requested in combination with signing the response will be signed then encrypted. If this is specified the response will be JWT [JWT] serialized, and encrypted using JWE. 

    id_token_signed_response_alg
        OPTIONAL. The JWS alg algorithm [JWA] required for the ID Token issued to this client_id. The valid values are listed in JWA Section 3, Table 1. [JWA] The default if not specified is HS256 using the provided client_secret. 

    id_token_encrypted_response_alg
        OPTIONAL. 
        The JWE alg algorithm [JWA] required for encrypting the ID Token issued to this client_id. The valid values are listed in JWA Section 4, Table 2. [JWA] If this is requested the response will be signed then encrypted. The default if not specified is no encryption. 

    id_token_encrypted_response_enc
        OPTIONAL. The JWE enc algorithm [JWA] required for symmetric encryption of the ID Token issued to this client_id. The valid values are listed in JWA Section 4, Table 3. [JWA] If "id_token_encrypted_response_alg" is specified the default for this value is A128CBC. If this is requested in combination with signing the response will be signed then encrypted. If this is specified the response will be JWT [JWT] serialized, and encrypted using JWE. 

    id_token_encrypted_response_int
        OPTIONAL. The JWE int algorithm [JWA] required for integrity of the ID Token issued to this client_id. The valid HMAC values are listed in JWA Section 3, Table 1. [JWA] If "id_token_encrypted_response_alg" is specified and the "id_token_encrypted_response_enc" is not an AEAD algorithm, the default for this value is HS256. If this is requested in combination with signing the response will be signed then encrypted. If this is specified the response will be JWT [JWT] serialized, and encrypted using JWE. 

    default_max_age
        OPTIONAL. (default max authentication age): Type: Integer - Specifies that the End-User must be actively authenticated if any present authentication is older than the specified number of seconds. (The max_age request parameter corresponds to the OpenID 2.0 PAPE max_auth_age request parameter.) The max_age claim in the request object overrides this default value. 

    require_auth_time
        OPTIONAL. (default max authentication age): Type: Logical - If the value is true, then the auth_time claim in the id_token is REQUIRED. The returned Claim Value is the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time that the End-User authentication occurred. (The auth_time Claim semantically corresponds to the OpenID 2.0 PAPE auth_time response parameter.) The auth_time claim request in the request object overrides this setting. 

    default_acr
        OPTIONAL.  (default :term:`authentication context class reference`): 

        Type: String - Specifies the default value that the Authorization server must use for processing requests from this client. 
        The :ref:`acrs_supported element of discovery <discovery.table.1>` contains 
        a list of the supported :term:`acr` values for this server. 
        The :term:`acr` claim in the request object overrides this default value. 


Following is a non-normative example request:

::

    POST /connect/register HTTP/1.1
    Accept: application/x-www-form-urlencoded
    Host: server.example.com

::

    type=client_associate
    &redirect_uris=https://client.example.com/callback%20https://client.example.com/callback2
    &logo_url=https://client.example.com/logo.png
    &user_id_type=pairwise
    &sector_identifier_url=https://othercompany.com/file_of_redirect_uris_for_our_sites.js
    &token_endpoint_auth_type=client_secret_basic
    &jwk_url=https://client.example.com/my_rsa_public_key.jwk
    &userinfo_encrypted_response_alg=RSA1_5
    &userinfo_encrypted_response_enc=A128CBC
    &userinfo_encrypted_response_int=HS256


( Draft 10 , http://openid.net/specs/openid-connect-registration-1_0.html#anchor3 )

.. note::

    :term:`default_acr` is described at 
    `#530 Add Authentication Context Class to Registration <https://bitbucket.org/openid/connect/issue/530/add-authentication-context-class-to>`_ .
