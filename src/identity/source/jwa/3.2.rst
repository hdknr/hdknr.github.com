3.2.  HMAC with SHA-2 Functions
------------------------------------------------------------

Hash-based Message Authentication Codes (HMACs) enable one 
to use a **secret** plus a **cryptographic hash function** 
to generate a Message Authentication Code (MAC).  

This can be used to demonstrate that
whoever generated the MAC was in possession of the MAC key.  
The algorithm for implementing and validating HMACs is 
provided in :rfc:`2104` :term:`[RFC2104]`.

A key of the same size as the hash output 
(for instance, 256 bits for "HS256") 
or larger MUST be used with this algorithm.

The HMAC SHA-256 MAC is generated per RFC 2104, 
using SHA-256 as the hash algorithm "**H**", 
using the :term:`JWS Signing Input` as the "**text**" value,
and using the :term:`shared key`.  
The HMAC output value is the JWS Signature.

The following "alg" (algorithm) Header Parameter values 
are used to indicate that 
the JWS Signature is an HMAC value computed 
using the corresponding algorithm:

            +---------------------+--------------------+
            | alg Parameter Value | MAC Algorithm      |
            +---------------------+--------------------+
            | HS256               | HMAC using SHA-256 |
            | HS384               | HMAC using SHA-384 |
            | HS512               | HMAC using SHA-512 |
            +---------------------+--------------------+

The HMAC SHA-256 MAC for a JWS is validated 
by computing an HMAC value per RFC 2104, 
using SHA-256 as the hash algorithm "H", 
using the received JWS Signing Input as the "text" value, 
and using the shared key.  

This computed HMAC value is then compared 
to the result of :term:`base64url` decoding 
the received encoded JWS Signature value.

Alternatively, 
the computed HMAC value can be base64url encoded and
compared to the received encoded JWS Signature value, 
as this comparison produces the same result 
as comparing the unencoded values.  

In either case, 
if the values match, 
the HMAC has been validated.

Securing content and validation with the HMAC SHA-384 
and HMAC SHA-512 algorithms is performed 
identically to the procedure for HMAC SHA-256 -- 
just using the corresponding hash algorithms 
with correspondingly larger minimum key sizes 
and result values: 
384 bits each for HMAC SHA-384 
and 512 bits each for HMAC SHA-512.

An example using this algorithm is shown 
in :ref:`Appendix A.1 <jws.appendix.a.1>` of :term:`[JWS]`.

(draft20)
(https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-20#section-3.2)
