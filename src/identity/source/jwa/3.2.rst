3.2.  Creating a JWS with RSA SHA-256, RSA SHA-384, or RSA SHA-512
------------------------------------------------------------------------------------

.. note::
    RSA

This section defines the use of the :term:`RSASSA-PKCS1-v1_5` digital signature algorithm 
as defined in RFC 3447 [:term:`RFC3447`], Section 8.2 (commonly known as :term:`PKCS#1`), 
using SHA-256, SHA-384, or SHA-512 as the hash function. 
The :term:`RSASSA-PKCS1-v1_5` algorithm is described in FIPS 186-3 [:term:`FIPS.186‑3`], Section 5.5, 
and the :term:`SHA-256`, :term:`SHA-384`, and :term:`SHA-512` cryptographic hash functions are defined 
in FIPS 180-3 [:term:`FIPS.180‑3`]. 
The :term:`alg` (algorithm) header parameter values RS256, RS384, and RS512 are used in the :term:`JWS Header` 
to indicate that the :term:`Encoded JWS Signature` contains a :term:`base64url` encoded RSA digital signature 
using the respective hash function.

A **2048-bit** or longer key length MUST be used with this algorithm.

The RSA SHA-256 digital signature is generated as follows:

    1.  Generate a digital signature of the UTF-8 representation of the :term:`JWS Secured Input` 
        using RSASSA-PKCS1-V1_5-SIGN and the SHA-256 hash function with the desired private key. 
        The output will be a byte array.
    2.  Base64url encode the resulting byte array.
    3.  The output is the :term:`Encoded JWS Signature` for that JWS.

The RSA SHA-256 digital signature for a JWS is validated as follows:

    1.  Take the :term:`Encoded JWS Signature` and base64url decode it into a byte array. 
        If decoding fails, the JWS MUST be rejected.
    2.  Submit the UTF-8 representation of the :term:`JWS Secured Input` and the public key 
        corresponding to the private key used by the signer to the RSASSA-PKCS1-V1_5-VERIFY algorithm 
        using SHA-256 as the hash function.
    3.  If the validation fails, the JWS MUST be rejected.

Signing with the RSA SHA-384 and RSA SHA-512 algorithms is performed identically to the procedure for RSA SHA-256 - just with correspondingly longer key and result values.
(00)
