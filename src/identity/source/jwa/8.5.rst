8.5. Plaintext JWS Security Considerations
---------------------------------------------------


   Plaintext JWSs (JWSs that use the "alg" value "none") provide no
   integrity protection.  Thus, they must only be used in contexts where
   the payload is secured by means other than a digital signature or MAC
   value, or need not be secured.

   Implementations that support plaintext JWS objects MUST NOT accept
   such objects as valid unless the application specifies that it is
   acceptable for a specific object to not be integrity-protected.
   Implementations MUST NOT accept plaintext JWS objects by default.
   For example, the "verify" method of a hypothetical JWS software
   library might have a Boolean "acceptUnsigned" parameter that
   indicates "none" is an acceptable "alg" value.  As another example,
   the "verify" method might take a list of algorithms that are
   acceptable to the application as a parameter and would reject
   plaintext JWS values if "none" is not in that list.

   In order to mitigate downgrade attacks, applications MUST NOT signal
   acceptance of plaintext JWS objects at a global level, and SHOULD
   signal acceptance on a per-object basis.  For example, suppose an
   application accepts JWS objects over two channels, (1) HTTP and (2)
   HTTPS with client authentication.  It requires a JWS signature on
   objects received over HTTP, but accepts plaintext JWS objects over
   HTTPS.  If the application were to globally indicate that "none" is
   acceptable, then an attacker could provide it with an unsigned object
   over HTTP and still have that object successfully validate.  Instead,
   the application needs to indicate acceptance of "none" for each
   object received over HTTPS (e.g., by setting "acceptUnsigned" to
   "true" for the first hypothetical JWS software library above), but
   not for each object received over HTTP.

(draft20)
