===============
パターン
===============

デザインパターン
===============

Strategy
----------------

- `アルゴリズムを実行時に選択することができるデザインパターンである. <http://ja.wikipedia.org/wiki/Strategy_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3>`_

    - Strategy = インターフェース(C#,Java)

- 関数がファーストクラスオブジェクト(Pythonとか)であれば、ストラテジ(インターフェース)を明示的に用意する必要はない。(?)

固定的ストラテジと動的ストラテジ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ストラテジが固定的であればインターフェース定義を共有すればよい
- ストラテジが動的であれば、必要なストラテジを実装したクラスを生成するファクトリクラスを共有すればよい。

