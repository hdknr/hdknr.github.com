========================================
VERP:Variable envelope return path
========================================

- http://en.wikipedia.org/wiki/Variable_envelope_return_path
- http://packages.python.org/flufl.bounce/docs/using.html#basic-usage


Example
=========

.. note::

    -  Bob ( bob@example.org ) が ML ( wikipedians@example.net ) から既に退会しているので、彼のアドレスは使えない

Assume there is mailing list called wikipedians@example.net and that an individual, 
bob@example.org has subscribed to it, 
but later on, 
Bob has left example.org, so his address is no longer valid. 

Consider what happens when someone sends a message to the list.

Without VERP
--------------------

Without VERP, 
the mailing list manager might send a message with the following characteristics:

::

    envelope sender: wikipedians-owner@example.net
    recipient: bob@example.org

This would result in a bounce, generated by the MTA of either example.net or example.org, with the following characteristics:

::

    envelope sender: empty
    recipient: wikipedians-owner@example.net
    contents: example.org was unable to deliver the following message to bob: ...

The mailing list manager can't be expected to understand the contents of this bounce, 
and can't deduce anything from the recipient address 
because hundreds of other people besides Bob were also sent messages from 
wikipedians-owner@example.net.

With VERP
--------------------

With VERP, the original message would be different:

::

    envelope sender: wikipedians-owner+bob=example.org@example.net
    recipient: bob@example.org

The bounce, then, will be more useful:

::

    envelope sender: empty
    recipient: wikipedians-owner+bob=example.org@example.net
    contents: example.org was unable to deliver the following message to bob: ...

From this bounce message
 the mailing list manager can deduce that a message to bob@example.org must have failed.

This example shows the simplest possible method of matching a VERP to a list subscriber: 
the entire recipient address is included within the return path, 
with the at sign replaced by an equals sign because a return path with two at signs would be invalid. 
Other encoding schemes are possible.


