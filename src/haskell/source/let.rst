============
let 式
============

.. contents::
    :local:

.. glossary::

    let
    let 式
    let expression
        - :ref:`let.about`

.. _let.about:

let式
======

局所的な束縛の生成
---------------------

- ひとつの式のなかで入れ子の有効範囲をつくりたいことがよくあります。
- これは、 その部分だけの局所的な束縛をつくりたいときです。
- ある種の「ブロック構造」 の形式が欲しくなります。
- Haskell ではこれを実現するのに :doc:`let` と :doc:`where` つの方法が用意 されています。

相互再帰
----------

- let 式によってつくられる束縛の集りは、相互再帰的 ( mutually recursive )
- パターン束縛は遅延パターンとして扱われます( ~が暗黙のうちについているということです)

許される宣言
---------------

- letで許される宣言は以下の３つのみです。

    - :term:`型シグネチャー`
    - :term:`関数束縛`
    - :term:`パターン束縛`

波括弧(中括弧)で複数を束縛
============================

.. code-block:: haskell

    Prelude> let { f :: Char -> String ; f a = [a,a,a] ; }
    Prelude> f 'a'
    "aaa"
