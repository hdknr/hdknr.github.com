3.1.3.1 Client Identifier
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. glossary::

    Client Identifier 
    ClientId
        Described in :ref:`mqtt.3.1.3.1` (here) 

    

The Client Identifier (ClientId) identifies the Client to the Server. 

Each Client connecting to the Server has a unique ClientId. 

The ClientId MUST be used by Clients and by Servers 
to identify state that they hold relating to this MQTT Session 
between the Client and the Server [MQTT-3.1.3-2].
 
The Client Identifier (ClientId) MUST be present 
and MUST be the first field in the CONNECT packet payload [MQTT-3.1.3-3].
 
The ClientId MUST be a UTF-8 encoded string as defined in :ref:`Section 1.5.3 <mqtt.1.5.3>` [MQTT-3.1.3-4]. 

The Server MUST allow ClientIds 
which are between 1 and 23 UTF-8 encoded bytes in length, 
and that contain only the characters
"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" [MQTT-3.1.3-5].
 
The Server MAY allow ClientId’s 
that contain more than 23 encoded bytes. 
The Server MAY allow ClientId’s that contain characters not included in the list given above. 

A Server MAY allow a Client to supply a ClientId that has a length of zero bytes, 
however if it does so the Server MUST treat this as a special case and assign a unique ClientId to that Client. 
It MUST then process the CONNECT packet as if the Client had provided that unique ClientId [MQTT-3.1.3-6].

If the Client supplies a zero-byte ClientId, 
the Client MUST also set CleanSession to 1 [MQTT-3.1.3-7].

.. note::
    ClientID = '' だったら、 ClieanSession = 1

If the Client supplies a zero-byte ClientId with CleanSession set to 0, 
the Server MUST respond to the CONNECT Packet with a CONNACK return code 0x02 (Identifier rejected) 
and then close the Network Connection [MQTT-3.1.3-8].

If the Server rejects the ClientId it MUST respond to the CONNECT Packet with a CONNACK 
return code 0x02 (Identifier rejected) and then close the Network Connection [MQTT-3.1.3-9].
 
.. note:: Non normative comment

    A Client implementation could provide a convenience method to generate a random ClientId. 

    Use of such a method should be actively discouraged when the CleanSession is set to 0.

Paho:

.. code-block:: python

    class Client(object):

        def __init__(self, client_id="", clean_session=True, userdata=None, protocol=MQTTv311):
            # ......
    
            if client_id == "" or client_id is None:
                self._client_id = "paho/" + "".join(random.choice("0123456789ADCDEF") for x in range(23-5))
            else:
                self._client_id = client_id

            # ....
    
